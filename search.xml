<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AOP面向切面编程</title>
    <url>/2021/10/22/AOP%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h2><h3 id="一、AOP"><a href="#一、AOP" class="headerlink" title="一、AOP"></a>一、AOP</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h4><ul>
<li><p>AOP</p>
<ul>
<li>Aspect</li>
<li>Oriented</li>
<li>Programming</li>
</ul>
</li>
<li><p><font color='#d15252'>面向切面编程</font>，通过预编译方式和运行期间动态代理实现程序功能的通过一维护的一种技术</p>
<ul>
<li>通俗的来说“切面”就是一个<font color='#d15252'>可拔插</font>的代码模块，可以在不影响源代码的情况下进行管理</li>
</ul>
</li>
<li><p>AOP切面最好只做一个业务</p>
</li>
</ul>
<h4 id="2-AOP入门案例"><a href="#2-AOP入门案例" class="headerlink" title="2.AOP入门案例"></a>2.AOP入门案例</h4><p><img src="https://i.loli.net/2021/10/10/IzYep5gkt9fOWlq.png" alt="image-20211010112112758"></p>
<ul>
<li>新建Admin和User类，分别添加Insert方法，但我们在插入数据时，需要先判断当前用户的权限，所以就产生了重复的模块</li>
<li>将重复的模块提取出来，并用一个类封装起来，但这个类现在和Admin、User并没有关联</li>
</ul>
<p><img src="https://i.loli.net/2021/10/10/sF1eEcaTVx4WPCR.png" alt="image-20211010112259719"></p>
<ul>
<li><p>我们需要给方法一个参数传递<font color='#d15252'> JoinPoint joinPoint</font>（需要<font color='#d15252'>导入依赖</font>）</p>
<p><img src="https://i.loli.net/2021/10/10/S36lGPmkvXWeJRr.png" alt="image-20211010112632248"></p>
<ul>
<li><p>光有AOP包是不够的，Aop包只能说是可以完成面向切面编程的思想</p>
</li>
<li><p>导入依赖aspectjweaver</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/10/10/QFc9t8YA4hlWIk5.png" alt="image-20211010113707049"></p>
</li>
<li><p>导入依赖后，还需要在Spring核心配置文件中为其添加约束</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>为方法添加参数 JoinPoint </p>
<p><img src="https://i.loli.net/2021/10/10/EnD6R1LrtZvwz2S.png" alt="image-20211010120205357"></p>
</li>
<li><p>让切面和类产生关联，通过修改Spring核心配置文件</p>
<ul>
<li><p>首先注入需要加入切面的类，其次注入切面</p>
<p><img src="https://i.loli.net/2021/10/10/9IKDkgf1G8naQvl.png" alt="image-20211010121115544"></p>
</li>
<li><p>还需要对Aop切面进行设置</p>
</li>
</ul>
</li>
</ul>
<h5 id="AOP切面设置"><a href="#AOP切面设置" class="headerlink" title="AOP切面设置"></a>AOP<font color='#d15252'>切面设置</font></h5><p><img src="https://i.loli.net/2021/10/10/R7chF2f5ilVo9qN.png" alt="image-20211010122102253"></p>
<h6 id="切点（地点）"><a href="#切点（地点）" class="headerlink" title="切点（地点）"></a>切点（地点）</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--   切点：切面插入的位置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;a1&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(public * com..*.*(..) )&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>id ：为切点起一个名字</li>
<li>expression：表示切点范围</li>
</ul>
<p><img src="https://i.loli.net/2021/10/10/kdtOPqZKDcTQAFI.png" alt="image-20211010122507745"></p>
<h6 id="指定切面类（人物）和通知方法何时进行（时间）"><a href="#指定切面类（人物）和通知方法何时进行（时间）" class="headerlink" title="指定切面类（人物）和通知方法何时进行（时间）"></a>指定切面类（人物）和通知方法何时进行（时间）</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--   指定（选择）切面类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myaop&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--   通知：方法何时执行 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;method&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;a1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li> &lt;aop:before &gt; 切面在程序之前执行</li>
<li> ref：指定切面类</li>
<li> method：指定切面类中要执行的方法</li>
<li> pointcut-ref：关联哪一个切点</li>
</ul>
<p><img src="https://i.loli.net/2021/10/10/1cdgTQbKnxD5RMJ.png" alt="image-20211010123501937"></p>
<p>在执行insert方法前，先执行切面方法</p>
<h4 id="3-JoinPoint-常用方法"><a href="#3-JoinPoint-常用方法" class="headerlink" title="3. JoinPoint 常用方法"></a>3. JoinPoint 常用方法</h4><h5 id="Ⅰ-getTarget"><a href="#Ⅰ-getTarget" class="headerlink" title="Ⅰ. getTarget()"></a>Ⅰ. getTarget()</h5><ul>
<li><p>获取到一个对象（封装了具体信息）</p>
<ul>
<li><p>可以再链式调用getClass获取运行时状态</p>
<ul>
<li>再使用运行时状态调用getName等获取信息方法</li>
</ul>
<p><img src="https://i.loli.net/2021/10/10/ZEBOrwGtDW7mIg9.png" alt="image-20211010120447837"></p>
</li>
</ul>
</li>
</ul>
<h5 id="Ⅱ-getSignature"><a href="#Ⅱ-getSignature" class="headerlink" title="Ⅱ. getSignature()"></a>Ⅱ. getSignature()</h5><ul>
<li><p>获取到目标方法的信息</p>
<ul>
<li>可以直接调用getName等方法，获取该方法的信息</li>
</ul>
<p><img src="https://i.loli.net/2021/10/10/UFD7IWu6OSgsrwm.png" alt="image-20211010122855253"></p>
</li>
</ul>
<h5 id="Ⅲ-getArgs"><a href="#Ⅲ-getArgs" class="headerlink" title="Ⅲ. getArgs()"></a>Ⅲ. getArgs()</h5><ul>
<li>返回目标参数<ul>
<li>参数值</li>
<li>返回值</li>
</ul>
</li>
<li>返回Object[]类型</li>
</ul>
<h4 id="4-AOP关键概念"><a href="#4-AOP关键概念" class="headerlink" title="4.AOP关键概念"></a>4.AOP关键概念</h4><ul>
<li>Spring AOP 和 Aspect 的关系<ul>
<li>Spring AOP可以实现面向切面的思想</li>
<li>Aspect是一个<font color='#d15252'>面向切面的框架</font></li>
<li>Aspectjweaver<ul>
<li>Spring AOP 使用该依赖实现类与方法匹配</li>
</ul>
</li>
</ul>
</li>
<li>关键词概念</li>
</ul>
<table>
<thead>
<tr>
<th>关键词</th>
<th>解释</th>
<th>使用</th>
</tr>
</thead>
<tbody><tr>
<td>Aspect</td>
<td>切面：具体的可插拔组件的功能类（通常一个切面只包含一个功能）</td>
<td>AOP</td>
</tr>
<tr>
<td>Target/Method</td>
<td>目标类和目标方法</td>
<td>JoinPoint</td>
</tr>
<tr>
<td>PointCut</td>
<td>切点：使用表达式来明确切面的位置</td>
<td>xml文件中</td>
</tr>
<tr>
<td>JoinPoint</td>
<td>连接点：包含了目标类和目标对象</td>
<td>xml文件中</td>
</tr>
<tr>
<td>Advice</td>
<td>通知：说明具体的切面执行的时间</td>
<td>xml文件中</td>
</tr>
</tbody></table>
<ul>
<li>JoinPoint作为切面中的一个对象，他可以打印出目标的相关信息<ul>
<li>所以JoinPoint也是切面和类的<font color='#d15252'>连接点</font></li>
</ul>
</li>
</ul>
<h4 id="5-通知类型"><a href="#5-通知类型" class="headerlink" title="5.通知类型"></a>5.通知类型</h4><table>
<thead>
<tr>
<th>通知类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>before</td>
<td>前置通知</td>
</tr>
<tr>
<td>after</td>
<td>后置通知</td>
</tr>
<tr>
<td>返回值后，切面执行fter-returning</td>
<td>目标返回值后，切面执行</td>
</tr>
<tr>
<td>after-throwing</td>
<td>异常后通知</td>
</tr>
<tr>
<td>around</td>
<td>环绕</td>
</tr>
<tr>
<td>introductionInterceptor</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>around环绕通知需要带参ProceedingJoinPoint<ul>
<li>是JoinPoint的一种</li>
<li>可以调用目标对象的方法</li>
<li>切入点一定要有返回值（Object）</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/10/10/rNIRmSfgyawt9Du.png" alt="image-20211010144922739"></p>
<h4 id="5-注解方式实现AOP"><a href="#5-注解方式实现AOP" class="headerlink" title="5.注解方式实现AOP"></a>5.注解方式实现AOP</h4><ul>
<li><p>开启注解扫描</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>启动Aop注解模式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        启动AOP注解模式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span>xxxxxxxxxx <span class="comment">&lt;!--        启动AOP注解模式--&gt;</span>    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span>@Aspect</span><br></pre></td></tr></table></figure></li>
<li><p>@Aspect表示切面</p>
</li>
<li><p>@Around(“execution(* *(..))”)表示环绕</p>
</li>
</ul>
<p><img src="https://i.loli.net/2021/10/10/EvWf9PXwDpamiBJ.png" alt="image-20211010150635291"></p>
<h4 id="6-设计模式-代理"><a href="#6-设计模式-代理" class="headerlink" title="6. 设计模式 -代理"></a>6. 设计模式 -代理</h4><p>代理的特点</p>
<ul>
<li>要有接口</li>
<li>代理类中要有接口的实例</li>
</ul>
<h5 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h5><ul>
<li>即定义接口，实现接口</li>
</ul>
<h5 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h5><ul>
<li>代理类不需要自己定义，jdk（2.0以后）给我们提供<ul>
<li>invocationhandler接口 </li>
</ul>
</li>
</ul>
<h4 id="AOP底层原理"><a href="#AOP底层原理" class="headerlink" title="AOP底层原理"></a>AOP底层原理</h4><ul>
<li>采用代理的机制<ul>
<li>JDK的动态代理（Proxy）：针对接口的实现类产生代理</li>
<li>CGlib动态代理</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Spring框架</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>AOP</tag>
      </tags>
  </entry>
  <entry>
    <title>API之StringBuffer\StringBuilder\Date\DateFormat\Calender</title>
    <url>/2021/08/25/API%E4%B9%8BStringBuffer-StringBuilder-Date-DateFormat-Calender/</url>
    <content><![CDATA[<h3 id="一、StringBuffer"><a href="#一、StringBuffer" class="headerlink" title="一、StringBuffer"></a>一、StringBuffer</h3><h4 id="1-什么是StringBuffer"><a href="#1-什么是StringBuffer" class="headerlink" title="1.什么是StringBuffer?"></a>1.什么是StringBuffer?</h4><ul>
<li>线程安全</li>
<li>可变的<font color='#d15252'>字符序列</font><ul>
<li>任意的改变长度</li>
<li>任意改变内容</li>
</ul>
</li>
</ul>
<h4 id="2-StringBuffer的内容"><a href="#2-StringBuffer的内容" class="headerlink" title="2.StringBuffer的内容"></a>2.StringBuffer的内容</h4><ul>
<li><p>包</p>
<ul>
<li><p>查看所在包</p>
<ul>
<li>java.lang.StringBuffer <ul>
<li>在lang包下，不需要导包就可以使用</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>修饰符：final 不能被无法继承</p>
</li>
<li><p>构造方法</p>
</li>
<li><p>成员方法</p>
</li>
</ul>
<hr>
<h4 id="3-StringBuffer中的构造方法"><a href="#3-StringBuffer中的构造方法" class="headerlink" title="3.StringBuffer中的构造方法"></a>3.StringBuffer中的构造方法</h4><h5 id="Ⅰ-无参构造"><a href="#Ⅰ-无参构造" class="headerlink" title="Ⅰ.无参构造"></a>Ⅰ.无参构造</h5><ul>
<li><p>StringBuffer()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuffer</span> <span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>构造一个没有字符的字符串缓冲区，<font color='#d15252'>初始容量为16个字符。 </font></li>
<li>超出长度，自动扩容</li>
</ul>
</li>
</ul>
<h5 id="Ⅱ-带参一：StringBuffer-int-capacity"><a href="#Ⅱ-带参一：StringBuffer-int-capacity" class="headerlink" title="Ⅱ. 带参一：StringBuffer(int capacity)"></a>Ⅱ. 带参一：StringBuffer(int capacity)</h5><ul>
<li><p>```java<br>public StringBuffer(int capacity)</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - 构造一个没有字符的字符串缓冲区和&lt;font color=<span class="string">&#x27;#d15252&#x27;</span>&gt;指定的初始容量&lt;/font&gt;</span><br><span class="line">  - 自己给出长度，系统给出默认值</span><br><span class="line"></span><br><span class="line">##### Ⅲ. 带参三：StringBuffer (String str)</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  StringBuffer (String str)</span><br></pre></td></tr></table></figure>

<ul>
<li>构造一个初始化为指定字符串内容的字符串缓冲区。</li>
<li>手动给出默认值，系统给出长度</li>
</ul>
</li>
</ul>
<hr>
<h4 id="4-StringBuffer中的成员方法"><a href="#4-StringBuffer中的成员方法" class="headerlink" title="4.StringBuffer中的成员方法"></a>4.StringBuffer中的成员方法</h4><h5 id="Ⅰ-append"><a href="#Ⅰ-append" class="headerlink" title="Ⅰ.append()"></a>Ⅰ.append()</h5><ul>
<li><p>```java<br>public StringBuffer append (数据类型 变量名)</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  ![image-<span class="number">20210802205642980</span>](https:<span class="regexp">//i</span>.loli.net<span class="regexp">/2021/</span><span class="number">08</span><span class="regexp">/02/</span>aKrjvFO58PQpeV1.png)</span><br><span class="line"></span><br><span class="line">  - 将xxx类型的参数的字符串表示**&lt;font color=<span class="string">&#x27;#d15252&#x27;</span>&gt;追加&lt;/font&gt;**到序列</span><br><span class="line">  - 插入使用insert方法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##### Ⅱ.capacity()</span></span><br><span class="line"></span><br><span class="line">- 返回当前容量（类似于返回数组长度）</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  public int capacity ()</span><br></pre></td></tr></table></figure>

<ul>
<li>容量是新插入字符可用的存储量，超过此值将进行分配。</li>
</ul>
</li>
</ul>
<h5 id="Ⅲ-查找序列"><a href="#Ⅲ-查找序列" class="headerlink" title="Ⅲ.查找序列"></a>Ⅲ.查找序列</h5><p><img src="https://i.loli.net/2021/08/02/U3b4IAxLDEKsNPd.png" alt="image-20210802205941815"></p>
<h5 id="Ⅳ-删除序列"><a href="#Ⅳ-删除序列" class="headerlink" title="Ⅳ.删除序列"></a>Ⅳ.删除序列</h5><p><img src="https://i.loli.net/2021/08/02/52pfHShT4nIgZyW.png" alt="image-20210802210033980"></p>
<h5 id="Ⅴ-插入数据到序列"><a href="#Ⅴ-插入数据到序列" class="headerlink" title="Ⅴ.插入数据到序列"></a>Ⅴ.插入数据到序列</h5><p><img src="https://i.loli.net/2021/08/02/65WPFmKTILZ7oXE.png" alt="image-20210802210221577"></p>
<ul>
<li>offset - 偏移量</li>
</ul>
<h5 id="Ⅵ-其他方法"><a href="#Ⅵ-其他方法" class="headerlink" title="Ⅵ.其他方法"></a>Ⅵ.其他方法</h5><ul>
<li>charAt方法同样可以使用，返回指定索引的char值</li>
<li>indexOf方法同样可以使用，查找指定字符串第一次出现的索引</li>
<li>length()返回长度</li>
<li>toString()返回此顺序中的数据的字符串</li>
<li>subString(start , end)  返回一个新的序列，当前的子序列</li>
</ul>
<h3 id="二、StringBuilder"><a href="#二、StringBuilder" class="headerlink" title="二、StringBuilder"></a>二、StringBuilder</h3><h4 id="1-步骤"><a href="#1-步骤" class="headerlink" title="1.步骤"></a>1.步骤</h4><ul>
<li><p>第一步：打开API，索引搜索StringBuilder类</p>
</li>
<li><p>第二步：查看该类所在的包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.StringBuilder </span><br></pre></td></tr></table></figure>

<ul>
<li>lang包下不需要导包，直接使用</li>
</ul>
</li>
<li><p>第三步：查看概述部分</p>
<ul>
<li>一个<code>StringBuilder</code>的主要操作是<code>append</code>和<code>insert</code>方法，它们是重载的，以便接受任何类型的数据。</li>
<li><code>append</code>方法总是在构建器的末尾添加这些字符;  <code>insert</code>方法将字符添加到指定点。 </li>
<li><code>StringBuilder</code>实例不能安全使用多线程。 如果需要同步，那么建议使用[<code>StringBuffer</code>]</li>
<li>修饰符：final<ul>
<li>不能被继承</li>
</ul>
</li>
</ul>
</li>
<li><p>第四步：查看构造方法</p>
</li>
<li><p>第五步：查看成员方法（功能）</p>
</li>
</ul>
<h4 id="2-构造方法"><a href="#2-构造方法" class="headerlink" title="2.构造方法"></a>2.构造方法</h4><ul>
<li><font color='#d15252'>与StringBuffer基本相同</font></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuilder​() 构造一个没有字符的字符串构建器，初始容量为<span class="number">16</span>个字符。  </span><br><span class="line">StringBuilder​(<span class="keyword">int</span> capacity) 构造一个没有字符的字符串构建器，以及由 capacity参数指定的初始容量。  </span><br><span class="line">StringBuilder​(CharSequence seq) 构造一个字符串构建器，其中包含与指定的 CharSequence相同的字符。  </span><br><span class="line">StringBuilder​(String str) 构造一个初始化为指定字符串内容的字符串构建器。  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-成员方法"><a href="#3-成员方法" class="headerlink" title="3.成员方法"></a>3.成员方法</h4><ul>
<li><font color='#d15252'>与StringBuffer基本相同</font></li>
<li>append（）追加字符串到序列</li>
<li>insert（int offset , 数据类型 变量名）插入字符串到序列中</li>
<li>capacity() 返回容量值</li>
<li>其他一些方法也可以使用，具体看API中解释</li>
</ul>
<h3 id="三、Date"><a href="#三、Date" class="headerlink" title="三、Date"></a>三、Date</h3><h4 id="1-步骤-1"><a href="#1-步骤-1" class="headerlink" title="1.步骤"></a>1.步骤</h4><ul>
<li><p>查看API，索引查找Date类</p>
</li>
<li><p>查看包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.Object </span><br><span class="line">java.util.Date </span><br></pre></td></tr></table></figure>

<ul>
<li>在Java.util包下</li>
</ul>
</li>
<li><p>查看修饰符</p>
<ul>
<li>public 公共，可以直接使用</li>
</ul>
</li>
<li><p>查看方法概述</p>
<ul>
<li><code>Date</code>类代表了一个特定的时间，以毫秒的精度。 </li>
</ul>
</li>
<li><p>查看构造方法</p>
</li>
<li><p>查看成员方法</p>
</li>
</ul>
<h4 id="2-构造方法-1"><a href="#2-构造方法-1" class="headerlink" title="2.构造方法"></a>2.构造方法</h4><h5 id="Ⅰ-无参构造Date"><a href="#Ⅰ-无参构造Date" class="headerlink" title="Ⅰ.无参构造Date()"></a>Ⅰ.无参构造Date()</h5><ul>
<li><p>分配一个 <code>Date</code>对象并对其进行初始化，以便它表示分配的时间，以最接近的毫秒为单位。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Date</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/08/03/rmwf8CReIvl1sUD.png" alt="image-20210803102947756"></p>
<ul>
<li>获取当前时间</li>
</ul>
</li>
</ul>
<h5 id="2-带参构造Date-long-date"><a href="#2-带参构造Date-long-date" class="headerlink" title="2.带参构造Date(long date)"></a>2.带参构造Date(long date)</h5><ul>
<li><p>分配一个  <code>Date</code>对象，并将其初始化为表示从标准基准时间（称为“时代”）即1970年1月1日00:00:00 GMT起的指定毫秒数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Date</span><span class="params">(<span class="keyword">long</span> date)</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>获取指定时间的日期</li>
</ul>
</li>
</ul>
<h4 id="3-成员方法-1"><a href="#3-成员方法-1" class="headerlink" title="3.成员方法"></a>3.成员方法</h4><h5 id="Ⅰ-after-Date-when"><a href="#Ⅰ-after-Date-when" class="headerlink" title="Ⅰ.after(Date when)"></a>Ⅰ.after(Date when)</h5><ul>
<li><p>测试此日期是否在指定日期之后</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">after</span><span class="params">(Date when)</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="Ⅱ-before-Date-when"><a href="#Ⅱ-before-Date-when" class="headerlink" title="Ⅱ.before(Date when)"></a>Ⅱ.before(Date when)</h5><ul>
<li><p>测试此日期是否在指定日期之前。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">before</span><span class="params">(Date when)</span></span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/08/03/jzO16BSWeZXsJGT.png" alt="image-20210803104241816"></p>
</li>
</ul>
<h5 id="Ⅲ-compareTo"><a href="#Ⅲ-compareTo" class="headerlink" title="Ⅲ.compareTo"></a>Ⅲ.compareTo</h5><ul>
<li><p>比较两个日期进行订购。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Date anotherDate)</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>如果参数Date等于此Date，值为0</p>
</li>
<li><p>如果此日期在Date参数之前，该值小于0 </p>
</li>
</ul>
<h5 id="Ⅳ-equals-Object-obj"><a href="#Ⅳ-equals-Object-obj" class="headerlink" title="Ⅳ.equals(Object obj)"></a>Ⅳ.equals(Object obj)</h5><ul>
<li><p>比较两个日期来平等。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>仅当long值相同时，两个Date对象相等</p>
</li>
</ul>
<h3 id="四、DateFormat"><a href="#四、DateFormat" class="headerlink" title="四、DateFormat"></a>四、DateFormat</h3><h4 id="1-步骤-2"><a href="#1-步骤-2" class="headerlink" title="1.步骤"></a>1.步骤</h4><ul>
<li><p>看包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.Object </span><br><span class="line">java.text.Format </span><br><span class="line">java.text.DateFormat </span><br></pre></td></tr></table></figure>

<ul>
<li>需要导包</li>
</ul>
</li>
<li><p>修饰符</p>
<ul>
<li>public</li>
<li>abstract抽象类<ul>
<li>不能直接实例化，要通过子类实例化</li>
</ul>
</li>
</ul>
</li>
<li><p>方法概述</p>
<ul>
<li><code>DateFormat</code>是一个用于日期/时间格式化子类的抽象类，它以语言无关的方式格式化和分析日期或时间。</li>
<li>就是时间和格式的转换</li>
<li>真正实际上的时间是表示的毫秒值，Long类型</li>
</ul>
</li>
<li><p>直接子类SimpleDateFormat，可以拿来使用</p>
</li>
</ul>
<h4 id="2-构造方法-2"><a href="#2-构造方法-2" class="headerlink" title="2.构造方法"></a>2.构造方法</h4><h5 id="Ⅰ-无参构造-1"><a href="#Ⅰ-无参构造-1" class="headerlink" title="Ⅰ.无参构造"></a>Ⅰ.无参构造</h5><ul>
<li><p>创建一个新的日期格式。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">DateFormat</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="3-成员方法-2"><a href="#3-成员方法-2" class="headerlink" title="3.成员方法"></a>3.成员方法</h4><p><img src="https://i.loli.net/2021/08/03/QTutOcwN198DW7L.png" alt="image-20210803114002719"></p>
<p><strong>如果变量名打印出来是一个地址值，说明没有重写toString方法</strong></p>
<h4 id="4-子类SimpleDateFormat自定义时间格式"><a href="#4-子类SimpleDateFormat自定义时间格式" class="headerlink" title="4.子类SimpleDateFormat自定义时间格式"></a>4.<font color='#d15252'>子类SimpleDateFormat自定义时间格式</font></h4><p><img src="https://i.loli.net/2021/08/03/WgCZvmBzLiVupOq.png" alt="image-20210803142244201"></p>
<h5 id="Ⅰ-无参构造创建对象"><a href="#Ⅰ-无参构造创建对象" class="headerlink" title="Ⅰ.无参构造创建对象"></a>Ⅰ.无参构造创建对象</h5><ul>
<li><p>构造一个 <code>SimpleDateFormat</code>使用默认模式和日期格式符号为默认的 [<code>FORMAT</code>]区域设置。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> SimpleDateFormat​()</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="Ⅱ-有参构造创建对象"><a href="#Ⅱ-有参构造创建对象" class="headerlink" title="Ⅱ.有参构造创建对象"></a>Ⅱ.有参构造创建对象</h5><ul>
<li><p>使用给定的模式和日期格式符号构造一个 <code>SimpleDateFormat</code> 。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">//通过子类调用    //如果带参则制定规则</span></span><br><span class="line">SimpleDateFormat s = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy年M月d日HH:mm:ss&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>创建一个时间规则</p>
</li>
</ul>
<h5 id="Ⅲ-成员方法"><a href="#Ⅲ-成员方法" class="headerlink" title="Ⅲ.成员方法"></a>Ⅲ.成员方法</h5><ul>
<li><h5 id="format方法"><a href="#format方法" class="headerlink" title="format方法"></a>format方法</h5><ul>
<li>将给定的 <code>Date</code>为日期/时间字符串，并将结果追加到给定的  <code>StringBuffer</code> </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> StringBuffer <span class="title">format</span><span class="params">(Date date,</span></span></span><br><span class="line"><span class="params"><span class="function">                           StringBuffer toAppendTo,</span></span></span><br><span class="line"><span class="params"><span class="function">                           FieldPosition pos)</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h3 id="五、Calendar"><a href="#五、Calendar" class="headerlink" title="五、Calendar"></a>五、Calendar</h3><h4 id="1-步骤-3"><a href="#1-步骤-3" class="headerlink" title="1.步骤"></a>1.步骤</h4><ul>
<li><p>看包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.Object </span><br><span class="line">java.util.Calendar </span><br></pre></td></tr></table></figure>

<ul>
<li>需要导包后才能使用</li>
</ul>
</li>
<li><p>修饰符</p>
<ul>
<li>public </li>
<li>abstract<ul>
<li>抽象类，不能直接实例化，要用子类</li>
</ul>
</li>
</ul>
</li>
<li><p>方法概述</p>
</li>
<li><p>构造方法</p>
</li>
<li><p>成员方法</p>
</li>
</ul>
<h4 id="2-构造方法-3"><a href="#2-构造方法-3" class="headerlink" title="2.构造方法"></a>2.构造方法</h4><h5 id="Ⅰ-无参构造Calendar"><a href="#Ⅰ-无参构造Calendar" class="headerlink" title="Ⅰ.无参构造Calendar()"></a>Ⅰ.无参构造Calendar()</h5><ul>
<li><p>构造具有默认时区和默认 [<code>FORMAT</code>]语言环境的日历。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">Calendar</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="Ⅱ-带参构造"><a href="#Ⅱ-带参构造" class="headerlink" title="Ⅱ.带参构造"></a>Ⅱ.带参构造</h5><ul>
<li><p>构造具有指定时区和区域设置的日历。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">Calendar</span><span class="params">(TimeZone zone,</span></span></span><br><span class="line"><span class="params"><span class="function">                   Locale aLocale)</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>zone - 使用的时区</li>
<li>aLocale - 周数据的区域设置</li>
</ul>
</li>
</ul>
<h4 id="4-已知直接子类GregorianCalendar"><a href="#4-已知直接子类GregorianCalendar" class="headerlink" title="4.已知直接子类GregorianCalendar"></a>4.已知直接子类GregorianCalendar</h4><h3 id="六、补充知识点"><a href="#六、补充知识点" class="headerlink" title="六、补充知识点"></a>六、补充知识点</h3><ul>
<li>API中<font color='#d15252'>Fields</font>的区域都是常量</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>API</tag>
        <tag>StringBuffer</tag>
        <tag>StringBuilder</tag>
        <tag>Date</tag>
        <tag>DateFormat</tag>
        <tag>Calender</tag>
      </tags>
  </entry>
  <entry>
    <title>API的使用之Objece\String</title>
    <url>/2021/08/25/API%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8BObjece-String/</url>
    <content><![CDATA[<h3 id="一、Java的API"><a href="#一、Java的API" class="headerlink" title="一、Java的API"></a>一、Java的API</h3><h4 id="1-API的概念"><a href="#1-API的概念" class="headerlink" title="1.API的概念"></a>1.API的概念</h4><ul>
<li>之前的练习题：面向对象理论知识的总结</li>
<li>JavaApi是对面向对象知识实践的一个总结</li>
</ul>
<ul>
<li><strong>API：应用程序接口 —&gt; src下的内容</strong><ul>
<li>A：Application:应用</li>
<li>P：Programing:程序</li>
<li>I：interface:接口</li>
</ul>
</li>
<li>是使用Java的一份说明书</li>
</ul>
<h4 id="2-API的优势"><a href="#2-API的优势" class="headerlink" title="2.API的优势"></a>2.API的优势</h4><ul>
<li>将Java提供好的工具类，做了调整<ul>
<li>详细描述</li>
<li>构造方法</li>
<li>成员方法</li>
</ul>
</li>
<li>众多的Java工具类，学习哪个都可以，但有一个必须要学<ul>
<li>**<font color='#d15252'>Object</font>**：Java中所有的类的父类<ul>
<li>不管是自定义类还是Java自带的工具类，所有的类最顶层的父类，都是Object类</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="二、Object类"><a href="#二、Object类" class="headerlink" title="二、Object类"></a>二、Object类</h3><h4 id="1-学习Object类的步骤"><a href="#1-学习Object类的步骤" class="headerlink" title="1.学习Object类的步骤"></a>1.学习Object类的步骤</h4><ul>
<li><p>第一步：打开API的索引，直接搜索想要的类(注意大小写)</p>
</li>
<li><p>第二步：查看该类所在的包（<font color='#d15252'>java.lang</font>）</p>
<ul>
<li>所有Java.lang包下的工具类，直接使用，<font color='orange'>不需要导包</font></li>
</ul>
</li>
<li><p>第三步：查看该类的概述部分</p>
<ul>
<li>查看该类的修饰符</li>
<li>查看具体功能描述</li>
</ul>
</li>
<li><p>第四步：<font color='#d15252'><strong>需要看构造方法</strong></font></p>
<ul>
<li>查看object就是为了使用，要使用就需要创建对象new，就需要调用构造方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object o = <span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure></li>
<li><p>第五步：<font color='#d15252'>查看该类的方法</font></p>
<ul>
<li>使用该类，真正意义上是使用类中提供的方法</li>
</ul>
</li>
</ul>
<h4 id="2-Object类中的方法"><a href="#2-Object类中的方法" class="headerlink" title="2.Object类中的方法"></a>2.Object类中的方法</h4><ul>
<li>重点：修饰符，返回值，参数</li>
</ul>
<h5 id="Ⅰ-clone-方法"><a href="#Ⅰ-clone-方法" class="headerlink" title="Ⅰ. clone()方法"></a>Ⅰ. clone()方法</h5><ul>
<li>创建并返回此对象的副本。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>clone()方法默认由protected修饰，所以子类不能直接访问<ul>
<li>需要重写该方法</li>
</ul>
</li>
</ul>
<h5 id="Ⅱ-equals-方法"><a href="#Ⅱ-equals-方法" class="headerlink" title="Ⅱ. equals()方法"></a>Ⅱ. equals()方法</h5><ul>
<li>指示一些其他对象是否等于此.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span> <span class="params">(Object obj)</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> Object o = <span class="keyword">new</span> Object();</span><br><span class="line"> Object o2 = <span class="keyword">new</span> Object();</span><br><span class="line"> <span class="keyword">boolean</span> equals = o.equals(<span class="number">02</span>);</span><br><span class="line"> System.out.println(equals);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//返回结果false</span></span><br></pre></td></tr></table></figure></li>
<li><p>默认情况下，比较的是引用类型的地址值，意义不大，所以通常要重写</p>
</li>
</ul>
<h5 id="Ⅲ-toString-方法"><a href="#Ⅲ-toString-方法" class="headerlink" title="Ⅲ. toString()方法"></a>Ⅲ. toString()方法</h5><ul>
<li>返回对象的字符串表示形式。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>当我们在使用输出语句，输出对象名的时候，底层走的就是toString方法</li>
</ul>
<h3 id="三、String类"><a href="#三、String类" class="headerlink" title="三、String类"></a>三、String类</h3><h4 id="1-学习步骤"><a href="#1-学习步骤" class="headerlink" title="1.学习步骤"></a>1.学习步骤</h4><ul>
<li><p>第一步：打开API索引，搜索String类</p>
</li>
<li><p>第二步：查看所在的包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.Object </span><br><span class="line">java.lang.String </span><br></pre></td></tr></table></figure>

<ul>
<li>lang包直接使用，不需要导包</li>
</ul>
</li>
<li><p>第三步：查看该类的概述部分</p>
<ul>
<li><p>String用来final修饰，不能被继承</p>
</li>
<li><p>继承了Object，实现了三个接口</p>
</li>
<li><p>之前我们使用String类型时，并没有使用new关键字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = <span class="string">&quot;abc&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>实际上，底层帮我们做了一系列操作</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> data[] = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">String str = <span class="keyword">new</span> String(data);	<span class="comment">//调用了String的有参构造</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>第四步：需要看构造方法</p>
<ul>
<li>```java<br>String()<br>String(byte[] bytes)<br>String(char[] value, int offset, int count)<br>String(String original)<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 第五步：方法</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  charAt​(<span class="built_in">int</span> index)</span><br><span class="line">  compareTo​(<span class="keyword">String</span> anotherString)</span><br><span class="line">  <span class="built_in">concat</span>​(<span class="keyword">String</span> <span class="built_in">str</span>)</span><br><span class="line">  endsWith​(<span class="keyword">String</span> suffix)</span><br><span class="line">  equals​(<span class="keyword">Object</span> anObject)</span><br><span class="line">  getBytes​()    </span><br><span class="line">  indexOf​(<span class="keyword">String</span> <span class="built_in">str</span>)</span><br><span class="line">  length​()    </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<hr>
<h4 id="2-String类中的构造方法"><a href="#2-String类中的构造方法" class="headerlink" title="2.String类中的构造方法"></a>2.String类中的构造方法</h4><h5 id="Ⅰ-String"><a href="#Ⅰ-String" class="headerlink" title="Ⅰ. String()"></a>Ⅰ. String()</h5><ul>
<li>初始化新创建的 <code>String</code>对象，以使其表示空字符序列。 </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span> <span class="params">(String original)</span></span></span><br></pre></td></tr></table></figure>

<h5 id="Ⅱ-String-byte-bytes"><a href="#Ⅱ-String-byte-bytes" class="headerlink" title="Ⅱ. String(byte[] bytes)"></a>Ⅱ. String(byte[] bytes)</h5><ul>
<li>通过使用平台的默认字符集解码指定的字节数组来构造新的 <code>String</code> </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span> <span class="params">(<span class="keyword">byte</span>[] bytes)</span></span></span><br></pre></td></tr></table></figure>

<h5 id="Ⅲ-String-char-value-int-offset-int-count"><a href="#Ⅲ-String-char-value-int-offset-int-count" class="headerlink" title="Ⅲ. String(char[] value, int offset, int count)"></a>Ⅲ. String(char[] value, int offset, int count)</h5><ul>
<li>分配一个新的 <code>String</code> ，其中包含字符数组参数的子阵列中的字符。 </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span> <span class="params">(<span class="keyword">int</span>[] codePoints,</span></span></span><br><span class="line"><span class="params"><span class="function">              <span class="keyword">int</span> offset,</span></span></span><br><span class="line"><span class="params"><span class="function">              <span class="keyword">int</span> count)</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>offset：初始偏移量<ul>
<li>从数组哪个位置开始取</li>
</ul>
</li>
<li>count：长度、个数<ul>
<li>取多少个数据</li>
</ul>
</li>
</ul>
<h5 id="Ⅳ-String-String-original"><a href="#Ⅳ-String-String-original" class="headerlink" title="Ⅳ. String(String original)"></a>Ⅳ. String(String original)</h5><ul>
<li>初始化新创建的<code>String</code>对象，使其表示与参数相同的字符序列;  换句话说，新创建的字符串是参数字符串的副本。 </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span> <span class="params">(String original)</span></span></span><br></pre></td></tr></table></figure>



<hr>
<h4 id="3-String类中的成员方法"><a href="#3-String类中的成员方法" class="headerlink" title="3.String类中的成员方法"></a>3.String类中的成员方法</h4><h5 id="Ⅰ-charAt-int-index"><a href="#Ⅰ-charAt-int-index" class="headerlink" title="Ⅰ. charAt(int index)"></a>Ⅰ. charAt(int index)</h5><ul>
<li>返回指定索引处的 <code>char</code>值。<ul>
<li>返回指定索引处的<code>char</code>值。  指数范围从<code>0</code>到<code>length() - 1</code> 。  序列的第一个<code>char</code>值是索引<code>0</code> ，下一个索引为<code>1</code>  ，依此类推，就像数组索引一样。 </li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">      <span class="comment">//创建一个String类型的对象，调用方法</span></span><br><span class="line">      String s = <span class="keyword">new</span> String(<span class="string">&quot;高宇航&quot;</span>);</span><br><span class="line">      System.out.println(s.charAt(<span class="number">1</span>));</span><br><span class="line"><span class="comment">//控制台输出结果：宇</span></span><br></pre></td></tr></table></figure>

<ul>
<li>简单来说，就是取出对应索引的char数据</li>
<li>案例：键盘录入一串字符，计算大写小写数字个数<ul>
<li>“12ljlfsrAEr5875”</li>
</ul>
</li>
</ul>
<h5 id="Ⅱ-compareTo-String-anotherString"><a href="#Ⅱ-compareTo-String-anotherString" class="headerlink" title="Ⅱ. compareTo(String anotherString)"></a>Ⅱ. compareTo(String anotherString)</h5><ul>
<li>按字典顺序比较两个字符串</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span> <span class="params">(String anotherString)</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">        String s = <span class="string">&quot;高宇航&quot;</span>;</span><br><span class="line">        String s1 = <span class="string">&quot;高宇航&quot;</span>;</span><br><span class="line">        <span class="comment">//测试compareTo方法</span></span><br><span class="line">        System.out.println(s.compareTo(s1));</span><br><span class="line"><span class="comment">//程序输出0</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如果字符串相等，结果为零</li>
<li>如果字符串s长度大于s1时，返回的值是正数</li>
<li>如果字符串s长度小于s1时，返回的值是负数</li>
</ul>
<h5 id="Ⅲ-concat-String-str"><a href="#Ⅲ-concat-String-str" class="headerlink" title="Ⅲ. concat(String str)"></a>Ⅲ. concat(String str)</h5><ul>
<li>将指定的字符串连接到该字符串的末尾。 </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">concat</span> <span class="params">(String str)</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//测试String类中的concat方法</span></span><br><span class="line"><span class="comment">//将指定的字符串连接到该字符串的末尾</span></span><br><span class="line">        <span class="comment">//定义一个String对象</span></span><br><span class="line">        String s = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        String s1 = s.concat(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        <span class="comment">//返回结果HelloWorld</span></span><br></pre></td></tr></table></figure>

<ul>
<li>即字符串的拼接，在先有字符串后面添加</li>
</ul>
<h5 id="Ⅳ-endsWith-String-suffix"><a href="#Ⅳ-endsWith-String-suffix" class="headerlink" title="Ⅳ. endsWith(String suffix)"></a>Ⅳ. endsWith(String suffix)</h5><ul>
<li>测试此字符串是否以指定的后缀结尾。 </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">endsWith</span><span class="params">(String suffix)</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>suffix：后缀</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试String类中的endsWith(String suffix)方法</span></span><br><span class="line"><span class="comment">//创建一个字符串</span></span><br><span class="line">String s = <span class="string">&quot;abcdggg&quot;</span>;</span><br><span class="line"><span class="keyword">boolean</span> g = s.endsWith(<span class="string">&quot;g&quot;</span>);</span><br><span class="line">System.out.println(g);</span><br><span class="line"><span class="comment">//返回值true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>返回一个布尔类型的值，true或false</li>
</ul>
<h5 id="Ⅴ-equals-Object-anObject"><a href="#Ⅴ-equals-Object-anObject" class="headerlink" title="Ⅴ. equals(Object anObject)"></a>Ⅴ. equals(Object anObject)</h5><ul>
<li>将此字符串与指定对象进行比较。 </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试String类中的equals方法</span></span><br><span class="line">String s = <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">String s1 = <span class="string">&quot;abcde&quot;</span>;</span><br><span class="line"><span class="keyword">boolean</span> equals = s.equals(s1);</span><br><span class="line">System.out.println(equals);</span><br><span class="line"><span class="comment">//返回flase</span></span><br></pre></td></tr></table></figure>

<ul>
<li>仅当参数不是null并且字符序列相同时，返回true</li>
<li>否则返回false</li>
</ul>
<h5 id="Ⅵ-getBytes"><a href="#Ⅵ-getBytes" class="headerlink" title="Ⅵ.getBytes()"></a>Ⅵ.getBytes()</h5><ul>
<li>使用平台的默认字符集(ASCII)将该 <code>String</code>编码为一系列字节，将结果存储到新的字节数组中。 </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] getBytes()</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo11</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//测试String类的getBytes()</span></span><br><span class="line">        <span class="comment">//创建一个String类型对象</span></span><br><span class="line">        String s = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">        System.out.println(s.getBytes());   <span class="comment">//[B@10f87f48</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = s.getBytes();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;bytes.length;i++)&#123;</span><br><span class="line">            System.out.println(bytes[i]);</span><br><span class="line">            <span class="comment">//97 98 99 100 101 102</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>将该<code>String</code>编码为一系列字节，将结果存储到新的字节数组中。 </li>
</ul>
<h5 id="Ⅶ-indexOf-String-str"><a href="#Ⅶ-indexOf-String-str" class="headerlink" title="Ⅶ.indexOf(String str)"></a>Ⅶ.indexOf(String str)</h5><ul>
<li>返回指定子字符串第一次出现的字符串内的索引。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span> <span class="params">(String str)</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        测试main方法中的indexOf(String str)方法</span></span><br><span class="line">        <span class="comment">//创建一个String类型对象</span></span><br><span class="line">        String s = <span class="string">&quot;Hello,java&quot;</span>;</span><br><span class="line">        <span class="comment">//使用indexOf方法查找指定字符串第一次出现的索引</span></span><br><span class="line">        System.out.println( s.indexOf(<span class="string">&quot;java&quot;</span>));</span><br><span class="line">        <span class="comment">//得出结果6,在第六个索引出现java</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果没有要查找的值，则返回<code>-1</code> 。</li>
<li>str/ch 要搜索的字符串</li>
</ul>
<h5 id="Ⅷ-length"><a href="#Ⅷ-length" class="headerlink" title="Ⅷ.length()"></a>Ⅷ.length()</h5><ul>
<li>返回此字符串的长度。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//测试字符串长度</span></span><br><span class="line">    String s = <span class="string">&quot;12345678&quot;</span>;</span><br><span class="line">    System.out.println(s.length());</span><br><span class="line">    <span class="comment">//返回结果8</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>返回此字符串的长度。 长度等于字符串中的数字<a href="Character.html#unicode">Unicode code units</a> 。 </li>
</ul>
<h4 id="4-作业"><a href="#4-作业" class="headerlink" title="4.作业"></a>4.作业</h4><h5 id="Ⅰ-将字符串中，第一个字母转换成大写，其他的转换成小写。并输出。"><a href="#Ⅰ-将字符串中，第一个字母转换成大写，其他的转换成小写。并输出。" class="headerlink" title="Ⅰ. 将字符串中，第一个字母转换成大写，其他的转换成小写。并输出。"></a>Ⅰ. 将字符串中，第一个字母转换成大写，其他的转换成小写。并输出。</h5><ul>
<li><p>aaslkASGGR</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//作业练习一：将字符串中，第一个字母转换成大写，其他的转换成小写。并输出。</span></span><br><span class="line">    <span class="comment">//aaslkASGGR</span></span><br><span class="line">    <span class="comment">//将所有String字符转为小写 public String toLowerCase​()</span></span><br><span class="line">    <span class="comment">//转换大写toUpperCase()</span></span><br><span class="line">    String s = <span class="string">&quot;aaslkASGGR&quot;</span>;</span><br><span class="line">    <span class="comment">//使用substring提取第一个字符，并转为大写</span></span><br><span class="line">    String substring = s.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase();</span><br><span class="line">    <span class="comment">//提取剩下的字符，并转为小写</span></span><br><span class="line">    String s1 = s.substring(<span class="number">1</span>).toLowerCase();</span><br><span class="line">    <span class="comment">//将两个字符串拼接</span></span><br><span class="line">    System.out.println(substring+s1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="Ⅱ-”afjpiwqjava9javajavajsjfkaksjafjafealjava”-计算Java个数"><a href="#Ⅱ-”afjpiwqjava9javajavajsjfkaksjafjafealjava”-计算Java个数" class="headerlink" title="Ⅱ.”afjpiwqjava9javajavajsjfkaksjafjafealjava”,计算Java个数"></a>Ⅱ.”afjpiwqjava9javajavajsjfkaksjafjafealjava”,计算Java个数</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//&quot;afjpiwqjava9javajavajsjfkaksjafjafealjava&quot;,计算Java的个数</span></span><br><span class="line">    <span class="comment">//定义一个java的字符串</span></span><br><span class="line">    String str = <span class="string">&quot;afjpiwqjava9javajavajsjfkaksjafjafealjava&quot;</span>;</span><br><span class="line">    String s = <span class="string">&quot;java&quot;</span>;</span><br><span class="line">    <span class="comment">//indexOf​(int ch) 返回指定字符第一次出现的字符串内的索引。</span></span><br><span class="line">    <span class="comment">//str.indexOf(s);得出第一个java在第7个索引位置</span></span><br><span class="line">    <span class="comment">//第二次查找需要在第10个位置继续往下查找</span></span><br><span class="line">    <span class="comment">//定义一个变量保存索引</span></span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> count =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((index = str.indexOf(s))!=-<span class="number">1</span>)&#123;</span><br><span class="line">        count++;</span><br><span class="line">         str = str.substring(index + s.length());</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="四、StringBuffer类"><a href="#四、StringBuffer类" class="headerlink" title="四、StringBuffer类"></a>四、StringBuffer类</h3><h4 id="1-步骤"><a href="#1-步骤" class="headerlink" title="1.步骤"></a>1.步骤</h4><ul>
<li><p>搜索打开StringBuffer类的API</p>
</li>
<li><p>查看所在包</p>
<ul>
<li>java.lang.StringBuffer <ul>
<li>在lang包下，不需要导包就可以使用</li>
</ul>
</li>
</ul>
</li>
<li><p>查看概述</p>
<ul>
<li>修饰符：final 不能被无法继承</li>
<li>这个类已经被一个等同的类补充了，它被设计为使用一个线程， StringBuilder。<ul>
<li>通常应该使用<code>StringBuilder</code>类，因为它支持所有相同的操作，但它更快，因为它不执行同步。 </li>
</ul>
</li>
</ul>
</li>
<li><p>查看构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuffer​() 构造一个没有字符的字符串缓冲区，初始容量为<span class="number">16</span>个字符。  </span><br><span class="line">StringBuffer​(<span class="keyword">int</span> capacity) 构造一个没有字符的字符串缓冲区和指定的初始容量。  </span><br><span class="line">StringBuffer​(CharSequence seq) 构造一个字符串缓冲区，其中包含与指定的 CharSequence相同的字符。  </span><br><span class="line">StringBuffer​(String str) 构造一个初始化为指定字符串内容的字符串缓冲区。  </span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>使用成员方法</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">append</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/08/02/MKIzgrnd7OhtZHU.png" alt="image-20210802204833609"></p>
</li>
</ul>
<h4 id="2-构造方法"><a href="#2-构造方法" class="headerlink" title="2.构造方法"></a>2.构造方法</h4><h5 id="Ⅰ-无参构造"><a href="#Ⅰ-无参构造" class="headerlink" title="Ⅰ.无参构造"></a>Ⅰ.无参构造</h5><ul>
<li><p>StringBuffer()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuffer</span> <span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>构造一个没有字符的字符串缓冲区，<font color='#d15252'>初始容量为16个字符。 </font></li>
</ul>
</li>
</ul>
<h5 id="Ⅱ-带参一：StringBuffer-int-capacity"><a href="#Ⅱ-带参一：StringBuffer-int-capacity" class="headerlink" title="Ⅱ. 带参一：StringBuffer(int capacity)"></a>Ⅱ. 带参一：StringBuffer(int capacity)</h5><ul>
<li>```java<br>public StringBuffer(int capacity)<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - 构造一个没有字符的字符串缓冲区和&lt;font color=<span class="string">&#x27;#d15252&#x27;</span>&gt;指定的初始容量&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">##### Ⅲ.带参二、三</span><br><span class="line"></span><br><span class="line">![image<span class="number">-20210802205551809</span>](https:<span class="comment">//i.loli.net/2021/08/02/rTHljxByQSK1o8X.png)</span></span><br><span class="line"></span><br><span class="line">#### <span class="number">3.</span>成员方法</span><br><span class="line"></span><br><span class="line">##### Ⅰ.append()</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">public StringBuffer append (数据类型 变量名)</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://i.loli.net/2021/08/02/aKrjvFO58PQpeV1.png" alt="image-20210802205642980"></p>
<ul>
<li>将xxx类型的参数的字符串表示**<font color='#d15252'>追加</font>**到序列</li>
<li>插入使用insert方法</li>
</ul>
<h5 id="Ⅱ-capacity"><a href="#Ⅱ-capacity" class="headerlink" title="Ⅱ.capacity()"></a>Ⅱ.capacity()</h5><ul>
<li><p>返回当前容量（类似于返回数组长度）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">capacity</span> <span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>容量是新插入字符可用的存储量，超过此值将进行分配。</li>
</ul>
</li>
</ul>
<h5 id="Ⅲ-查找序列"><a href="#Ⅲ-查找序列" class="headerlink" title="Ⅲ.查找序列"></a>Ⅲ.查找序列</h5><p><img src="https://i.loli.net/2021/08/02/U3b4IAxLDEKsNPd.png" alt="image-20210802205941815"></p>
<h5 id="Ⅳ-删除序列"><a href="#Ⅳ-删除序列" class="headerlink" title="Ⅳ.删除序列"></a>Ⅳ.删除序列</h5><p><img src="https://i.loli.net/2021/08/02/52pfHShT4nIgZyW.png" alt="image-20210802210033980"></p>
<h5 id="Ⅴ-插入数据到序列"><a href="#Ⅴ-插入数据到序列" class="headerlink" title="Ⅴ.插入数据到序列"></a>Ⅴ.插入数据到序列</h5><p><img src="https://i.loli.net/2021/08/02/65WPFmKTILZ7oXE.png" alt="image-20210802210221577"></p>
<ul>
<li>offset - 偏移量</li>
</ul>
<h5 id="Ⅵ-其他方法"><a href="#Ⅵ-其他方法" class="headerlink" title="Ⅵ.其他方法"></a>Ⅵ.其他方法</h5><ul>
<li>charAt方法同样可以使用，返回指定索引的char值</li>
<li>indexOf方法同样可以使用，查找指定字符串第一次出现的索引</li>
<li>length()返回长度</li>
<li>toString()返回此顺序中的数据的字符串</li>
<li>subString(start , end)  返回一个新的序列，当前的子序列</li>
</ul>
<h3 id="五、StringBuilder类"><a href="#五、StringBuilder类" class="headerlink" title="五、StringBuilder类"></a>五、StringBuilder类</h3><h4 id="1-步骤-1"><a href="#1-步骤-1" class="headerlink" title="1.步骤"></a>1.步骤</h4><ul>
<li><p>第一步：打开API，索引搜索StringBuilder类</p>
</li>
<li><p>第二步：查看该类所在的包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.StringBuilder </span><br></pre></td></tr></table></figure>

<ul>
<li>lang包下不需要导包，直接使用</li>
</ul>
</li>
<li><p>第三步：查看概述部分</p>
<ul>
<li>一个<code>StringBuilder</code>的主要操作是<code>append</code>和<code>insert</code>方法，它们是重载的，以便接受任何类型的数据。</li>
<li><code>append</code>方法总是在构建器的末尾添加这些字符;  <code>insert</code>方法将字符添加到指定点。 </li>
<li><code>StringBuilder</code>实例不能安全使用多线程。 如果需要同步，那么建议使用[<code>StringBuffer</code>]</li>
</ul>
</li>
<li><p>第四步：查看构造方法</p>
</li>
<li><p>第五步：查看成员方法（功能）</p>
</li>
</ul>
<h4 id="2-构造方法-1"><a href="#2-构造方法-1" class="headerlink" title="2.构造方法"></a>2.构造方法</h4><ul>
<li>与StringBuffer基本相同</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuilder​() 构造一个没有字符的字符串构建器，初始容量为<span class="number">16</span>个字符。  </span><br><span class="line">StringBuilder​(<span class="keyword">int</span> capacity) 构造一个没有字符的字符串构建器，以及由 capacity参数指定的初始容量。  </span><br><span class="line">StringBuilder​(CharSequence seq) 构造一个字符串构建器，其中包含与指定的 CharSequence相同的字符。  </span><br><span class="line">StringBuilder​(String str) 构造一个初始化为指定字符串内容的字符串构建器。  </span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="3-成员方法"><a href="#3-成员方法" class="headerlink" title="3.成员方法"></a>3.成员方法</h4><ul>
<li>与StringBuffer基本相同</li>
<li>append（）追加字符串到序列</li>
<li>insert（int offset , 数据类型 变量名）插入字符串到序列中</li>
<li>capacity() 返回容量值</li>
<li>其他一些方法也可以使用，具体看API中解释</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>API</tag>
        <tag>Object</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>ArrayList集合和方法练习</title>
    <url>/2021/08/25/ArrayList%E9%9B%86%E5%90%88%E5%92%8C%E6%96%B9%E6%B3%95%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h3 id="一、练习"><a href="#一、练习" class="headerlink" title="一、练习"></a>一、练习</h3><h4 id="1-编写思路"><a href="#1-编写思路" class="headerlink" title="1.编写思路"></a>1.编写思路</h4><ul>
<li>创建项目，测试环境</li>
<li>需求分析</li>
<li>先实现菜单<ul>
<li>创建菜单方法<ul>
<li>方法位置：并列</li>
<li>格式：修饰符 返回值类型 方法名（）{  }</li>
</ul>
</li>
</ul>
</li>
<li>实现菜单的选择<ul>
<li>创建判断键盘录入选择的方法</li>
<li>调用menu方法，实现每次选择时，展示菜单</li>
<li>Scanner  三个步骤，录入键盘数据</li>
<li>调用加载数据的方法，并创建一个数组名保存</li>
<li>if+else if 实现键盘录入数据的判断</li>
<li>设置死循环，实现菜单的重复选择</li>
<li>当a=5时，退出，break;</li>
</ul>
</li>
<li>实现加载数据<ul>
<li>创建加载数据方法</li>
<li>定义一个数组并初始化数据</li>
<li>return返回值arr数组，返回值类型int[]</li>
</ul>
</li>
<li>实现具体的选择项的功能（查看）<ul>
<li>当choose方法中录入键盘数据为1时</li>
<li>调用show方法，并传递参数arr</li>
</ul>
</li>
<li>实现查看功能<ul>
<li>定义方法</li>
<li>定义一个数组参数，用于接收数据</li>
<li>用for循环遍历数组</li>
<li>if判断不是0再输出</li>
</ul>
</li>
<li>实现修改功能<ul>
<li>定义方法</li>
<li>键盘录入要修改的id</li>
<li>for循环遍历数组，IF查找有没有匹配的id<ul>
<li>在方法定义中，添加参数int[] arr ，用于接收数组</li>
</ul>
</li>
<li>在choose方法中，当选择2时，调用修改方法，并且传递参数–数组</li>
</ul>
</li>
</ul>
<h4 id="2-内存图"><a href="#2-内存图" class="headerlink" title="2.内存图"></a>2.内存图</h4><img src="https://i.loli.net/2021/07/23/8KSZyjmXNIGYVeT.png" alt="image-20210723153545299" style="zoom:200%;" />



<h3 id="二、ArrayList集合"><a href="#二、ArrayList集合" class="headerlink" title="二、ArrayList集合"></a>二、<font color='#d15252'>ArrayList</font>集合</h3><ul>
<li>变量：存一个数</li>
<li>数组：多个数，但长度固定</li>
<li>集合ArrayList</li>
</ul>
<h4 id="1-ArrayList的概念"><a href="#1-ArrayList的概念" class="headerlink" title="1.ArrayList的概念"></a>1.ArrayList的概念</h4><ul>
<li>什么是ArrayList?<ul>
<li>是一个容器，<font color='#d15252'>长度不固定</font></li>
</ul>
</li>
</ul>
<h4 id="2-ArrayList的使用"><a href="#2-ArrayList的使用" class="headerlink" title="2.ArrayList的使用"></a>2.ArrayList的使用</h4><h5 id="①使用前的准备"><a href="#①使用前的准备" class="headerlink" title="①使用前的准备"></a>①使用前的准备</h5><ul>
<li><p>导包</p>
</li>
<li><p><code>import java.util.ArrayList;</code></p>
</li>
<li><p>加载进内存</p>
<ul>
<li><code>ArrayList&lt;数据类型&gt;变量名 = new ArrayList();</code><ul>
<li>数据类型：不能用int ，而是要用 <code>Integer</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="②具体使用"><a href="#②具体使用" class="headerlink" title="②具体使用"></a>②具体使用</h5><ul>
<li><p>添加</p>
<ul>
<li>使用 <code>add();</code> 方法<ul>
<li><code>例：list.add(12); -----&gt;存入12进集合</code></li>
</ul>
</li>
</ul>
</li>
<li><p>删除</p>
<ul>
<li>使用 <code>remove();</code> 方法<ul>
<li><code>例：list.remove(1); ----&gt;删除索引为1的数据</code></li>
</ul>
</li>
</ul>
</li>
<li><p>获取</p>
<ul>
<li><p>使用 <code>get(索引);</code> 方法</p>
<ul>
<li><p>单独调用（无意义）</p>
<ul>
<li><code>例：list.get(1); ----&gt;取出索引为1的数据</code></li>
</ul>
</li>
<li><p>输出调用</p>
<ul>
<li><code>例：System.out.println(list.get(2))---&gt;直接输出索引2数据</code></li>
</ul>
</li>
<li><p>赋值调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = list.get(<span class="number">0</span>);</span><br><span class="line">System.out.println(a);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>长度</p>
<ul>
<li>使用 <code>size();</code> 方法</li>
</ul>
</li>
<li><p>更新</p>
<ul>
<li><p>使用 <code>set();</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">id.set(索引，新的数值);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>ArrayList</tag>
        <tag>方法</tag>
        <tag>增查删改</tag>
      </tags>
  </entry>
  <entry>
    <title>Cookie、Session、JSP</title>
    <url>/2021/09/03/Cookie%E3%80%81Session%E3%80%81JSP/</url>
    <content><![CDATA[<h3 id="一、状态管理"><a href="#一、状态管理" class="headerlink" title="一、状态管理"></a>一、状态管理</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h4><ul>
<li><p>学习cookie和session必须先了解什么是状态管理</p>
</li>
<li><p>Web应用程序开发 离不开 http协议是”无状态的”</p>
<ul>
<li>一旦服务器响应完成后，就会断开链接<ul>
<li>一旦有新的用户创建链接，之前的就断开了</li>
</ul>
</li>
<li>如果解决？<ul>
<li>让服务器判断多次的请求是否为同一个用户</li>
<li>将浏览器和服务器之间的多次交互作为一个整体，并且将多次交互的数据保存起来</li>
</ul>
</li>
<li>该解决手段就称为<font color='#d15252'>状态管理</font></li>
</ul>
</li>
<li><p><font color='#d15252'>状态管理</font>（会话）</p>
<ul>
<li>键值对</li>
<li>用来存储数据<ul>
<li>客户端存储（客户端状态管理） ==&gt; cookie<ul>
<li>Cookie类：把状态保存在本地</li>
</ul>
</li>
<li>服务器端存储 ==&gt; session技术</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="二、Cookie-客户端状态"><a href="#二、Cookie-客户端状态" class="headerlink" title="二、Cookie 客户端状态"></a>二、Cookie 客户端状态</h3><h4 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1.概述"></a>1.概述</h4><ul>
<li><p>包：Javax</p>
<ul>
<li>是扩展包</li>
</ul>
</li>
<li><p>cookie 是<font color='#d15252'> servlet 发送</font>到 Web 浏览器的<font color='#d15252'>少量</font>信息，</p>
<ul>
<li><p>唯一的标识客户端</p>
</li>
<li><p>使用HttpServletResponse类中的<font color='orange'>addCookie </font>方法</p>
</li>
<li><p>添加到http的响应头</p>
</li>
</ul>
</li>
<li><p>这些信息由浏览器保存，然后<font color='#d15252'>发送回</font>服务器</p>
<ul>
<li> 使用HttpServletRequest中的getCookies方法</li>
<li> 一些 cookie 可能有相同的名称，但却有不同的路径属性</li>
<li> <font color='orange'>getCookies</font>()获取到所有的cookie并存入Cookie[]数组</li>
</ul>
</li>
<li><p>一个 cookie 拥有一个名称、一个值和一些可选属性，比如注释、路径和域限定符、最大生存时间和版本号 （成员变量）</p>
</li>
<li><p>每个cookie的大小不能超过4kb</p>
</li>
</ul>
<p><img src="https://i.loli.net/2021/09/02/bZSUlJA5xcgiBOu.png" alt="image-20210902101102499"></p>
<h4 id="2-构造方法创建cookie"><a href="#2-构造方法创建cookie" class="headerlink" title="2.构造方法创建cookie"></a>2.构造方法创建cookie</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cookie(String name,String value)</span><br></pre></td></tr></table></figure>



<h4 id="3-成员方法"><a href="#3-成员方法" class="headerlink" title="3.成员方法"></a>3.成员方法</h4><h5 id="Ⅰ-getName-getValue"><a href="#Ⅰ-getName-getValue" class="headerlink" title="Ⅰ. getName() / getValue()"></a>Ⅰ. getName() / getValue()</h5><ul>
<li>获取键和值</li>
<li>由req调用</li>
</ul>
<h5 id="Ⅱ-setValue"><a href="#Ⅱ-setValue" class="headerlink" title="Ⅱ.  setValue()"></a>Ⅱ.  setValue()</h5><ul>
<li>设置值</li>
<li>由一个Cookie对象调用</li>
</ul>
<h5 id="Ⅲ-setPath-String-url"><a href="#Ⅲ-setPath-String-url" class="headerlink" title="Ⅲ.setPath(String url)"></a>Ⅲ.setPath(String url)</h5><ul>
<li><p>cookie默认路径是当前项目下</p>
<ul>
<li>req.getContextPath()<ul>
<li>获取项目名称路径</li>
</ul>
</li>
</ul>
</li>
<li><p>设置路径只有本servlet和设置路径可以获取到cookie</p>
</li>
</ul>
<h5 id="Ⅴ-equalsIgnoreCase"><a href="#Ⅴ-equalsIgnoreCase" class="headerlink" title="Ⅴ. equalsIgnoreCase()"></a>Ⅴ. equalsIgnoreCase()</h5><ul>
<li>比较String类型数据，不分大小写</li>
</ul>
<h4 id="4-修改cookie的值"><a href="#4-修改cookie的值" class="headerlink" title="4.修改cookie的值"></a>4.修改cookie的值</h4><p><img src="https://i.loli.net/2021/09/02/P3WGiTNfCkIu9DE.png" alt="image-20210902103628528"></p>
<h4 id="5-生命周期"><a href="#5-生命周期" class="headerlink" title="5.生命周期"></a>5.生命周期</h4><ul>
<li>设置生命周期的两个方法</li>
<li>setMaxAge(int a)<ul>
<li>设置cookie的最大生存时间，以秒为单位</li>
<li>可以是正值，也可以是负值<ul>
<li>正值：xx秒后被删除</li>
<li>负值：意味不会持久存储，在退出浏览器时删除</li>
<li>0：立即删除</li>
</ul>
</li>
</ul>
</li>
<li>getMaxAge()<ul>
<li>返回以秒为单位指定的 cookie 的最大生存时间</li>
<li><code>-1</code> 指示该 cookie 将保留到浏览器关闭为止</li>
</ul>
</li>
</ul>
<h4 id="6-Cookie特点"><a href="#6-Cookie特点" class="headerlink" title="6.Cookie特点"></a>6.Cookie特点</h4><ul>
<li>Cookie不适合存储所有的数据，程序员只用来存储少量的，非敏感的数据<ul>
<li>状态数据保存在浏览器端，不安全的</li>
<li>保存是有限制的，不能超过4kb</li>
<li>只能存字符串类型数据</li>
<li>可以通过浏览器关闭cookie</li>
</ul>
</li>
</ul>
<h3 id="三、Session"><a href="#三、Session" class="headerlink" title="三、Session"></a>三、Session</h3><h4 id="1-概述-2"><a href="#1-概述-2" class="headerlink" title="1.概述"></a>1.概述</h4><ul>
<li>是一个接口</li>
<li>用来维护客户端和服务器关联的一种技术</li>
<li>当浏览器访问服务器的时候，服务器会为每一个浏览器在服务器端的内存中开辟一块内存空间<ul>
<li>用来创建保存session对象，该对象有一个ID且是<font color='#d15252'>唯一</font>的</li>
<li>Session就会以Cookie的方式带回到浏览器存储</li>
</ul>
</li>
<li>保存多个页面请求和标识用户并存储用户的相关信息</li>
<li><code>HttpSessionBindingListener</code><ul>
<li>是否绑定通知</li>
<li>通知在绑定完成或会话过期后发送的</li>
</ul>
</li>
</ul>
<h4 id="2-成员方法"><a href="#2-成员方法" class="headerlink" title="2.成员方法"></a>2.成员方法</h4><h5 id="Ⅰ-getCreationTime"><a href="#Ⅰ-getCreationTime" class="headerlink" title="Ⅰ. getCreationTime()"></a>Ⅰ. getCreationTime()</h5><ul>
<li>返回创建此会话的时间</li>
</ul>
<h5 id="Ⅱ-getId"><a href="#Ⅱ-getId" class="headerlink" title="Ⅱ. getId()"></a>Ⅱ. getId()</h5><ul>
<li>返回此会话的唯一标识符的字符串，由Servlet分配</li>
</ul>
<h5 id="Ⅲ-getAttribute-setAttribute"><a href="#Ⅲ-getAttribute-setAttribute" class="headerlink" title="Ⅲ. getAttribute() /setAttribute()"></a>Ⅲ. <font color='#d15252'>getAttribute() /setAttribute()</font></h5><ul>
<li>返回会话中指定名称绑定的对象</li>
<li>绑定对象到会话</li>
</ul>
<h5 id="Ⅳ-getAttributeNames"><a href="#Ⅳ-getAttributeNames" class="headerlink" title="Ⅳ. getAttributeNames()"></a>Ⅳ. getAttributeNames()</h5><ul>
<li>返回绑定到此对话的所有对象名称</li>
</ul>
<h5 id="Ⅴ-removeAttribute-String-name"><a href="#Ⅴ-removeAttribute-String-name" class="headerlink" title="Ⅴ.  removeAttribute(String name)"></a>Ⅴ.  <strong>removeAttribute</strong>(String name)</h5><ul>
<li>从会话中移除与指定名称绑定在一起的对象</li>
</ul>
<h4 id="3-Session生命周期"><a href="#3-Session生命周期" class="headerlink" title="3.Session生命周期"></a>3.Session生命周期</h4><ul>
<li><p>设置最大存活时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxInactiveInterval</span><span class="params">(<span class="keyword">int</span> interval)</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>指定在 servlet 容器使此会话失效之前客户端请求之间的时间间隔，以秒为单位。负数时间指示会话永远不会超时</li>
</ul>
</li>
<li><p>立即失效</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invalidate</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li> 使此会话无效，然后取消对任何绑定到它的对象的绑定</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/09/02/tShcEZUKMm47YJT.png" alt="image-20210902144108425"></p>
<h3 id="四、JSP组件"><a href="#四、JSP组件" class="headerlink" title="四、JSP组件"></a>四、JSP组件</h3><p><img src="https://i.loli.net/2021/09/02/nOkmQB346K7xjGa.png" alt="image-20210902145647200"></p>
<ul>
<li>JavaBean创建对象  ==&gt; jsp:useBean<ul>
<li>零散数据的封装 ===&gt; 对象 （JavaBean）</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/09/02/t6HdP5T3M1wBuCL.png" alt="image-20210902151008567"></p>
<ul>
<li>给对象赋值 jsp:setProperty</li>
<li>获取对象的值 jsp:getProperty</li>
</ul>
<h3 id="五、MVC设计模式"><a href="#五、MVC设计模式" class="headerlink" title="五、MVC设计模式"></a>五、MVC设计模式</h3><ul>
<li><p>M：Model模型</p>
<ul>
<li>封装业务数据层 （JavaBean），业务逻辑层，访问数据库的<font color='#d15252'>Dao对象</font></li>
</ul>
</li>
<li><p>V：view视窗</p>
<ul>
<li>Jsp和Html</li>
</ul>
</li>
<li><p>C：controller：控制器</p>
<ul>
<li>流程控制和页面的跳转，通常由Servlet完成</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>cookie</tag>
        <tag>session</tag>
        <tag>jsp:javabeen</tag>
        <tag>MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>File类和递归</title>
    <url>/2021/08/25/File%E7%B1%BB%E5%92%8C%E9%80%92%E5%BD%92/</url>
    <content><![CDATA[<h3 id="一、File"><a href="#一、File" class="headerlink" title="一、File"></a>一、File</h3><ul>
<li>Java可以操作我们的本地硬盘<ul>
<li>文件和目录路径名的抽象表示<ul>
<li>文件</li>
<li>内容</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="1-什么是File类"><a href="#1-什么是File类" class="headerlink" title="1.什么是File类"></a>1.什么是File类</h4><ul>
<li>就是对我们本地文件管理的类（文件夹在java中是File）</li>
</ul>
<h4 id="2-使用File类"><a href="#2-使用File类" class="headerlink" title="2.使用File类"></a>2.使用File类</h4><h5 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h5><ul>
<li><h6 id="pathSeparator（了解）"><a href="#pathSeparator（了解）" class="headerlink" title="pathSeparator（了解）"></a>pathSeparator（了解）</h6><ul>
<li> 与系统相关的路径分隔符字符，为方便起见，表示为字符串。</li>
<li> 直接输出可以得到一个 ”；” 分号</li>
</ul>
</li>
</ul>
<h5 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h5><h6 id="Ⅰ-File-File-parent-String-child"><a href="#Ⅰ-File-File-parent-String-child" class="headerlink" title="Ⅰ.File(File parent, String child)"></a>Ⅰ.File(File parent, String child)</h6><ul>
<li>从父抽象路径名和子路径名字符串创建新的 File实例。</li>
</ul>
<h6 id="Ⅱ-File-String-pathname"><a href="#Ⅱ-File-String-pathname" class="headerlink" title="Ⅱ.File(String pathname)"></a>Ⅱ.File(String pathname)</h6><ul>
<li>通过将给定的路径名字符串转换为抽象路径名来创建新的 File实例。  </li>
</ul>
<h6 id="Ⅲ-File-String-parent-String-child"><a href="#Ⅲ-File-String-parent-String-child" class="headerlink" title="Ⅲ.File(String parent, String child)"></a>Ⅲ.File(String parent, String child)</h6><ul>
<li> 从父路径名字符串和子路径名字符串创建新的 File实例。  </li>
</ul>
<p><img src="https://i.loli.net/2021/08/06/2GEvFzH5uYcWSmf.png" alt="image-20210806095327726"></p>
<blockquote>
<p>抽象：File表示的这个目录，可能存在也可能不存在，所以被称为是抽象的</p>
</blockquote>
<blockquote>
<p>三个构造方法的区别：不要从应用层，因为我们还没有遇到这样的案例。 先单独从表层考虑</p>
</blockquote>
<h4 id="3-成员方法-—-File类的获取方法"><a href="#3-成员方法-—-File类的获取方法" class="headerlink" title="3.成员方法 — File类的获取方法"></a>3.成员方法 — File类的获取方法</h4><ul>
<li>getAbsolutePath()<ul>
<li>返回此抽象路径名的绝对路径名字符串。</li>
<li>即返回全路径（<font color='#d15252'>绝对路径</font>）</li>
</ul>
</li>
<li>getName()<ul>
<li>返回由此抽象路径名表示的文件或目录的名称</li>
<li>即返回最后一个路径（<font color='#d15252'>相对路径</font>）</li>
</ul>
</li>
<li>getPath()<ul>
<li>将此<strong>抽象路径名</strong>转换为路径名字符串</li>
</ul>
</li>
<li>length()<ul>
<li>返回由此抽象路径名表示的文件的长度</li>
<li>文件的长度、字节数<ul>
<li>但当获取文件夹的大小时，通常不够准确</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="4-成员方法-—-文件-文件夹的创建及删除"><a href="#4-成员方法-—-文件-文件夹的创建及删除" class="headerlink" title="4.成员方法 — 文件/文件夹的创建及删除"></a>4.成员方法 — 文件/文件夹的创建及删除</h4><ul>
<li>createNewFile<ul>
<li>当且仅当具有该名称的文件尚不存在时，原地创建一个由该抽象路径名命名的新的空文件<ul>
<li>简单来说就是创建一个文件</li>
<li>创建成功的前提条件：无此文件</li>
</ul>
</li>
</ul>
</li>
<li>mkdir()<ul>
<li>创建目录（单层）</li>
</ul>
</li>
<li>mkdirs()<ul>
<li>创建由此抽象路径名命名的目录，包括任何必需但不存在的父目录。<ul>
<li>简单来说就是创建文件夹</li>
<li>可以创建多个</li>
</ul>
</li>
</ul>
</li>
<li>isFile()<ul>
<li>测试此抽象路径名表示的文件是否为普通文件。</li>
</ul>
</li>
<li>delete()<ul>
<li><font color='#d15252'>删除</font>由此抽象路径名表示的文件或目录</li>
</ul>
</li>
<li>isDirectory()<ul>
<li>测试此抽象路径名表示的文件是否为目录<ul>
<li>前提条件：目录一定要存在</li>
</ul>
</li>
</ul>
</li>
<li>exists()<ul>
<li>测试此抽象路径名表示的文件或目录是否存在</li>
</ul>
</li>
</ul>
<h4 id="5-成员方法-—-获取文件目录"><a href="#5-成员方法-—-获取文件目录" class="headerlink" title="5.成员方法 — 获取文件目录"></a>5.成员方法 — 获取文件目录</h4><h5 id="Ⅰ-list"><a href="#Ⅰ-list" class="headerlink" title="Ⅰ.list()"></a>Ⅰ.list()</h5><ul>
<li><p>返回一个字符串数组，命名由此抽象路径名表示的目录中的文件和目录</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] list():获取路径中的子目录/文件</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//list方法，返回绝对路径，是String字符串类型的</span></span><br><span class="line">String[] list = f.list();</span><br><span class="line"><span class="comment">//循环遍历查看结果</span></span><br><span class="line"><span class="keyword">for</span> (String i: list)&#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="Ⅱ-listFiles"><a href="#Ⅱ-listFiles" class="headerlink" title="Ⅱ.listFiles()"></a>Ⅱ.<font color='#d15252'>listFiles()</font></h5><ul>
<li><p>与list()功能一样,但返回的是File()类型的数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File[] listFiles()</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//listFiles方法，返回File对象，更加灵活，可以再次进行操作</span></span><br><span class="line">File[] files = f.listFiles();</span><br><span class="line"><span class="keyword">for</span> (File i : files)&#123;</span><br><span class="line">    <span class="comment">//返回绝对路径是因为默认重写了toString方法</span></span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>使用listFiles()更加灵活，因为返回值是File类型，可继续使用File的其他功能</p>
</li>
</ul>
<h5 id="Ⅲ-listFiles-FileFilter-filter-过滤文件（用的比较多）"><a href="#Ⅲ-listFiles-FileFilter-filter-过滤文件（用的比较多）" class="headerlink" title="Ⅲ.listFiles(FileFilter filter) 过滤文件（用的比较多）"></a>Ⅲ.<strong><font color='#d15252'>listFiles(FileFilter filter) </font>过滤文件</strong>（用的比较多）</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File[] listFiles(FileFilter filter) </span><br></pre></td></tr></table></figure>

<ul>
<li><p>同样是listFiles，表示方法的重载，传递一个FileFilter类型的参数</p>
</li>
<li><p><font color='#d15252'>FileFilter</font>：由API可知FilleFilter是一个接口，而且没有已知的实现类</p>
<ul>
<li>所以我们要使用它，必须定义一个类，implements是西安接口FileFilter</li>
<li>并且我们需要重写接口中的类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File dir, String name)</span></span></span><br><span class="line"><span class="function"><span class="comment">//测试指定文件是否应包含在文件列表中</span></span></span><br><span class="line"><span class="function">dir - 找到该文件的目录。 </span></span><br><span class="line"><span class="function">name - 文件的名称。 </span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/08/06/bTpwMFlWfIq7GLn.png" alt="image-20210806140719225"></p>
<ul>
<li>pahthname：传过来的参数名</li>
<li>getName()：获取内容</li>
<li>endsWith()：String中的成员方法<ul>
<li><code>endsWith(String suffix)</code></li>
<li>测试此字符串是否以指定的后缀结尾。</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/08/06/KYSm2TRUZ4gCMJ3.png" alt="image-20210806140740062"></p>
</li>
<li><p>也可以直接通过匿名对象使用</p>
<p><img src="https://i.loli.net/2021/08/06/ly1JWNortYHjh86.png" alt="image-20210806145718867"></p>
</li>
</ul>
<h5 id="Ⅳ-listFiles-FilenameFilter-filter-同样是过滤文件"><a href="#Ⅳ-listFiles-FilenameFilter-filter-同样是过滤文件" class="headerlink" title="Ⅳ.listFiles(FilenameFilter filter)同样是过滤文件"></a>Ⅳ.listFiles(FilenameFilter filter)同样是过滤文件</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> File[] listFiles(FilenameFilter filter)</span><br></pre></td></tr></table></figure>

<ul>
<li>返回一个抽象路径名数组，表示由此抽象路径名表示的满足指定过滤器的目录中的文件和目录，同样用方法重载的方法<ul>
<li>返回值类型：File[]</li>
<li>传递参数：FilenameFilter filter</li>
</ul>
</li>
<li><font color='#d15252'>FilenameFilter</font> 同样是一个接口<ul>
<li>成员方法：accept(File dir,String name)</li>
<li>测试指定文件是否应包含在文件列表中</li>
<li>返回boolean类型的值</li>
</ul>
</li>
</ul>
<h3 id="二、递归"><a href="#二、递归" class="headerlink" title="二、递归"></a>二、递归</h3><h4 id="1-什么是递归"><a href="#1-什么是递归" class="headerlink" title="1.什么是递归"></a>1.什么是递归</h4><ul>
<li>方法自己调用自己就是递归<ul>
<li>要给自己设置出口</li>
<li>构造方法不能使用</li>
<li>不要过多的使用（百万以上最好不要用递归）</li>
</ul>
</li>
</ul>
<h4 id="2-递归练习"><a href="#2-递归练习" class="headerlink" title="2.递归练习"></a>2.递归练习</h4><ul>
<li>遍历文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断如果是目录就继续进入并遍历</span></span><br><span class="line"><span class="keyword">for</span> (File i : files) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i.isDirectory()) &#123;</span><br><span class="line">        find(i);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//保存文件名</span></span><br><span class="line">        String name = i.getName();</span><br><span class="line">        <span class="comment">//判断文件后缀是不是.mp4文件</span></span><br><span class="line">        <span class="keyword">if</span> (name.endsWith(<span class="string">&quot;.mp4&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>File</tag>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>EL表达式和JSTL</title>
    <url>/2021/09/06/EL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8CJSTL/</url>
    <content><![CDATA[<h3 id="一、EL表达式"><a href="#一、EL表达式" class="headerlink" title="一、EL表达式"></a>一、EL表达式</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h4><ul>
<li>EL表达式：<ul>
<li>E：Expression</li>
<li>L：Language</li>
<li>用于简化jsp的表达式，类似于js和jquery的关系</li>
</ul>
</li>
<li>EL表达式的作用<ul>
<li>能够依次访问pageContext，request，session，application，从中存取值</li>
<li>获取请求的参数</li>
<li>访问JavaBean对象</li>
<li>访问集合中的属性</li>
<li>输出简单的运算结果</li>
</ul>
</li>
</ul>
<h4 id="2-EL表达式访问值"><a href="#2-EL表达式访问值" class="headerlink" title="2.EL表达式访问值"></a>2.EL表达式访问值</h4><p><img src="https://i.loli.net/2021/09/06/Cnx3JDBw7ATsSci.png" alt="image-20210906101600278"></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--    EL表达式取值--%&gt;</span><br><span class="line">    pageContext：$&#123;id1&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-EL表达式获取请求的参数"><a href="#3-EL表达式获取请求的参数" class="headerlink" title="3.EL表达式获取请求的参数"></a>3.EL表达式获取请求的参数</h4><ul>
<li><p>取单个的</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">$&#123;param.name&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>取所有的</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">$&#123;paramvalues.name[]&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://i.loli.net/2021/09/06/tTPyYKwLNJu8j1s.png" alt="image-20210906103502994"></p>
<h4 id="4-访问JavaBean属性"><a href="#4-访问JavaBean属性" class="headerlink" title="4.访问JavaBean属性"></a>4.访问JavaBean属性</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">$&#123;对象名.属性&#125;</span><br><span class="line">$&#123;对象名[<span class="string">&quot;属性名&quot;</span>]&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>对象名：指的是name值</li>
<li>会自动使用get方法取值，如果没有Set方法会报500错误</li>
<li>第二种取值方式是为了防止，当属性出现其他特殊符号时可以使用</li>
</ul>
<p><img src="https://i.loli.net/2021/09/06/uNWqdD8sOnzcj9k.png" alt="image-20210906105326649"></p>
<h4 id="5-访问集合属性"><a href="#5-访问集合属性" class="headerlink" title="5.访问集合属性"></a>5.访问集合属性</h4><p><img src="https://i.loli.net/2021/09/06/pzcMw4jFBUIVXiq.png" alt="image-20210906113411452"></p>
<h4 id="6-EL隐式对象"><a href="#6-EL隐式对象" class="headerlink" title="6.EL隐式对象"></a>6.EL隐式对象</h4><p><img src="https://i.loli.net/2021/09/06/dGMRNJ8DXvBgowA.png" alt="image-20210906113918214"></p>
<h4 id="7-EL常用运算符"><a href="#7-EL常用运算符" class="headerlink" title="7.EL常用运算符"></a>7.EL常用运算符</h4><p><img src="https://i.loli.net/2021/09/06/iTBnyGOY7L14tDU.png" alt="image-20210906135619112"></p>
<p><img src="https://i.loli.net/2021/09/06/vnkl6V8z1shXAYU.png" alt="image-20210906141900996"></p>
<ul>
<li>EL表达式是没有空指针异常和数组索引越界的</li>
</ul>
<h3 id="二、JSTL"><a href="#二、JSTL" class="headerlink" title="二、JSTL"></a>二、JSTL</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h4><ul>
<li><p>标签库，简化一些java代码</p>
</li>
<li><p>核心库，引用语法</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span>         uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-核心标签库"><a href="#2-核心标签库" class="headerlink" title="2.核心标签库"></a>2.核心标签库</h4><ul>
<li><p>核心标签库的<font color='#d15252'>引用语法</font></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> prefix=<span class="string">&quot;c&quot;</span> %&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://i.loli.net/2021/09/06/wTbV7Z2carDJosH.png" alt="image-20210906150130163"></p>
<ul>
<li>&lt; c:out &gt;：用于在JSP中显示数据，就像&lt;%= … &gt;</li>
<li>&lt; c:set &gt;：用于保存数据</li>
<li>&lt; c:remove&gt;：用于删除数据</li>
</ul>
<ul>
<li><p>&lt; c:if &gt;：与我们在一般程序中用的if一样 （<font color='#d15252'>单次判断</font>）</p>
<p><img src="https://i.loli.net/2021/09/06/Et3TBkN2GDsH4gF.png" alt="image-20210906151016783"></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">&quot;salary&quot;</span> scope=<span class="string">&quot;session&quot;</span> value=<span class="string">&quot;$&#123;2000*2&#125;&quot;</span>/&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;salary &gt; 2000&#125;&quot;</span>&gt;</span><br><span class="line"> &lt;p&gt;My salary is: &lt;c:out value=<span class="string">&quot;$&#123;salary&#125;&quot;</span>/&gt;&lt;p&gt;</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>需要注意的是，test条件必须写一个EL表达式，不然就是一个普通的字符串</li>
</ul>
</li>
</ul>
<ul>
<li><p>&lt;c:choose &gt;, &lt;c:when &gt;, &lt;c:otherwise &gt; 标签</p>
<ul>
<li><font color='#d15252'>多次判断</font></li>
</ul>
<p><img src="https://i.loli.net/2021/09/06/5eAG9VKLMQ2jb6u.png" alt="image-20210906151747419"></p>
</li>
</ul>
<ul>
<li><p>&lt;c:forEach &gt;, &lt;c:forTokens &gt;<font color='#d15252'> 循环标签</font></p>
<p><img src="https://i.loli.net/2021/09/06/TpoWfDxUhraNK68.png" alt="image-20210906152237828"></p>
<p><img src="https://i.loli.net/2021/09/06/TxmLAH4kKSM3Yvt.png" alt="image-20210906152916051"></p>
<ul>
<li>注意事项：<ul>
<li>begin：默认值0，不用写EL表达式</li>
<li>end：默认最后一个元素</li>
</ul>
</li>
<li>forEach类似于Java中的增强for，因此变量i可以直接使用</li>
</ul>
</li>
</ul>
<h4 id="3-格式化标签库"><a href="#3-格式化标签库" class="headerlink" title="3.格式化标签库"></a>3.格式化标签库</h4><ul>
<li><p>格式化引用格式</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;fmt&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/fmt&quot;</span> %&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>&lt;fmt:formatDate &gt; 使用不同的方式格式化日期</p>
</li>
</ul>
<h4 id="4-JSTL函数标签库"><a href="#4-JSTL函数标签库" class="headerlink" title="4.JSTL函数标签库"></a>4.JSTL函数标签库</h4><ul>
<li><p>导入JSTL函数</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;fn&quot;</span>         uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/functions&quot;</span> %&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li><p>fn:contains()函数：用于确定一个字符串是否包含指定的子串</p>
<ul>
<li><p>语法格式：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(String, String)</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>例：</p>
</li>
</ul>
<p><img src="https://i.loli.net/2021/09/06/T4hz3HaXSsiubWD.png" alt="image-20210906155320302"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>EL</tag>
        <tag>FSTL</tag>
      </tags>
  </entry>
  <entry>
    <title>Filter过滤器和listener监听器</title>
    <url>/2021/09/08/Filter%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8Clistener%E7%9B%91%E5%90%AC%E5%99%A8/</url>
    <content><![CDATA[<ul>
<li>JavaEE有十三个技术规范</li>
<li>Filter过滤器 / listener监听器</li>
</ul>
<h3 id="一、Filter-过滤器"><a href="#一、Filter-过滤器" class="headerlink" title="一、Filter 过滤器"></a>一、Filter 过滤器</h3><ul>
<li>是一个接口</li>
</ul>
<p><img src="https://i.loli.net/2021/09/07/FIgytOUm3CJdx6u.png" alt="image-20210907090637198"></p>
<ul>
<li>方法即生命周期</li>
</ul>
<h4 id="1-登陆练习"><a href="#1-登陆练习" class="headerlink" title="1.登陆练习"></a>1.登陆练习</h4><ul>
<li>servlet程序</li>
</ul>
<p><img src="https://i.loli.net/2021/09/07/OIEkQWewVC5GqdL.png" alt="image-20210907092526208"></p>
<ul>
<li>登录成功页面</li>
</ul>
<p><img src="https://i.loli.net/2021/09/07/qXEZAyL9QKlesgt.png" alt="image-20210907092557125"></p>
<ul>
<li>登录页面</li>
</ul>
<p><img src="https://i.loli.net/2021/09/07/4yfU8gc6lbYxBzM.png" alt="image-20210907092610256"></p>
<blockquote>
<p> 有Bug的，因为登录界面可以直接通过路径访问，我们需要实现过滤</p>
</blockquote>
<h4 id="2-实现Filter过滤器"><a href="#2-实现Filter过滤器" class="headerlink" title="2.实现Filter过滤器"></a>2.实现Filter过滤器</h4><ul>
<li><code>implements Filter</code> 实现Filter接口，重写它的三个方法</li>
</ul>
<p><img src="https://i.loli.net/2021/09/07/DqNH2mIE3u1yko4.png" alt="image-20210907093053219"></p>
<blockquote>
<p>init初始化 destroy销毁 </p>
<p>只需研究doFilter即可</p>
</blockquote>
<ul>
<li><p>因为实现接口类是我们自定义的类，WEB程序并不认识他，所以我们需要在Web.xml文件中配置相关属性</p>
<p><img src="C:\Users\GikH\AppData\Roaming\Typora\typora-user-images\image-20210907095414608.png" alt="image-20210907095414608"></p>
</li>
<li><p>过滤器放行</p>
<p><img src="https://i.loli.net/2021/09/07/A2rPI1Us3TBGuNy.png" alt="image-20210907100801045"></p>
</li>
<li><p>与Servlet一样</p>
<ul>
<li>Init初始化和通过反射无参构造创建只走一次</li>
<li>每一次请求都走一遍doFilter()</li>
</ul>
</li>
</ul>
<h4 id="3-FilterConfig"><a href="#3-FilterConfig" class="headerlink" title="3.FilterConfig()"></a>3.FilterConfig()</h4><p><img src="https://i.loli.net/2021/09/07/NZJoYx79aQBityr.png" alt="image-20210907101859399"></p>
<p><img src="https://i.loli.net/2021/09/07/4s6JulqD3jUhkLw.png" alt="image-20210907102052767"></p>
<h4 id="4-多个过滤器"><a href="#4-多个过滤器" class="headerlink" title="4.多个过滤器"></a>4.多个过滤器</h4><ul>
<li>按照web配置文件中，<font color='#d15252'>映射路径</font>配置的位置依次拦截请求，给出的响应正好和请求的情况是<font color='#d15252'>相反的</font></li>
</ul>
<h4 id="5-三种过滤器"><a href="#5-三种过滤器" class="headerlink" title="5.三种过滤器"></a>5.三种过滤器</h4><ul>
<li>/* 拦截所有</li>
<li>*.jpg 拦截某后缀的所有请求</li>
<li>/xxx  指名道姓</li>
</ul>
<h3 id="二、listener监听器"><a href="#二、listener监听器" class="headerlink" title="二、listener监听器"></a>二、listener监听器</h3><ul>
<li>request<ul>
<li><code>ServletRequestListener</code> 接口</li>
</ul>
</li>
<li>request的Attribute</li>
<li>session</li>
<li>session的Attribute</li>
<li>Application</li>
<li>Application的Attribute</li>
<li>Session的活话和钝话</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Filter</tag>
        <tag>listener</tag>
        <tag>监听器</tag>
        <tag>过滤器</tag>
      </tags>
  </entry>
  <entry>
    <title>Git</title>
    <url>/2021/10/26/Git/</url>
    <content><![CDATA[<h2 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h2><ul>
<li>git</li>
</ul>
<h3 id="一、Git"><a href="#一、Git" class="headerlink" title="一、Git"></a>一、Git</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h4><p><img src="https://i.loli.net/2021/10/22/RCrnjxmbGT4v3ql.png" alt="image-20211022113653618"></p>
<h4 id="2-Git的安装和初始化"><a href="#2-Git的安装和初始化" class="headerlink" title="2.Git的安装和初始化"></a>2.Git的安装和初始化</h4><ul>
<li><p>安装参见视频录像</p>
</li>
<li><p>初始化设置</p>
<ul>
<li><p>设置用户名和邮箱</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> user<span class="variable">.name</span> <span class="string">&quot;GikH&quot;</span></span><br><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> user<span class="variable">.email</span> <span class="string">&quot;2256319448@qq.com&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>初始化</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">init</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="3-git添加文件"><a href="#3-git添加文件" class="headerlink" title="3.git添加文件"></a>3.git添加文件</h4><p><img src="https://i.loli.net/2021/10/22/paTegC7iJUjZhEX.png" alt="image-20211022122955343"></p>
<ul>
<li><p>将readme.txt交给git管理</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">add</span> readme.txt</span><br><span class="line"></span><br><span class="line">git <span class="keyword">commit</span> -m &quot;添加了readme.txt&quot;</span><br><span class="line"></span><br><span class="line">如果添加多个文件使用</span><br><span class="line">git <span class="keyword">add</span>.</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://i.loli.net/2021/10/22/r8KxF23t4ZlNyRm.png" alt="image-20211022123250693"></p>
<p><img src="https://i.loli.net/2021/10/22/XB8AsPmzgQTVb6H.png" alt="image-20211022123355066"></p>
<ul>
<li><p>查看版本库状态</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git status</span></span><br></pre></td></tr></table></figure></li>
<li><p>查看提交日志</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>

<ul>
<li>commit ID 全球唯一</li>
</ul>
</li>
<li><p>查看提交日志一行进行显示</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> <span class="comment">--pretty=oneline</span></span><br></pre></td></tr></table></figure></li>
<li><p>显示图标</p>
<ul>
<li>修改注册表（添加或删除空格）</li>
</ul>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">计算机<span class="symbol">\H</span>KEY_LOCAL_MACHINE<span class="symbol">\S</span>OFTWARE<span class="symbol">\M</span>icrosoft<span class="symbol">\W</span>indows<span class="symbol">\C</span>urrentVersion<span class="symbol">\E</span>xplorer<span class="symbol">\S</span>hellIconOverlayIdentifiers<span class="symbol">\ </span>7TortoiseAdded</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/10/22/QzqgytIMaEL54FJ.png" alt="image-20211022202532142"></p>
</li>
</ul>
<h4 id="4-git命令"><a href="#4-git命令" class="headerlink" title="4.git命令"></a>4.git命令</h4><ul>
<li>SVN图标说明</li>
</ul>
<p><img src="https://i.loli.net/2021/10/22/gsqaKEI5wiofe7A.png" alt="image-20211022202855705"></p>
<ul>
<li><p>如果要修改已经提交的文件，需要先重新提交，再commit</p>
</li>
<li><p>查看差异</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git diff</span></span><br></pre></td></tr></table></figure></li>
<li><p>回滚到指定版本（<font color='#d15252'>commit版本号</font>）</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">reset</span> <span class="comment">--hard xxxxxx版本号</span></span><br></pre></td></tr></table></figure></li>
<li><p>回滚到上一个版本</p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">git</span> <span class="comment">resrt</span> --<span class="comment">hard</span> <span class="comment">HEAD^</span>-- <span class="comment">回退十个版本git</span> <span class="comment">resrt</span> --<span class="comment">hard</span> <span class="comment">HEAD^~10</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>一个^表示一个版本，可以跟多个</p>
</blockquote>
<p><img src="https://i.loli.net/2021/10/22/MQH34V5dhDqbXyL.png" alt="image-20211022203604349"></p>
</li>
<li><p>撤销修改</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">git checkout <span class="comment">-- file</span></span><br></pre></td></tr></table></figure>

<ul>
<li>commit之后不要用此命令</li>
</ul>
</li>
<li><p>删除文件</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git</span> rm 文件名</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="5-git中的分支"><a href="#5-git中的分支" class="headerlink" title="5.git中的分支"></a>5.git中的分支</h4><ul>
<li>master主干分支<ul>
<li>由git init时自动创建主干分支</li>
</ul>
</li>
</ul>
<h5 id="Ⅰ-分支的概念"><a href="#Ⅰ-分支的概念" class="headerlink" title="Ⅰ.分支的概念"></a>Ⅰ.分支的概念</h5><p><img src="https://i.loli.net/2021/10/24/ZFOT97ayJSrYzWP.png" alt="image-20211024114638205"></p>
<h5 id="Ⅱ-分支操作"><a href="#Ⅱ-分支操作" class="headerlink" title="Ⅱ.分支操作"></a>Ⅱ.分支操作</h5><ul>
<li>创建分支</li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">branch </span>分支名</span><br></pre></td></tr></table></figure>

<ul>
<li>查看分支</li>
</ul>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git branch</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/10/24/XwbB9QVU5D1o6IN.png" alt="image-20211024115104520"></p>
<ul>
<li><p>切换分支</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git</span> checkout 分支名</span><br></pre></td></tr></table></figure>

<ul>
<li>切换分支后还可以看到原来的文件<ul>
<li>但是每个分支的文件是独立开的，修改不影响其他分支的文件</li>
</ul>
</li>
</ul>
</li>
<li><p>合并分支</p>
<figure class="highlight cos"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">merge</span> 要合并的分支名</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/10/24/5FyQ8tUIOPVhSkv.png" alt="image-20211024115635681"></p>
<ul>
<li>会引发冲突，解决方法<ul>
<li>手动删除&lt;&lt;&lt;&lt; HEAD  &gt;&gt;&gt;&gt;&gt; MASTER</li>
<li>更高效的方式：使用远程仓库</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="6-远程仓库"><a href="#6-远程仓库" class="headerlink" title="6.远程仓库"></a>6.远程仓库</h4><ul>
<li>GitHub</li>
<li><font color='#d15252'>GitEE</font>  —-&gt;国内</li>
<li>GitLib  —-&gt;上班后公司可能用的</li>
</ul>
<h5 id="远程仓库的使用步骤"><a href="#远程仓库的使用步骤" class="headerlink" title="远程仓库的使用步骤"></a>远程仓库的使用步骤</h5><ul>
<li>创建远程仓库</li>
<li>上传文件代码到远程仓库<ul>
<li>如果是Idea项目：.idea，targe，等一些文件不需要上传<ul>
<li>所以我们就需要用到 .gitignore忽略文件</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/10/24/2cYRBt9Azqb1KUr.png" alt="image-20211024124912853"></p>
<ul>
<li>设置用户名和邮箱</li>
</ul>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> user<span class="variable">.name</span> <span class="string">&quot;CN-GikH&quot;</span>git <span class="keyword">config</span> --<span class="keyword">global</span> user<span class="variable">.email</span> <span class="string">&quot;2256319448@qq.com&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>初始化本地库</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">init</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置忽略文件</p>
</li>
<li><p>即将项目添加到本地仓库</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">add</span> .git <span class="keyword">commit</span> -m&quot;初始化了xxx&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>配置远程仓库的请求路径</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git remote add origin https:<span class="regexp">//gi</span>tee.com<span class="regexp">/shangdigao/</span>javaplus.git</span><br></pre></td></tr></table></figure></li>
<li><p>将本地库中的xxx项目推送到码云</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">push</span> -u <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure></li>
<li><p>弹框输入码云账号密码</p>
</li>
</ul>
<h5 id="使用远程仓库"><a href="#使用远程仓库" class="headerlink" title="使用远程仓库"></a>使用远程仓库</h5><ul>
<li>idea修改git设置，添加git.exe路径</li>
</ul>
<p><img src="https://i.loli.net/2021/10/24/vklmOYSG2WEh8zo.png" alt="image-20211024131441788"></p>
<ul>
<li><p>idea添加gitEE插件，并登录账户</p>
</li>
<li><p>复制远程仓库url</p>
<ul>
<li>idea使用url创建项目</li>
</ul>
<p><img src="https://i.loli.net/2021/10/24/a64UjdT1CtRi2qB.png" alt="image-20211024131551251"></p>
<ul>
<li>红色：存在于本地并没有上传到git</li>
<li>绿色：上传到git，但没有上传到本地仓库</li>
<li>黑色：本地仓库中存在</li>
</ul>
</li>
</ul>
<h4 id="7-团队开发的注意事项"><a href="#7-团队开发的注意事项" class="headerlink" title="7.团队开发的注意事项"></a>7.团队开发的注意事项</h4><ul>
<li>每次开发都要push到自己的远程分支</li>
<li>每次合并到master分支之前都要做备份，备份，备份！！</li>
<li>组员和组长确认好功能后合并到master分支</li>
<li>先切换到master分支，更新代码后再进行开发</li>
<li>每个小组每天都要一份新的代码，更新到自己的本地的master</li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>IO流</title>
    <url>/2021/08/25/IO%E6%B5%81/</url>
    <content><![CDATA[<h3 id="一、对文件的操作IO流"><a href="#一、对文件的操作IO流" class="headerlink" title="一、对文件的操作IO流"></a>一、对文件的操作IO流</h3><ul>
<li><font color='#d15252'>IO流</font><ul>
<li>输入输出简称IO</li>
<li>被IO传输的数据，称为流</li>
</ul>
</li>
</ul>
<h4 id="1-IO流的分类"><a href="#1-IO流的分类" class="headerlink" title="1.IO流的分类"></a>1.IO流的分类</h4><h5 id="Ⅰ-按数据的流向（内存）"><a href="#Ⅰ-按数据的流向（内存）" class="headerlink" title="Ⅰ.按数据的流向（内存）"></a>Ⅰ.按数据的流向（内存）</h5><ul>
<li>输入流：读数据</li>
<li>输出流：写数据</li>
</ul>
<h5 id="Ⅱ-数据的类型来分"><a href="#Ⅱ-数据的类型来分" class="headerlink" title="Ⅱ.数据的类型来分"></a>Ⅱ.数据的类型来分</h5><ul>
<li><p>字节流</p>
<ul>
<li>字节输入流 InputStream</li>
<li>字节输出流 OutputStream</li>
</ul>
</li>
<li><p>字符流</p>
<ul>
<li>字符输入流 Reader</li>
<li>字符输出流 Writer</li>
</ul>
</li>
</ul>
<h3 id="二、字节输入流—InputStream"><a href="#二、字节输入流—InputStream" class="headerlink" title="二、字节输入流—InputStream"></a>二、字节输入流—InputStream</h3><h4 id="1-概述："><a href="#1-概述：" class="headerlink" title="1.概述："></a>1.概述：</h4><ul>
<li><p>抽象类</p>
</li>
<li><p>是表示输入字节流的所有类的超类</p>
<ul>
<li>要想使用它的功能，需要通过子类实例化</li>
<li>有很多已知子类FileInputStream</li>
</ul>
<p><img src="https://i.loli.net/2021/08/09/L2hslSWfBHC34uo.png" alt="image-20210809093421685"></p>
</li>
</ul>
<h4 id="2-成员方法"><a href="#2-成员方法" class="headerlink" title="2.成员方法"></a>2.成员方法</h4><h5 id="Ⅰ-read-读取数据"><a href="#Ⅰ-read-读取数据" class="headerlink" title="Ⅰ. read()读取数据"></a>Ⅰ. read()读取数据</h5><ul>
<li><p>返回值Int类型</p>
<ul>
<li>如果想要字符类型，强转为char</li>
</ul>
<p><img src="https://i.loli.net/2021/08/09/K3z2G5PW6inxkfO.png" alt="image-20210809094358422"></p>
</li>
<li><p>读取一个字节的数据</p>
</li>
<li><p>如果到达文件末尾，返回-1</p>
</li>
<li><p>while循环实现读取文件所有数据</p>
</li>
</ul>
<p><img src="https://i.loli.net/2021/08/09/fQzuEbxBjpcNR97.png" alt="image-20210809095444628"></p>
<h5 id="Ⅱ-read-byte-b"><a href="#Ⅱ-read-byte-b" class="headerlink" title="Ⅱ. read(byte[] b)"></a>Ⅱ. read(byte[] b)</h5><ul>
<li>从该输入流读取最多 <code>b.length</code>个字节的数据到一个字节数组。 </li>
<li>如果到达文件末尾，返回-1</li>
<li>直接输出read(buff)返回的是数据个数</li>
</ul>
<h5 id="Ⅲ-close-关闭流，先刷新"><a href="#Ⅲ-close-关闭流，先刷新" class="headerlink" title="Ⅲ.close()关闭流，先刷新"></a>Ⅲ.close()关闭流，先刷新</h5><h3 id="三、字节输出流—OutputStream"><a href="#三、字节输出流—OutputStream" class="headerlink" title="三、字节输出流—OutputStream"></a>三、字节输出流—OutputStream</h3><ul>
<li>写入操作，传递的参数都是<font color='#d15252'>ASCII码类型</font>的数据</li>
</ul>
<h4 id="1-概述-："><a href="#1-概述-：" class="headerlink" title="1.概述 ："></a>1.概述 ：</h4><ul>
<li><p>抽象类</p>
<ul>
<li><p>通过子类实例化</p>
</li>
<li><p>已知子类FileOutputStream</p>
</li>
<li><p>构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileOutputStream(File file) 创建文件输出流以写入由指定的 File对象表示的文件</span><br><span class="line">    <span class="comment">//写入操作会覆盖原有文件内数据</span></span><br><span class="line">    </span><br><span class="line">FileOutputStream(File file, <span class="keyword">boolean</span> append)创建文件输出流以写入由指定的 File对象表示的文件 </span><br><span class="line">    <span class="comment">//如果第二个参数为true ，则字节将写入文件的末尾而不是开头</span></span><br></pre></td></tr></table></figure></li>
<li><p>如果使用第一种构造方法，每次写入都会覆盖之前的内容</p>
</li>
<li><p>如果使用第二种构造方法，传递参数true，则写入不会覆盖，而是在后面追加</p>
</li>
</ul>
</li>
<li><p>这个抽象类是表示字节输出流的所有类的超类</p>
</li>
<li><p>输出流接收输出字节并将其发送到某个接收器</p>
</li>
</ul>
<h4 id="2-成员方法："><a href="#2-成员方法：" class="headerlink" title="2.成员方法："></a>2.成员方法：</h4><h5 id="Ⅰ-write-int-b"><a href="#Ⅰ-write-int-b" class="headerlink" title="Ⅰ. write(int b)"></a>Ⅰ. write(int b)</h5><ul>
<li>将指定的字节写入此文件输出流</li>
<li>返回值类型void，无返回值</li>
<li>需要处理异常</li>
</ul>
<p><img src="https://i.loli.net/2021/08/09/NSiQ5bY9T4O71fL.png" alt="image-20210809111621616"></p>
<h5 id="Ⅱ-write-byte-b"><a href="#Ⅱ-write-byte-b" class="headerlink" title="Ⅱ. write(byte[] b)"></a>Ⅱ. write(byte[] b)</h5><ul>
<li>将 <code>b.length</code>字节从指定的字节数组写入此文件输出流。 </li>
<li>void无返回值类型</li>
</ul>
<h4 id="3-练习：文件复制粘贴"><a href="#3-练习：文件复制粘贴" class="headerlink" title="3.练习：文件复制粘贴"></a>3.练习：文件复制粘贴</h4><p><img src="https://i.loli.net/2021/08/09/zuyRcKGm3ThYv59.png" alt="image-20210809145503527"></p>
<h3 id="字符编码表"><a href="#字符编码表" class="headerlink" title="字符编码表"></a>字符编码表</h3><h4 id="1-ASCII"><a href="#1-ASCII" class="headerlink" title="1.ASCII"></a>1.ASCII</h4><ul>
<li><p>一个字节中7位就可以表示，对应的字节都是整数</p>
<ul>
<li>0-XXXXXXx</li>
</ul>
<p><img src="https://i.loli.net/2021/08/09/owug8H42manfPUE.png" alt="image-20210809100527848"></p>
</li>
</ul>
<h4 id="2-isi-8859-1"><a href="#2-isi-8859-1" class="headerlink" title="2.isi-8859-1"></a>2.isi-8859-1</h4><ul>
<li>拉丁码表latin。用一个字节数的8位来表<ul>
<li>1-XXXXXX（可以负数）</li>
</ul>
</li>
</ul>
<h4 id="3-GB2312"><a href="#3-GB2312" class="headerlink" title="3.GB2312"></a>3.GB2312</h4><ul>
<li>简体中文码表。包含的是6000-7000中文和符号，用两个字节表示<ul>
<li>其中一部分字节开头1，0</li>
</ul>
</li>
</ul>
<h4 id="4-GBK"><a href="#4-GBK" class="headerlink" title="4.GBK"></a>4.GBK</h4><ul>
<li>目前最常用的中文码表，2万个中和字符，用两个字节表示</li>
</ul>
<h4 id="5-Unicode"><a href="#5-Unicode" class="headerlink" title="5.Unicode"></a>5.Unicode</h4><ul>
<li>国际标准码，无论哪种文字，都用两个字节表示</li>
</ul>
<h4 id="6-UTF-8"><a href="#6-UTF-8" class="headerlink" title="6.UTF-8"></a>6.UTF-8</h4><ul>
<li>基于unicode，一个字节就可以存储数据，更加标准化，目前应用最广</li>
</ul>
<h4 id="能识别中文的码表：GBK，UTF-8"><a href="#能识别中文的码表：GBK，UTF-8" class="headerlink" title="能识别中文的码表：GBK，UTF-8"></a>能识别中文的码表：GBK，UTF-8</h4><ul>
<li>编码：数据—&gt;十进制</li>
<li>解码：十进制—&gt;数据</li>
</ul>
<h3 id="五、字符输入流Reader"><a href="#五、字符输入流Reader" class="headerlink" title="五、字符输入流Reader"></a>五、字符输入流Reader</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h4><ul>
<li><p>抽象类</p>
<ul>
<li><p>已知实现子类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BufferedReader ， CharArrayReader ， FilterReader ， InputStreamReader ， PipedReader ， StringReader ， URLReader </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>子类必须实现的唯一方法read和close</p>
</li>
<li><p>常量</p>
<ul>
<li>Object lock 用于同步此流上的操作的对象</li>
</ul>
</li>
<li><p>不管代码是否出现异常，流通道一旦打开就需要关闭</p>
<ul>
<li>通过final关流</li>
</ul>
</li>
<li><p>平台默认编码格式</p>
</li>
</ul>
<h4 id="2-构造方法"><a href="#2-构造方法" class="headerlink" title="2.构造方法"></a>2.构造方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span>  <span class="title">Reader</span><span class="params">()</span> 创建一个新的字符流阅读器，其关键部分将在阅读器本身上同步。  </span></span><br><span class="line"><span class="function"><span class="keyword">protected</span>  <span class="title">Reader</span><span class="params">(Object lock)</span> 创建一个新的字符流阅读器，其关键部分将在给定对象上同步。  </span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>

<h4 id="3-成员方法"><a href="#3-成员方法" class="headerlink" title="3.成员方法"></a>3.成员方法</h4><h5 id="Ⅰ-read-读一个字符"><a href="#Ⅰ-read-读一个字符" class="headerlink" title="Ⅰ.read() 读一个字符"></a>Ⅰ.read() 读一个字符</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Reader r = <span class="keyword">new</span> FileReader(<span class="string">&quot;H:\\瑞通java\\第六周\\Day1\\a.txt&quot;</span>);</span><br><span class="line">       System.out.println(r.read());   <span class="comment">//调用read方法，直接返回的是第一个字符的ASCLL码\</span></span><br></pre></td></tr></table></figure>

<ul>
<li>返回值int类型，是ASCII码</li>
</ul>
<h5 id="Ⅱ-read-char-cbuf-将字符读入数组"><a href="#Ⅱ-read-char-cbuf-将字符读入数组" class="headerlink" title="Ⅱ.read(char[] cbuf) 将字符读入数组"></a>Ⅱ.read(char[] cbuf) 将字符读入数组</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">     <span class="comment">//创建char数组</span></span><br><span class="line">     <span class="keyword">char</span>[] arr = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">20</span>];</span><br><span class="line"><span class="comment">//  System.out.println(r.read(arr));直接输出得到数据长度</span></span><br><span class="line">       <span class="keyword">int</span> a =<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">while</span>((a=r.read(arr))!=-<span class="number">1</span>)&#123;</span><br><span class="line">          System.out.println(<span class="keyword">new</span> String(arr,<span class="number">0</span>,a));</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//输出abcabcd</span></span><br></pre></td></tr></table></figure>





<h4 id="4-已知实现子类FileReader"><a href="#4-已知实现子类FileReader" class="headerlink" title="4.已知实现子类FileReader"></a>4.已知实现子类FileReader</h4><ul>
<li><p>构造方法</p>
<p><img src="https://i.loli.net/2021/08/09/JEez4RglGXYot8v.png" alt="image-20210809162653985"></p>
</li>
<li><p><img src="https://i.loli.net/2021/08/09/KzcWFLJmxIDwX8j.png" alt="image-20210809162701581"></p>
</li>
<li><p>继承体系</p>
<p><img src="https://i.loli.net/2021/08/10/ayLneKBhlFmp4Xi.png" alt="image-20210810100121551"></p>
</li>
<li><p>编码和解码时 格式需一样 UTF-8</p>
</li>
</ul>
<h3 id="六、字符输出流Writer"><a href="#六、字符输出流Writer" class="headerlink" title="六、字符输出流Writer"></a>六、字符输出流Writer</h3><h4 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1.概述"></a>1.概述</h4><ul>
<li><p>抽象类</p>
<ul>
<li><p>已知实现子类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BufferedWriter ， CharArrayWriter ， FilterWriter ， OutputStreamWriter ， PipedWriter ， PrintWriter ， StringWriter </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>常量</p>
<ul>
<li><code>lock</code> 用于同步此流上的操作对象</li>
</ul>
</li>
<li><p>平台默认编码格式</p>
</li>
<li><p>在操作完成后需要使用  flush/close</p>
<ul>
<li>刷新或关流</li>
</ul>
</li>
</ul>
<h4 id="2-构造方法-1"><a href="#2-构造方法-1" class="headerlink" title="2.构造方法"></a>2.构造方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span>  <span class="title">Writer</span><span class="params">()</span> 创建一个新的人物流作家，其关键部分将在作者本身上同步。  </span></span><br><span class="line"><span class="function"><span class="keyword">protected</span>  <span class="title">Writer</span><span class="params">(Object lock)</span> 创建一个新的字符流写入器，其关键部分将在给定对象上进行同步。  </span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>



<h4 id="3-成员方法-1"><a href="#3-成员方法-1" class="headerlink" title="3.成员方法"></a>3.成员方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span>[] cbuf)</span> 写入一个字符数组。  </span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span>[] cbuf, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> 写入字符数组的一部分。  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> c)</span> 写一个字符  </span></span><br></pre></td></tr></table></figure>



<h4 id="4-已知实现子类FileWriter"><a href="#4-已知实现子类FileWriter" class="headerlink" title="4.已知实现子类FileWriter"></a>4.已知实现子类FileWriter</h4><h5 id="Ⅰ-构造方法"><a href="#Ⅰ-构造方法" class="headerlink" title="Ⅰ.构造方法"></a>Ⅰ.构造方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileWriter​(File file) 给一个File对象构造一个FileWriter对象。  </span><br><span class="line">FileWriter​(FileDescriptor fd) 构造与文件描述符关联的FileWriter对象。  </span><br><span class="line">FileWriter​(File file, <span class="keyword">boolean</span> append) 给一个File对象构造一个FileWriter对象。  </span><br><span class="line">FileWriter​(String fileName) 构造一个给定文件名的FileWriter对象。  </span><br><span class="line">FileWriter​(String fileName, <span class="keyword">boolean</span> append) 构造一个FileWriter对象，给出一个带有布尔值的文件名，表示是否附加写入的数据。  </span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="Ⅱ-成员方法"><a href="#Ⅱ-成员方法" class="headerlink" title="Ⅱ.成员方法"></a>Ⅱ.成员方法</h5><p><img src="https://i.loli.net/2021/08/10/FRTDgByn9M5Xqdw.png" alt="image-20210810103320925"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>IO流</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC、数据库连接池</title>
    <url>/2021/09/29/JDBC%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
    <content><![CDATA[<h2 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h2><ul>
<li>JDBC</li>
</ul>
<h3 id="一、JDBC"><a href="#一、JDBC" class="headerlink" title="一、JDBC"></a>一、JDBC</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h4><ul>
<li><p>JDBC是Java操作数据库的一个接口</p>
</li>
<li><p>下载安装Mysql驱动jar包</p>
</li>
<li><p>创建Java项目</p>
<ul>
<li>创建空项目，配置JDK</li>
</ul>
<p><img src="https://i.loli.net/2021/09/21/GtpNlM9ZwcHmr6z.png" alt="image-20210921141421669"></p>
<ul>
<li>添加项目属性中的Libraries依赖的Jar包</li>
<li>添加Modules模块，添加Dependencies依赖Jar包，直接选择项目依赖即可</li>
</ul>
<p><img src="https://i.loli.net/2021/09/21/O4dAwGFxyCtTsmW.png" alt="image-20210921141617021"></p>
</li>
</ul>
<h4 id="2-使用JDBC操作数据库"><a href="#2-使用JDBC操作数据库" class="headerlink" title="2.使用JDBC操作数据库"></a>2.使用JDBC操作数据库</h4><p>Java中连接数据库的类是DataSource</p>
<p>jdbc 4.0 之后不用手动注册Driver驱动，但会自动扫描此文件</p>
<p><img src="https://i.loli.net/2021/09/21/3RaCoVPiAF5m19j.png" alt="image-20210921143640617"></p>
<ul>
<li>连接数据库<ul>
<li>Driver类<ul>
<li>静态代码块<ul>
<li>只加载一次</li>
<li>随着类的加载而加载  DataSource</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>解决插入中文数据库乱码问题<ul>
<li>设置mysql数据库码表为 utf-8<ul>
<li>连接数据库时通过?后面加代码修改</li>
<li>修改my.ini配置文件</li>
</ul>
</li>
</ul>
</li>
<li>没有办法<font color='#d15252'>防止sql的注入攻击</font><ul>
<li>SQL语句在进行条件判断时，只要加了OR就有可能出现注入攻击的情况<ul>
<li>就算前面的条件不成立，只要后面成立，就可以运行</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="3-预处理平台"><a href="#3-预处理平台" class="headerlink" title="3.预处理平台"></a>3.预处理平台</h4><ul>
<li><p>使用prepareStatement(String sql)方法，将SQL语句放</p>
<ul>
<li><p>如果SQL语句中有携带参数，使用 <code>？</code> 代替即可</p>
</li>
<li><p>使用给SQL语句中的 <code>?</code> 赋值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">preparedStatement.setString(<span class="number">1</span>,&quot;abc&quot;);</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/09/21/uDkyYJfdHQWU6e4.png" alt="image-20210921175927294"></p>
<ul>
<li>第一个参数是索引，表示第几个出现的 <code>？</code></li>
<li>第二个参数是赋值</li>
</ul>
</li>
<li><p>调用executeUpdate或查询方法，执行SQL语句</p>
</li>
</ul>
</li>
</ul>
<h4 id="4-JDBC事务"><a href="#4-JDBC事务" class="headerlink" title="4.JDBC事务"></a>4.JDBC事务</h4><h5 id="Ⅰ-获取连接"><a href="#Ⅰ-获取连接" class="headerlink" title="Ⅰ.获取连接"></a>Ⅰ.获取连接</h5><h5 id="Ⅱ-开启事务"><a href="#Ⅱ-开启事务" class="headerlink" title="Ⅱ.开启事务"></a>Ⅱ.开启事务</h5><h5 id="Ⅲ-获取操作sql平台，执行sql语句"><a href="#Ⅲ-获取操作sql平台，执行sql语句" class="headerlink" title="Ⅲ.获取操作sql平台，执行sql语句"></a>Ⅲ.获取操作sql平台，执行sql语句</h5><h5 id="Ⅳ-处理事务"><a href="#Ⅳ-处理事务" class="headerlink" title="Ⅳ.处理事务"></a>Ⅳ.处理事务</h5><ul>
<li>成功：提交事务</li>
<li>失败：回滚事务</li>
</ul>
<p>还没写完，以后补充</p>
]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>JDBC</tag>
        <tag>C3P0</tag>
        <tag>数据库连接池</tag>
      </tags>
  </entry>
  <entry>
    <title>Java链接数据库</title>
    <url>/2021/08/25/Java%E9%93%BE%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h3 id="一、Java链接数据库（Mysql）步骤"><a href="#一、Java链接数据库（Mysql）步骤" class="headerlink" title="一、Java链接数据库（Mysql）步骤"></a>一、Java链接数据库（Mysql）步骤</h3><h4 id="1-第一步：创建项目，并进行测试"><a href="#1-第一步：创建项目，并进行测试" class="headerlink" title="1.第一步：创建项目，并进行测试"></a>1.第一步：创建项目，并进行测试</h4><h4 id="2-第二步：找公司（jar）压缩包-jar"><a href="#2-第二步：找公司（jar）压缩包-jar" class="headerlink" title="2.第二步：找公司（jar）压缩包.jar"></a>2.第二步：找公司（jar）压缩包.jar</h4><ul>
<li>项目中创建lib目录，将jar包拖入<ul>
<li><img src="https://i.loli.net/2021/07/09/dXBtUWDkVezPFoQ.png" alt="image-20210709092306325"></li>
</ul>
</li>
<li>右键jar包，解压<ul>
<li><img src="https://i.loli.net/2021/07/09/r4peszySgwOJHYV.png" alt="image-20210709092237690"></li>
</ul>
</li>
</ul>
<h4 id="3-第三步：将Java链接mysql的相关工具类加载进内存"><a href="#3-第三步：将Java链接mysql的相关工具类加载进内存" class="headerlink" title="3.第三步：将Java链接mysql的相关工具类加载进内存"></a>3.第三步：将Java链接mysql的相关工具类加载进内存</h4><ul>
<li><p>用try{}catch(Exception e){} 或 throws Exception 处理异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="4-第四步：Java链接Mysql"><a href="#4-第四步：Java链接Mysql" class="headerlink" title="4.第四步：Java链接Mysql"></a>4.第四步：Java链接Mysql</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Connection root = DriverManager.getConnection(url:<span class="string">&quot;jdbc:mysql://localhost:3306/m1&quot;</span>,</span><br><span class="line">            user:<span class="string">&quot;root&quot;</span>,</span><br><span class="line">            password:<span class="string">&quot;000909&quot;</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>去除时区异常：</p>
<p>?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true</p>
</blockquote>
<h4 id="5-第五步：获取发送sql的工具"><a href="#5-第五步：获取发送sql的工具" class="headerlink" title="5.第五步：获取发送sql的工具"></a>5.第五步：获取发送sql的工具</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Statement statement = root.createStatement();</span><br></pre></td></tr></table></figure>



<h4 id="6-第六步：定义一个sql语句-查询"><a href="#6-第六步：定义一个sql语句-查询" class="headerlink" title="6.第六步：定义一个sql语句(查询)"></a>6.第六步：定义一个sql语句(查询)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sql = <span class="string">&quot;SELECT *FROM shop&quot;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="7-第七步：发送sql语句-查询-，用resultSet保存返回值"><a href="#7-第七步：发送sql语句-查询-，用resultSet保存返回值" class="headerlink" title="7.第七步：发送sql语句(查询)，用resultSet保存返回值"></a>7.第七步：发送sql语句(查询)，用resultSet保存返回值</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ResultSet resultSet = statement.executeQuery(sql);</span><br></pre></td></tr></table></figure>

<h4 id="8-第八步：调用resuleSet的next-方法，判断是否有值"><a href="#8-第八步：调用resuleSet的next-方法，判断是否有值" class="headerlink" title="8.第八步：调用resuleSet的next()方法，判断是否有值"></a>8.第八步：调用resuleSet的next()方法，判断是否有值</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (resultSet.next())</span><br></pre></td></tr></table></figure>



<h4 id="9-第九步：调用getInt-方法，返回int类型值"><a href="#9-第九步：调用getInt-方法，返回int类型值" class="headerlink" title="9.第九步：调用getInt()方法，返回int类型值"></a>9.第九步：调用getInt()方法，返回int类型值</h4><ul>
<li><img src="https://i.loli.net/2021/07/09/GLfpqFbu4Qg3Cx1.png" alt="image-20210709103344911"></li>
</ul>
<hr>
<h4 id="链接数据库并查询—代码："><a href="#链接数据库并查询—代码：" class="headerlink" title="链接数据库并查询—代码："></a>链接数据库并查询—代码：</h4><p><img src="https://i.loli.net/2021/07/09/m9Q42OWGNr7Io3v.png" alt="image-20210709103439844"></p>
<hr>
<h3 id="二、更新数据库数据"><a href="#二、更新数据库数据" class="headerlink" title="二、更新数据库数据"></a>二、更新数据库数据</h3><ul>
<li><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><ul>
<li><p>链接mysql数据库、try解决异常、获取链接（通道）、获取发送sql语句工具类</p>
</li>
<li><p>创建键盘录入数据</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">           System.out.println(<span class="string">&quot;请输入要修改的学号&quot;</span>);</span><br><span class="line">           <span class="keyword">int</span> id = sc.nextInt();</span><br><span class="line">           System.out.println(<span class="string">&quot;请输入要修改的姓名&quot;</span>);</span><br><span class="line">           String name = sc.next();</span><br></pre></td></tr></table></figure>

<ul>
<li>打包sql语句</li>
</ul>
<p><code>String sql = &quot;UPDATE student SET sname = &#39;&quot;+name+&quot;&#39; WHERE sid = &quot;+id;</code></p>
<ul>
<li>发送执行sql语句</li>
</ul>
<p><code>int i = statement.executeUpdate(sql);</code></p>
<h5 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h5></li>
</ul>
<p><img src="https://i.loli.net/2021/06/30/fFMH28bBwjXsoSz.png" alt="image-20210630143254189"></p>
<hr>
<h3 id="三、添加数据库数据"><a href="#三、添加数据库数据" class="headerlink" title="三、添加数据库数据"></a>三、添加数据库数据</h3><ul>
<li><h5 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h5><ul>
<li><p>链接mysql数据库、try解决异常、获取链接（通道）、获取发送sql语句工具类</p>
</li>
<li><p>创建键盘录入数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">         System.out.println(<span class="string">&quot;请输入要添加的id&quot;</span>);</span><br><span class="line">         <span class="keyword">int</span> id = sc.nextInt();</span><br><span class="line">         System.out.println(<span class="string">&quot;请输入要添加的姓名&quot;</span>);</span><br><span class="line">         String name  = sc.next();</span><br></pre></td></tr></table></figure></li>
<li><p>打包sql语句</p>
<p>[^sql语句]: <code>String sql = &quot;INSERT INTO student (sid,sname) VALUES (&quot;+id+&quot;,&#39;&quot;+name+&quot;&#39;)&quot;;</code></p>
</li>
<li><p>发送执行sql语句</p>
<p><code>int i = statement.executeUpdate(sql);</code></p>
</li>
</ul>
<p>  [^executeUpdate]: 用于添加，更新，删除数据</p>
</li>
<li><h5 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h5><p><img src="https://i.loli.net/2021/06/30/r93VqIyGYm1xtW8.png" alt="image-20210630140131020"></p>
</li>
</ul>
<hr>
<h3 id="四、删除数据库数据"><a href="#四、删除数据库数据" class="headerlink" title="四、删除数据库数据"></a>四、删除数据库数据</h3><ul>
<li><h5 id="步骤：-1"><a href="#步骤：-1" class="headerlink" title="步骤："></a>步骤：</h5><ul>
<li><p>链接mysql数据库、try解决异常、获取链接（通道）、获取发送sql语句工具类</p>
</li>
<li><p>创建键盘录入数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">          System.out.println(<span class="string">&quot;请输入要删除的学号&quot;</span>);</span><br><span class="line">          <span class="keyword">int</span> id = sc.nextInt();</span><br></pre></td></tr></table></figure></li>
<li><p>打包sql语句</p>
<p><code>String sql = &quot;DELETE FROM student WHERE sid = &quot;+id;</code></p>
</li>
<li><p>发送执行sql语句</p>
<p><code>int i = statement.executeUpdate(sql);</code></p>
</li>
</ul>
</li>
<li><h5 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：<img src="https://i.loli.net/2021/06/30/n14xtuQb2wJVsqh.png" alt="image-20210630143508186"></h5></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>增查删改</tag>
        <tag>案例</tag>
        <tag>数据库</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Java概述和变量</title>
    <url>/2021/08/25/Java%E6%A6%82%E8%BF%B0%E5%92%8C%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h3 id="Java"><a href="#Java" class="headerlink" title="Java!"></a>Java!</h3><ul>
<li><h4 id="什么是Java？"><a href="#什么是Java？" class="headerlink" title="什么是Java？"></a>什么是Java？</h4><ul>
<li>编程语言</li>
<li>开发平台（JVM）</li>
</ul>
</li>
</ul>
<h3 id="一、编程语言"><a href="#一、编程语言" class="headerlink" title="一、编程语言"></a>一、编程语言</h3><ul>
<li><h4 id="布置平台"><a href="#布置平台" class="headerlink" title="布置平台"></a>布置平台</h4><ul>
<li>官方文档解释：JavaSE是Java平台标准版<ul>
<li>JDK</li>
</ul>
</li>
</ul>
</li>
<li><h4 id="下载JDK"><a href="#下载JDK" class="headerlink" title="下载JDK"></a>下载JDK</h4></li>
<li><h4 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h4><ul>
<li>开发工具</li>
<li>源代码</li>
<li>JRE：JDK包含JRE</li>
</ul>
</li>
<li><h4 id="使用JDK"><a href="#使用JDK" class="headerlink" title="使用JDK"></a>使用JDK</h4><ul>
<li><p>JDK安装目录bin文件夹下</p>
</li>
<li><p>[^javac.exe]: 编译</p>
</li>
<li><p>[^java.exe]: 运行</p>
</li>
</ul>
</li>
<li><p>配置环境变量</p>
<ul>
<li>官网添加JDK路径到系统Path变量</li>
<li>动态获取%JAVA_HOME%</li>
</ul>
</li>
</ul>
<h3 id="二、编程语言"><a href="#二、编程语言" class="headerlink" title="二、编程语言"></a>二、编程语言</h3><ul>
<li><p>基本单位</p>
<ul>
<li>class 类</li>
</ul>
</li>
<li><p>最简单的java程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>类名要与文件名一致，后缀为.class</li>
</ul>
</li>
<li><p>main方法是程序的入口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="三、学习Java"><a href="#三、学习Java" class="headerlink" title="三、学习Java"></a>三、学习Java</h3><ul>
<li>java语言的核心本质是对数据的操作</li>
<li>数据的操作最基础的是存数据和取数据</li>
</ul>
<h3 id="四、存取数据"><a href="#四、存取数据" class="headerlink" title="四、存取数据"></a>四、存取数据</h3><ul>
<li><p>变量</p>
<ul>
<li><p>一个可以变化的量</p>
<ul>
<li>本质：存储一个数据</li>
</ul>
</li>
<li><p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据类型 变量名 = 数值 ；</span><br></pre></td></tr></table></figure></li>
<li><p>注意事项</p>
<ul>
<li>使用变量时需要注意变量有没有数据<ul>
<li>没有数据时，可以完成赋值操作</li>
<li>但是不能完成取值操</li>
</ul>
</li>
<li>变量在{ }内有效，且不能定义同名变量（作用域）</li>
<li>{ } ：代码块，独立存在，运行结束后立即释放，提高内存使用率</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="五、Java的数据类型"><a href="#五、Java的数据类型" class="headerlink" title="五、Java的数据类型"></a>五、Java的数据类型</h3><ul>
<li>每一个数据类型的存储范围都不一样，为了提高内存的使用率</li>
</ul>
<h4 id="1-整数"><a href="#1-整数" class="headerlink" title="1.整数"></a>1.整数</h4><table>
<thead>
<tr>
<th align="left">整数</th>
<th>长度</th>
</tr>
</thead>
<tbody><tr>
<td align="left">byte</td>
<td>8bit</td>
</tr>
<tr>
<td align="left">short</td>
<td>16bit</td>
</tr>
<tr>
<td align="left"><strong>int(默认)</strong></td>
<td>32bit</td>
</tr>
<tr>
<td align="left">long</td>
<td>64bit</td>
</tr>
</tbody></table>
<ul>
<li>在Java中，出现的所有整数，默认都是int类型</li>
<li>byte在存整数时，如果int类型整数在byte范围内，byte会自动完成转换 int—byte</li>
</ul>
<h4 id="2-小数"><a href="#2-小数" class="headerlink" title="2.小数"></a>2.小数</h4><table>
<thead>
<tr>
<th>小数</th>
<th>长度</th>
</tr>
</thead>
<tbody><tr>
<td>float</td>
<td>浮点型 32bit</td>
</tr>
<tr>
<td><strong>double(默认)</strong></td>
<td>双精度 64bit</td>
</tr>
</tbody></table>
<ul>
<li>长整型long后缀使用L标记，表明是长整型</li>
<li>单精度float后缀使用F标记，表名是单精度</li>
</ul>
<h4 id="3-布尔类型"><a href="#3-布尔类型" class="headerlink" title="3.布尔类型"></a>3.布尔类型</h4><ul>
<li>ture</li>
<li>false</li>
</ul>
<h3 id="六、变量补充知识点"><a href="#六、变量补充知识点" class="headerlink" title="六、变量补充知识点"></a>六、变量补充知识点</h3><ul>
<li><p>两个整数相除，得到的是整数部分</p>
</li>
<li><p>数据类型之间的转换</p>
<ul>
<li><p>隐式转换（小的自动转大）</p>
</li>
<li><p>强制转换（大转小）</p>
<ul>
<li><p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">目标类型 变量名 = （目标类型）被转换数据</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="七、进制"><a href="#七、进制" class="headerlink" title="七、进制"></a>七、进制</h3><h4 id="1-什么是进制？"><a href="#1-什么是进制？" class="headerlink" title="1.什么是进制？"></a>1.什么是进制？</h4><ul>
<li>逢几进一</li>
</ul>
<h4 id="2-Java常见的进制"><a href="#2-Java常见的进制" class="headerlink" title="2.Java常见的进制"></a>2.Java常见的进制</h4><ul>
<li>二进制：0b</li>
<li>八进制：0</li>
<li>十进制：默认</li>
<li>十六进制：0x</li>
</ul>
<h4 id="3-进制间的转换"><a href="#3-进制间的转换" class="headerlink" title="3.进制间的转换"></a>3.进制间的转换</h4><ul>
<li><p>任意进制到十进制</p>
<ul>
<li><p>系数 * 基数的权次幂相加</p>
<ul>
<li>系数：位数是几</li>
<li>基数：原来的进制</li>
<li>权：从个位开始，从0向左依次增加</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">x * y^z</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>十进制到任意进制</p>
<ul>
<li>除以基数，倒取余数</li>
</ul>
</li>
<li><p>二进制 &lt;==&gt;八进制</p>
<ul>
<li>421码</li>
</ul>
</li>
<li><p>二进制 &lt;==&gt; 十六进制</p>
<ul>
<li>8421码</li>
</ul>
</li>
</ul>
<h4 id="4-源码、反码、补码"><a href="#4-源码、反码、补码" class="headerlink" title="4.源码、反码、补码"></a>4.源码、反码、补码</h4><ul>
<li>在计算机中，二进制的运算，是以补码的形式进行的(0为正，1为负)</li>
</ul>
<ul>
<li><p>正数：源码 = 反码 = 补码</p>
</li>
<li><p>负数：源码不变</p>
<p>​            反码：符号位不变，其余按位取反</p>
<p>​            补码：反码+1</p>
</li>
</ul>
<h3 id="八、运算符"><a href="#八、运算符" class="headerlink" title="八、运算符"></a>八、运算符</h3><h4 id="1-什么是运算符"><a href="#1-什么是运算符" class="headerlink" title="1.什么是运算符"></a>1.什么是运算符</h4><ul>
<li>运算符是对一个、两个或三个操作数执行特定操作，然后返回结果的特殊符号。</li>
</ul>
<h4 id="2-运算符的分类"><a href="#2-运算符的分类" class="headerlink" title="2.运算符的分类"></a>2.运算符的分类</h4><h5 id="①算数运算符"><a href="#①算数运算符" class="headerlink" title="①算数运算符"></a>①算数运算符</h5><table>
<thead>
<tr>
<th>算数运算符</th>
<th>效果</th>
</tr>
</thead>
<tbody><tr>
<td>+ 、 -</td>
<td>加、减</td>
</tr>
<tr>
<td>* 、/</td>
<td>乘、除</td>
</tr>
<tr>
<td>%</td>
<td>取模（即取余）</td>
</tr>
</tbody></table>
<h5 id="②一元运算符"><a href="#②一元运算符" class="headerlink" title="②一元运算符"></a>②一元运算符</h5><ul>
<li>只需要一个操作数，就可以对其进行相应的操作</li>
</ul>
<table>
<thead>
<tr>
<th>一元运算符</th>
<th>效果</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>表示正值（可省略）</td>
</tr>
<tr>
<td>-</td>
<td>表示负值，即否定表达式</td>
</tr>
<tr>
<td>++</td>
<td>将值+1</td>
</tr>
<tr>
<td>–</td>
<td>将值-1</td>
</tr>
<tr>
<td>!</td>
<td>反转布尔值</td>
</tr>
</tbody></table>
<p><img src="https://i.loli.net/2021/07/19/UKrzgyR9e5xWNfj.png" alt="image-20210719160154418"></p>
<blockquote>
<p>a++;        ++b;</p>
<ul>
<li>单独使用时，++即自加一，–即自减一，放在前后效果相同</li>
</ul>
<p>int b = a ++;    int c = –b;</p>
<ul>
<li>参与运算时，放在前即先++或–， 放在后面则先运算再++、–</li>
</ul>
</blockquote>
<h5 id="③比较运算符"><a href="#③比较运算符" class="headerlink" title="③比较运算符"></a>③比较运算符</h5><ul>
<li>返回布尔类型的值，即true，false</li>
</ul>
<table>
<thead>
<tr>
<th>比较运算符</th>
<th>效果</th>
</tr>
</thead>
<tbody><tr>
<td>==</td>
<td>等于</td>
</tr>
<tr>
<td>!=</td>
<td>不等于</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
</tr>
</tbody></table>
<h5 id="④条件运算符"><a href="#④条件运算符" class="headerlink" title="④条件运算符"></a>④条件运算符</h5><ul>
<li>用来连接比较表达式（即布尔类型）表达式</li>
</ul>
<table>
<thead>
<tr>
<th>逻辑运算符</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;   AND(与)</td>
<td>有false则false，两个true则true</td>
</tr>
<tr>
<td>|    OR(或)</td>
<td>有true则true，两个false则false</td>
</tr>
<tr>
<td>^    XOR(异或)</td>
<td>相同false，不同true</td>
</tr>
<tr>
<td>!     NOT(非)</td>
<td>结论相反</td>
</tr>
<tr>
<td>&amp;&amp;  AND(短路)</td>
<td>短路效果，即左边有false，右边不执行</td>
</tr>
<tr>
<td>||   OR(短路)</td>
<td>短路效果，即左边有true，右边不执行</td>
</tr>
</tbody></table>
<blockquote>
<p>Java中，若要表达3&lt;x&lt;6 ，应写为 x&gt;3 &amp; x&lt;6</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>什么是Java</tag>
        <tag>变量</tag>
        <tag>数据类型</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven</title>
    <url>/2021/09/29/Maven/</url>
    <content><![CDATA[<h2 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h2><ul>
<li>Maven </li>
</ul>
<h3 id="一、Maven"><a href="#一、Maven" class="headerlink" title="一、Maven"></a>一、Maven</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h4><ul>
<li>Apache产品</li>
<li>Maven是一个项目管理工具，可以对Java项目进行构建、依赖管理</li>
</ul>
<h4 id="2-下载"><a href="#2-下载" class="headerlink" title="2.下载"></a>2.下载</h4><p><a href="https://maven.apache.org/download.cgi">Maven – Download Apache Maven</a></p>
<h4 id="3-安装"><a href="#3-安装" class="headerlink" title="3.安装"></a>3.安装</h4><ul>
<li><p>绿色软件</p>
</li>
<li><p>动态获取方式配置环境变量（必须配置好jdk的环境变量）</p>
<ul>
<li><p>添加MAVEN_HOMT环境变量，存放解压maven的地址</p>
</li>
<li><p>在PATH环境变量中添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%MAVEN_HOME%\bin</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/09/23/nHyf3ejgoqBM19F.png" alt="image-20210923202621165"></p>
<h3 id="二、Maven仓库"><a href="#二、Maven仓库" class="headerlink" title="二、Maven仓库"></a>二、Maven仓库</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h4><ul>
<li><p>Maven仓库是项目中依赖的第三方库</p>
<ul>
<li>存各种依赖（jar包）<ul>
<li>主要是jar，还有war,zip等</li>
</ul>
</li>
</ul>
</li>
<li><p>仓库的分类</p>
<ul>
<li><p>本地</p>
<p><img src="https://i.loli.net/2021/09/23/o82E6H4tTbXUCQc.png" alt="image-20210923092716648"></p>
<ul>
<li>第一次执行maven命令时创建</li>
<li>maven的安装设备</li>
</ul>
<p><img src="https://i.loli.net/2021/09/23/y5IVlAFEW2LHrTz.png" alt="image-20210923092548630"></p>
</li>
<li><p>中央</p>
<p><img src="https://i.loli.net/2021/09/23/SVCEct2z4YvfnZJ.png" alt="image-20210923092918607"></p>
<ul>
<li>由Maven社区提供的仓库，提供了一个URL，使用中央仓库</li>
<li><a href="http://search.maven.org/#browse">http://search.maven.org/#browse</a></li>
<li>当本地仓库找不到我们想要的依赖，需要去中央仓库下载（公司服务器）</li>
</ul>
</li>
<li><p>远程</p>
<ul>
<li>国外</li>
<li>阿里</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="2-本地仓库设置"><a href="#2-本地仓库设置" class="headerlink" title="2.本地仓库设置"></a>2.本地仓库设置</h4><ul>
<li><p>解压maven安装包</p>
</li>
<li><p>在我们的本地创建一个目录为repository作为本地仓库</p>
</li>
<li><p>修改配置文件</p>
<ul>
<li><p>修改本地仓库的路径</p>
<ul>
<li>这里的路径填写创建repository文件的位置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\Maven\repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改mirror  –&gt; 远程仓库的路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span>            </span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span>          			<span class="tag">&lt;<span class="name">name</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span>       	    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span>  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>           <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="三、创建Maven项目"><a href="#三、创建Maven项目" class="headerlink" title="三、创建Maven项目"></a>三、创建Maven项目</h3><ul>
<li>创建Maven项目</li>
<li>找到seting —&gt; maven</li>
</ul>
<p><img src="https://i.loli.net/2021/09/23/SevJ6xTCO41VQPA.png" alt="image-20210923095041050"></p>
<ul>
<li>设置maven的安装目录（解压目录）</li>
<li>选择maven我们修改好的配置文件</li>
<li>选择本地仓库位置<ul>
<li>需要注意的是，这里本地仓库的位置需要和Setting中设定的本地仓库位置一致，不然会报错</li>
</ul>
</li>
</ul>
<h3 id="四、改造Maven项目-JavaEE"><a href="#四、改造Maven项目-JavaEE" class="headerlink" title="四、改造Maven项目(JavaEE)"></a>四、改造Maven项目(JavaEE)</h3><h4 id="1-新建web项目"><a href="#1-新建web项目" class="headerlink" title="1.新建web项目"></a>1.新建web项目</h4><ul>
<li><p>新建目录webapp</p>
<ul>
<li><p>选择项目结构，选择Facets，添加web工程</p>
<p><img src="https://i.loli.net/2021/09/23/UoryOBj2Hd5WMzs.png" alt="image-20210923203110680"></p>
</li>
<li><p>选择在已有项目中添加</p>
<p><img src="https://i.loli.net/2021/09/23/DScwIzvrU1mAdBC.png" alt="image-20210923203132532"></p>
</li>
<li><p>修改新建web项目的路径</p>
<ul>
<li>项目名\web项目名\WEB-INF\ <font color='#d15252'>web.xml</font><ul>
<li>不要忘记web.xml配置文件</li>
</ul>
</li>
<li>下面的路径和上方相同，选择web项目路径即可</li>
</ul>
<p><img src="https://i.loli.net/2021/09/23/guzOk5RAspGLQVy.png" alt="image-20210923203204132"></p>
</li>
<li><p>如果创建WEB项目时出错，不要修改，直接删除，重新创建</p>
</li>
</ul>
</li>
<li><p>添加依赖</p>
<ul>
<li>Jar包都是有坐标的，当使用中央仓库或远程仓库时，有很多Jar包<ul>
<li>公司名：<ul>
<li>依赖的名称</li>
<li>依赖的版本号</li>
</ul>
</li>
</ul>
</li>
<li>在pom.xml文件中，添加需要依赖的jar包</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/09/23/VqG4iTPKpgNrbMw.png" alt="image-20210923103218412"></p>
<ul>
<li>添加Tomcat，暂时用传统的方式<ul>
<li>需要添加项目结构中Artifacts中WEB应用</li>
<li><img src="https://i.loli.net/2021/09/23/PnAyVorhUaKS9j4.png" alt="image-20210923204619333"></li>
</ul>
</li>
</ul>
<h4 id="2-修改默认项目maven地址"><a href="#2-修改默认项目maven地址" class="headerlink" title="2.修改默认项目maven地址"></a>2.修改默认项目maven地址</h4><ul>
<li><p>修改新建项目时，默认的maven配置</p>
<ul>
<li>节省时间，不用每次新建项目重新配置maven项目</li>
</ul>
<p><img src="https://i.loli.net/2021/09/23/M4tlaAKBEfyoLGR.png" alt="image-20210923202937432"></p>
</li>
</ul>
<p><img src="https://i.loli.net/2021/09/23/1Pj8MFywphgKmlJ.png" alt="image-20210923202951508"></p>
<h3 id="五、使用Maven模板"><a href="#五、使用Maven模板" class="headerlink" title="五、使用Maven模板"></a>五、使用Maven模板</h3><h4 id="1-步骤"><a href="#1-步骤" class="headerlink" title="1.步骤"></a>1.步骤</h4><ul>
<li>新建Maven工程<ul>
<li>也可以新建空项目，配置环境之后，添加Maven模块 </li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/09/23/qzAPf4R3ILZEQkb.png" alt="image-20210923205116729"></p>
<ul>
<li>quickstrat：创建普通项目</li>
<li>maven-webabb：创建Web项目<ul>
<li>cocoon-22也要webapp，不使用它</li>
</ul>
</li>
</ul>
<h3 id="六、细节"><a href="#六、细节" class="headerlink" title="六、细节"></a>六、细节</h3><h4 id="1-修剪pom文件"><a href="#1-修剪pom文件" class="headerlink" title="1.修剪pom文件"></a>1.修剪pom文件</h4><p><img src="https://i.loli.net/2021/09/23/E71VO5oyHNZQwgk.png" alt="image-20210923210337197"></p>
<ul>
<li>maven版本号，可要可不要</li>
<li>下面四个必须有<ul>
<li>packaging表示以后将其打成war包</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/09/23/vgi13dVo6NUPZz7.png" alt="image-20210923210445020"></p>
<ul>
<li>可以不要</li>
</ul>
<p><img src="https://i.loli.net/2021/09/23/nysqw7Al4Pi2OTx.png" alt="image-20210923210508494"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>表示你的maven版本用的是哪一个<font color='#d15252'>jdk</font></p>
<ul>
<li>这里设置的jdk只对当前有效</li>
</ul>
<p><img src="https://i.loli.net/2021/09/23/gwDJ6tlbzOa1UBs.png" alt="image-20210923210559866"></p>
<ul>
<li>也可以删除，但是需要修改设置，改为当前你使用的jdk版本</li>
<li>一劳永逸</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://i.loli.net/2021/09/23/E5YNOTKZ3AqBUfj.png" alt="image-20210923210710499"></p>
<ul>
<li>junit依赖，可以删除</li>
</ul>
<p><img src="https://i.loli.net/2021/09/23/qScZdukRQKB5Lx4.png" alt="image-20210923210734303"></p>
<ul>
<li>build依赖，暂时没学，删掉</li>
</ul>
<h4 id="2-pom文件"><a href="#2-pom文件" class="headerlink" title="2.pom文件"></a>2.pom文件</h4><h5 id="Ⅰ-依赖"><a href="#Ⅰ-依赖" class="headerlink" title="Ⅰ.依赖"></a>Ⅰ.依赖</h5><ul>
<li>依赖类似于Jar包</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在这里添加你的依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ldapjdk<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  <span class="comment">&lt;!-- 库名称，也可以自定义 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ldapjdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    <span class="comment">&lt;!--库名称，也可以自定义--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!--版本号--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span> <span class="comment">&lt;!--作用域--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;basedir&#125;\src\lib\ldapjdk.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span> <span class="comment">&lt;!--项目根目录下的lib文件夹下--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如果要添加多个依赖，在dependencies标签中添加多个dependency即可</li>
</ul>
<h6 id="依赖的三种导入方法"><a href="#依赖的三种导入方法" class="headerlink" title="依赖的三种导入方法"></a>依赖的三种导入方法</h6><ul>
<li><p>maven中查找Jar包坐标</p>
<ul>
<li>可以百度</li>
<li>也可以在maven官网依赖库中搜索 <a href="https://mvnrepository.com/">https://mvnrepository.com/</a></li>
<li>idea自带，鼠标右击，选择Generate，选择Dependency<ul>
<li>搜索想要依赖即可</li>
</ul>
</li>
</ul>
</li>
<li><p>导入新的依赖后，记得刷新Maven项目，进行下载</p>
</li>
</ul>
<h5 id="Ⅱ-插件"><a href="#Ⅱ-插件" class="headerlink" title="Ⅱ.插件"></a>Ⅱ.插件</h5><ul>
<li>插件类似于软件</li>
</ul>
<p>Maven提供了两种类型的插件</p>
<ul>
<li>Build plugins<ul>
<li> 在构建时执行，并在 pom.xml 的 元素中配置</li>
</ul>
</li>
<li>Reporting plugins<ul>
<li>在网站生成过程中执行，并在 pom.xml 的 元素中配置</li>
</ul>
</li>
</ul>
<ul>
<li>官网查找插件<ul>
<li><a href="https://maven.apache.org/plugins/">Maven – Available Plugins (apache.org)</a></li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/09/23/JQtvn1BEzDY5Moj.png" alt="image-20210923211953980"></p>
<ul>
<li><p>在pom.xml文件中使用插件</p>
<p><img src="https://i.loli.net/2021/09/23/3IfH4bKrJGgAQk2.png" alt="image-20210923212746432"></p>
</li>
</ul>
<h3 id="七、Maven的常用命令"><a href="#七、Maven的常用命令" class="headerlink" title="七、Maven的常用命令"></a>七、Maven的常用命令</h3><h4 id="1-Maven的生命周期"><a href="#1-Maven的生命周期" class="headerlink" title="1.Maven的生命周期"></a>1.Maven的生命周期</h4><ul>
<li>清理 — 编译 — 测试 — 报告 — 打包 — 部署</li>
</ul>
<p><img src="https://i.loli.net/2021/09/23/KTnW4SZY5hazivV.png" alt="image-20210923213703484"></p>
<h4 id="2-常用命令"><a href="#2-常用命令" class="headerlink" title="2.常用命令"></a>2.常用命令</h4><table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>clean</td>
<td>清理target目录</td>
</tr>
<tr>
<td>compile</td>
<td>完成编译target目录</td>
</tr>
<tr>
<td>test</td>
<td>进行测试，target下生成三个目录（测试报告）</td>
</tr>
<tr>
<td>package</td>
<td>打包项目，放在target目录下</td>
</tr>
<tr>
<td>install</td>
<td>将打包好的包安装到本地仓库中</td>
</tr>
</tbody></table>
<ul>
<li>target目录类似于Java中的Out根目录</li>
</ul>
<h4 id="3-依赖管理"><a href="#3-依赖管理" class="headerlink" title="3.依赖管理"></a>3.依赖管理</h4><h5 id="Ⅰ-依赖的传递性"><a href="#Ⅰ-依赖的传递性" class="headerlink" title="Ⅰ.依赖的传递性"></a>Ⅰ.依赖的<font color='#d15252'>传递性</font></h5><ul>
<li>如果多个模块之间具有耦合性，比如一个模块需要依赖另外一个模块的Jar包<ul>
<li>可以直接复制依赖的坐标进行使用</li>
</ul>
</li>
</ul>
<h5 id="Ⅱ-依赖的可选性"><a href="#Ⅱ-依赖的可选性" class="headerlink" title="Ⅱ.依赖的可选性"></a>Ⅱ.依赖的可选性</h5><ul>
<li><p>即让依赖只能在本模块中使用</p>
</li>
<li><p>在依赖中添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>为依赖添加可选性，添加之后，别的模块不能通过坐标使用该依赖</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/09/24/MSpqWZRPgNldY4u.png" alt="image-20210924172912820"></p>
<h5 id="Ⅲ-依赖的筛选"><a href="#Ⅲ-依赖的筛选" class="headerlink" title="Ⅲ.依赖的筛选"></a>Ⅲ.依赖的筛选</h5><ul>
<li><p>如果不想使用模块中的其中某一个依赖，可以通过依赖筛选做到</p>
</li>
<li><p>在依赖中添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="4-依赖的范围"><a href="#4-依赖的范围" class="headerlink" title="4.依赖的范围"></a>4.依赖的范围</h4><ul>
<li>作用域</li>
</ul>
<table>
<thead>
<tr>
<th>scope作用域</th>
<th>main</th>
<th>test（测试模块）</th>
<th>package</th>
</tr>
</thead>
<tbody><tr>
<td>compile（默认）</td>
<td>T</td>
<td>T</td>
<td>T</td>
</tr>
<tr>
<td>test</td>
<td></td>
<td>T</td>
<td></td>
</tr>
<tr>
<td>provided</td>
<td>T</td>
<td>T</td>
<td></td>
</tr>
<tr>
<td>runtime</td>
<td></td>
<td></td>
<td>T</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis</title>
    <url>/2021/09/29/Mybatis/</url>
    <content><![CDATA[<h2 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h2><ul>
<li>Mybatis</li>
</ul>
<p>[TOC]</p>
<h3 id="一、Mybatis"><a href="#一、Mybatis" class="headerlink" title="一、Mybatis"></a>一、Mybatis</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h4><ul>
<li>现在由Github托管</li>
<li>最新版本MyBatis3 (3.5.7)</li>
<li>Dao层（数据持久层） service（业务层） controller（表现层） <ul>
<li><strong>Mybatis</strong>是属于三层架构中的Dao层（数据持久层）</li>
<li>原来的数据持久层，是通过JDBC实现的，但是JDBC有很多弊端<ul>
<li>频繁的获取连接</li>
<li>sql语句在statement  Java代码中</li>
</ul>
</li>
<li>类似于JS和JQ的关系</li>
</ul>
</li>
</ul>
<h4 id="2-Mybatis的使用"><a href="#2-Mybatis的使用" class="headerlink" title="2.Mybatis的使用"></a>2.Mybatis的使用</h4><p>通过官方文档学习<a href="https://mybatis.org/mybatis-3/zh/index.html">mybatis – MyBatis 3 | 简介</a></p>
<h5 id="Ⅰ-第一步：创建项目"><a href="#Ⅰ-第一步：创建项目" class="headerlink" title="Ⅰ. 第一步：创建项目"></a>Ⅰ. 第一步：创建项目</h5><p>创建一个Maven项目，添加依赖，自动下载Jar包</p>
<p><img src="https://i.loli.net/2021/09/26/UqizoWl3S2peNVm.png" alt="image-20210926121535802"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>x.x.x<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意：项目不能嵌套项目，项目只能嵌套模块，所以我们创建项目的时候，最好直接创建空项目，然后添加模块</li>
</ul>
<p><img src="https://i.loli.net/2021/09/26/qQnCNvAt8WaXl6O.png" alt="image-20210926122015758"></p>
<ul>
<li>如果出现找不到类的问题，勾选此选项</li>
</ul>
<h5 id="Ⅱ-第二步：构建-SqlSessionFactiry"><a href="#Ⅱ-第二步：构建-SqlSessionFactiry" class="headerlink" title="Ⅱ. 第二步：构建 SqlSessionFactiry"></a>Ⅱ. 第二步：构建 SqlSessionFactiry</h5><ul>
<li><p>通过XML文件构建<strong>SQLSessionFactiry</strong></p>
<p><img src="https://i.loli.net/2021/09/26/F67q8a1PAiJBjLy.png" alt="image-20210926123323145"></p>
<ul>
<li>创建mybatis核心配置文件<ul>
<li>创建mybatis-config.xml文件，添加相关的配置信息</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--核心文件的根标签：产品标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    配置连接数据库选项--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        具体的数据库连接管理--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;m1&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            事务的管理，默认选择JDBC--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            选择数据源，默认数据库连接池方式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/m4&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;000909&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/09/26/scztNe4vIPHRwjn.png" alt="image-20210926123549881"></p>
<p>细节问题：mybatis配置需要遵循标签的顺序</p>
<p><img src="https://i.loli.net/2021/09/26/AO7QgvEdPrGb5Ic.png" alt="image-20210926130910720"></p>
<ul>
<li>mappers元素包含了一组映射器，这些映射器的xml映射文件包含了sql代码和映射定义的等信息<ul>
<li>mappers管理所有的映射关系（JavaBean和表字段）</li>
<li>所以单个的映射管理就被称为mapper</li>
<li>映射关系是抽象的，我们应该想办法把抽象作为具体（mybatis是如何管理映射关系的）</li>
<li>Mybatis是通过<font color='#d15252'>配置xml文件</font>的方式对映射关系进行管理</li>
</ul>
</li>
<li>配置mapper xml 文件</li>
</ul>
</li>
</ul>
<h5 id="Ⅲ-导入相关依赖"><a href="#Ⅲ-导入相关依赖" class="headerlink" title="Ⅲ. 导入相关依赖"></a>Ⅲ. 导入相关依赖</h5><ul>
<li><p>导入相关依赖</p>
<ul>
<li><p>mybatis</p>
</li>
<li><p>mysql</p>
</li>
<li><p>junit </p>
<p><img src="https://i.loli.net/2021/09/26/C8zaRt9j5L3iXkK.png" alt="image-20210926130541730"></p>
</li>
</ul>
</li>
</ul>
<h5 id="Ⅳ-配置mapper-xml-文件"><a href="#Ⅳ-配置mapper-xml-文件" class="headerlink" title="Ⅳ. 配置mapper xml 文件"></a>Ⅳ. 配置mapper xml 文件</h5><ul>
<li><p>配置mapper xml 文件 </p>
<ul>
<li><p>用来表述映射关系</p>
</li>
<li><p>xml文件约束</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>mapper映射的关系类型</p>
<p><img src="https://i.loli.net/2021/09/26/13pSihoQWdg27TZ.png" alt="image-20210926131841213"></p>
<ul>
<li><p>在映射配置文件中，使用四种描述映射的类型，用来描述映射的关系</p>
<ul>
<li>映射的关系中，写sql语句，描述映射关系中的**<font color='#d15252'>表</font>**角色</li>
<li>在定义映射关系时，加入<font color='#d15252'><strong>resultMap</strong></font>属性，描述映射中的<font color='#d15252'>JavaBean</font>关系</li>
</ul>
<p><img src="https://i.loli.net/2021/09/26/t4rkFXdVLRJU7Cb.png" alt="image-20210926132541378"></p>
</li>
<li><p>如果，有多个表和JavaBean时，遇到了相同的映射关系名字，比如多个表查询都有findAll</p>
<ul>
<li>可以在mapper标签上添加namespace属性进行标识</li>
</ul>
<p><img src="https://i.loli.net/2021/09/26/BfjMNncK7OoyurV.png" alt="image-20210926132909376"></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="Ⅴ-配置文件中加入mapper映射"><a href="#Ⅴ-配置文件中加入mapper映射" class="headerlink" title="Ⅴ. 配置文件中加入mapper映射"></a>Ⅴ. 配置文件中加入mapper映射</h5><p><img src="https://i.loli.net/2021/09/26/O8AStHMTnKj6CIu.png" alt="image-20210926133457324"></p>
<h5 id="Ⅵ-Java使用Mybatis"><a href="#Ⅵ-Java使用Mybatis" class="headerlink" title="Ⅵ. Java使用Mybatis"></a>Ⅵ. Java使用Mybatis</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取Mybatis核心配置文件，并且将其转换为输入流</span></span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="comment">//获取SqlSessionFactory对象，绑定Mybatis核心文件</span></span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>首先获取Mybatis核心配置文件，并转换为输入流 </p>
<ul>
<li>创建SqlSessionFactory对象，并绑定核心配置文件的输入流</li>
<li>通过SqlSessionFactory获取SqlSession对象</li>
</ul>
<p><img src="https://i.loli.net/2021/09/26/FCR6UJY5cENhzVW.png" alt="image-20210926134945270"></p>
</li>
</ul>
<h4 id="3-Mybatis增查删改四种操作"><a href="#3-Mybatis增查删改四种操作" class="headerlink" title="3.Mybatis增查删改四种操作"></a>3.Mybatis增查删改四种操作</h4><p>注意：映射标签中的SQL语句结尾不要加 <code>;</code> ，否则会报错</p>
<ul>
<li>映射标签中的SQL语句中的占位符用 <code>#&#123;&#125;</code> 表示</li>
<li>如果有更改表结构操作，需要<font color='#d15252'>手动的提交事务</font><ul>
<li>或者在openSession时添加参数true</li>
</ul>
</li>
</ul>
<h5 id="Ⅰ-查询操作"><a href="#Ⅰ-查询操作" class="headerlink" title="Ⅰ.查询操作"></a>Ⅰ.查询操作</h5><ul>
<li><p>在mapper.xml映射文件中添加 select 标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.JavaBean.Students&quot;</span>&gt;</span></span><br><span class="line">--         描述映射关系中的表角色</span><br><span class="line">        select * FROM students</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用sqlSession调用selecet方法，查询数据</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取Mybatis核心配置文件，并且将其转换为输入流</span></span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="comment">//获取SqlSessionFactory对象，绑定Mybatis核心文件</span></span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"><span class="comment">//通过工厂类获取SqlSession</span></span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">//通过sqlSession执行sql语句</span></span><br><span class="line">List&lt;Students&gt; stu = sqlSession.selectList(<span class="string">&quot;students.findAll&quot;</span>);</span><br><span class="line">System.out.println(stu);</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="Ⅱ-插入操作"><a href="#Ⅱ-插入操作" class="headerlink" title="Ⅱ.插入操作"></a>Ⅱ.插入操作</h5><ul>
<li>在mapper.xml映射文件中添加 insert 标签</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    用来描述插入的映射关系--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.JavaBean.Students&quot;</span> &gt;</span></span><br><span class="line">        INSERT INTO students(uname,age) VALUES(#&#123;name&#125;,#&#123;age&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用 parameterType 属性，<font color='#d15252'>传入一个对象</font><ul>
<li>定义SQL语句时，可以直接使用这个对象的成员变量</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取SqlSessionFactory</span></span><br><span class="line">SqlSessionFactory build = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>));</span><br><span class="line"><span class="comment">//获取SqlSession</span></span><br><span class="line">SqlSession sqlSession = build.openSession();</span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">Students s = <span class="keyword">new</span> Students();</span><br><span class="line">s.setName(<span class="string">&quot;白龙马&quot;</span>);</span><br><span class="line">s.setAge(<span class="number">234</span>);</span><br><span class="line"><span class="comment">//执行sql语句</span></span><br><span class="line">sqlSession.insert(<span class="string">&quot;students.add&quot;</span>,s);</span><br><span class="line"><span class="comment">//手动提交事务</span></span><br><span class="line">sqlSession.commit();</span><br><span class="line"><span class="comment">//关流</span></span><br><span class="line">sqlSession.close();</span><br></pre></td></tr></table></figure>

<ul>
<li>修改表结构的操作需要手动提交事务，以及关流</li>
</ul>
<h5 id="Ⅲ-修改操作"><a href="#Ⅲ-修改操作" class="headerlink" title="Ⅲ. 修改操作"></a>Ⅲ. 修改操作</h5><ul>
<li><p>在映射.xml文件中添加update标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    用来描述修改的映射关系--&gt;</span>    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.JavaBean.Students&quot;</span>&gt;</span>--         UPDATE students SET uname=&quot;张春表&quot;,age=20 WHERE id =1 ;        UPDATE  students SET uname=#&#123;name&#125;,age=#&#123;age&#125; WHERE id =#&#123;id&#125;;    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取SqlSessionFactory        SqlSessionFactory build = new SqlSessionFactoryBuilder().build(Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;));        //获取SqlSession        SqlSession sqlSession = build.openSession();        //创建对象        Students s = new Students(1,&quot;猪八戒&quot;,20);        //执行sql语句        sqlSession.update(&quot;students.update&quot;,s);        //手动提交事务        sqlSession.commit();        //关流        sqlSession.close();</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="Ⅳ-删除操作"><a href="#Ⅳ-删除操作" class="headerlink" title="Ⅳ. 删除操作"></a>Ⅳ. 删除操作</h5><ul>
<li><p>在映射.xml文件中添加detele标签</p>
<ul>
<li>使用parameterType属性，传递参数只有单个时，比如int类型，占位符中的内容可以随便写，但最好见名思意</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    用来描述删除的映射关系--&gt;</span>    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span>--         当参数是单个的时候，占位符中的内容随便写，但是需要见名思意        DELETE FROM students where id = #&#123;id&#125;    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取SqlSessionFactory        SqlSessionFactory build = new SqlSessionFactoryBuilder().build(Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;));        //获取SqlSession        SqlSession sqlSession = build.openSession();        //执行sql语句        sqlSession.delete(&quot;students.delete&quot;,6);        //手动提交事务        sqlSession.commit();        //关流        sqlSession.close();</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="4-映射配置文件详解"><a href="#4-映射配置文件详解" class="headerlink" title="4.映射配置文件详解"></a>4.映射配置文件详解</h4><ul>
<li><p>约束</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span>        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>根标签 ： &lt; mapper namespace=”students”&gt;</p>
<ul>
<li>namespace 命名空间 ，和id共同组成映射关系<font color='#d15252'>唯一</font>的标识<ul>
<li>如果有多个表，多个映射文件，ID相同，通过namespace进行标识、区分、调用</li>
</ul>
</li>
</ul>
</li>
<li><p>映射关系标签</p>
<ul>
<li>select / insert / update / delete <ul>
<li>paramterType：参数类型 （全限定路径名）</li>
<li>resultType：返回值类型（对象）</li>
</ul>
</li>
</ul>
</li>
<li><p>#{} ：占位符，内容填写JavaBean的成员变量即可</p>
</li>
</ul>
<p><img src="https://i.loli.net/2021/09/26/ks4f5yE1pOIGvZP.png" alt="image-20210926162956712"></p>
<h4 id="5-Mybatis核心配置文件environments"><a href="#5-Mybatis核心配置文件environments" class="headerlink" title="5.Mybatis核心配置文件environments"></a>5.Mybatis核心配置文件environments</h4><ul>
<li><p>DTD约束</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span>        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span>        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>根标签：configuration 配置标签</p>
</li>
<li><p><strong><font color='#d15252'>environments 标签</font></strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;m1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>管理所有的环境<ul>
<li>default：默认使用的某个环境配置</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;m1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>单个环境配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>事务的管理，默认JDBC<ul>
<li>JDBC：使用JDBC的事务进行提交和回滚</li>
<li>MANAGED：几乎没干啥，他从来不提交和回滚一个事务（连接 ），他会交给容器管理，依赖于数据源得到的连接器来管理事务，和Spring框架结合的，将Mybatis和Spring整合后，事务的管理交给了Spring框架</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>用来管理数据源，常见的类型有三种<ul>
<li>POOLED：数据源实现了“池”的概念，将JDBC的连接对象组织起来</li>
<li>UNPOOLED：不使用数据库连接池</li>
<li>JNDI：这个数据源实现了能够在EJB或应用服务器这类容器中去使用</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="6-Mybatis核心配置文件properties（属性）"><a href="#6-Mybatis核心配置文件properties（属性）" class="headerlink" title="6.Mybatis核心配置文件properties（属性）"></a>6.Mybatis核心配置文件properties（属性）</h4><ul>
<li><p>这些属性可以在外部进行配置，并可以进行动态的替换</p>
<ul>
<li>在 properties 元素的子元素中设置</li>
</ul>
</li>
<li><p>在resources中新建一个prperties文件，用来存储属性配置</p>
<p><img src="https://i.loli.net/2021/09/26/2eUjpuAfF9b7mOJ.png" alt="image-20210926164046439"></p>
</li>
<li><p>在Mybatis核心配置文件中，更改property的参数，改为动态获取</p>
<p><img src="https://i.loli.net/2021/09/26/tG3PYBnJvrFWbf2.png" alt="image-20210926164427808"></p>
</li>
<li><p>在核心配置文件中，添加properties标签</p>
<ul>
<li>一定要注意位置，核心文件中的映射标签有严格的位置要求</li>
<li>properties标签应该在第一个</li>
</ul>
<p><img src="https://i.loli.net/2021/09/26/r9uUXfFjMHYT7aG.png" alt="image-20210926164654319"></p>
</li>
</ul>
<h4 id="7-Mybatis核心配置文件typeAliases（类型别名）"><a href="#7-Mybatis核心配置文件typeAliases（类型别名）" class="headerlink" title="7.Mybatis核心配置文件typeAliases（类型别名）"></a>7.Mybatis核心配置文件typeAliases（类型别名）</h4><ul>
<li> 第二个Seting标签属性很多，一般在延迟加载时更改，暂时不说</li>
<li>第三个  typeAliases 类型别名的作用是为复杂的类型参数设置一个缩写名称<ul>
<li>比如映射文件中的resultType标签使用的int ,String 等，本质上是Java.lang.Integer，Mybatis为我们提供了缩写</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/09/26/Ul9fVKYOkMhQ1A7.png" alt="image-20210926165540257"></p>
<ul>
<li><p>在Mybatis核心配置文件中添加</p>
<ul>
<li>添加和使用时，<font color='#d15252'>不区分大小写</font></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    为Java类型设置缩写名字--&gt;</span>    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span>        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Students&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.JavaBean.Students&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAlias</span>&gt;</span>    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>alias：别名的名称</li>
<li>thpe：要起别名的类</li>
</ul>
</li>
</ul>
<h4 id="8-Mybatis核心配置文件mappers（映射器）"><a href="#8-Mybatis核心配置文件mappers（映射器）" class="headerlink" title="8. Mybatis核心配置文件mappers（映射器）"></a>8. Mybatis核心配置文件mappers（映射器）</h4><ul>
<li><p>核心配置文件中的mappers中的mapper标签，可以使用四种映入方法</p>
<ul>
<li><p>resource</p>
<ul>
<li><!-- 使用相对于类路径的资源引用 --></li>
<li>如果使用resource，该资源必须在项目当中</li>
</ul>
</li>
<li><p>url</p>
<ul>
<li><!-- 使用完全限定资源定位符（URL） --></li>
<li><p>该资源可以不再项目中，随便的放，但是一定要加file协议</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;file:///var/mappers/PostMapper.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>class</p>
<ul>
<li><!-- 使用映射器接口实现类的完全限定类名 -->

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.builder.PostMapper&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>name</p>
<ul>
<li><!-- 将包内的映射器接口实现全部注册为映射器 -->

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;org.mybatis.builder&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="9-SqlSession"><a href="#9-SqlSession" class="headerlink" title="9. SqlSession"></a>9. SqlSession</h4><ul>
<li>SqlSessionFactoryBuilder 构建工厂类</li>
<li>Session每次手动提交和关流时非常麻烦<ul>
<li>我们可以在工厂类通过openSession构建SqlSession时</li>
<li>携带一个布尔类型的参数true  </li>
</ul>
</li>
</ul>
<h4 id="10-动态代理方式"><a href="#10-动态代理方式" class="headerlink" title="10.动态代理方式"></a>10.动态代理方式</h4><ul>
<li><p>Mybatis帮我们生成层实现类对象</p>
</li>
<li><p>映射配置文件必须和mapper类保持一致</p>
<ul>
<li>namespace 必须添加要实现的Dao层接口的<font color='#d15252'>权限路径名</font></li>
<li>映射标签中的id，必须填写要实现的Dao层接口中的<font color='#d15252'>方法名</font></li>
</ul>
</li>
<li><p>mapper类路径和映射文件的路径也要保持一致</p>
</li>
<li><p>mapper返回值类型要和映射关系文件中的返回值类型保持一致</p>
</li>
</ul>
<p><img src="https://i.loli.net/2021/09/26/OJdSaLH4MNujFvy.png" alt="image-20210926174506785"></p>
<p><img src="https://i.loli.net/2021/09/26/rdNIL1Q3aZPSf5g.png" alt="image-20210926174838010"></p>
<ul>
<li>如果使用动态代理的 方式，核心类配置文件中的mapper映射应该使用class=”xxx”引入</li>
</ul>
<h5 id="动态代理注意事项"><a href="#动态代理注意事项" class="headerlink" title="动态代理注意事项"></a>动态代理注意事项</h5><ul>
<li>如果mapper 使用class的方法加载时<ul>
<li>mapper文件的名字必须和要实现的接口名相同</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用动态代理    @Test    public void find() throws IOException &#123;        SqlSessionFactory build = new SqlSessionFactoryBuilder().build(Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;));        SqlSession sqlSession = build.openSession(true);        //获取Mapper代理对象        StudentDao mapper = sqlSession.getMapper(StudentDao.class);        //执行查询        List&lt;Students&gt; all = mapper.findAll();        for (Students s : all)&#123;            System.out.println(s);        &#125;    &#125;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis高级查询</title>
    <url>/2021/09/29/Mybatis%E9%AB%98%E7%BA%A7%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h2 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h2><ul>
<li>Mybatis高级查询<ul>
<li>resultMap</li>
<li>动态sql</li>
<li>多表查询</li>
</ul>
</li>
</ul>
<p>[TOC]</p>
<h3 id="一、Mybatis高级查询"><a href="#一、Mybatis高级查询" class="headerlink" title="一、Mybatis高级查询"></a>一、Mybatis高级查询</h3><p>创建项目步骤复习</p>
<ul>
<li>创建空项目</li>
<li>添加jdk环境，修改maven目录，添加maven webabb 或quickstart模块</li>
<li>修剪pom.xml配置文件<ul>
<li>导入mysql-connection</li>
<li>导入mybatis</li>
</ul>
</li>
<li>，修改项目结构，添加resources，新建mybatis配置文件</li>
</ul>
<h4 id="1-resultMap"><a href="#1-resultMap" class="headerlink" title="1. resultMap"></a>1. resultMap</h4><ul>
<li><p>处理返回结果</p>
</li>
<li><p>resultType 和 resultMap的区别</p>
<ul>
<li>resultType<ul>
<li>必须保证javabean的成员变量必须和数据库字段名保持一致</li>
<li>自动封装映射关系</li>
</ul>
</li>
<li>resultMap<ul>
<li>当Javabean成员变量和数据库字段名<font color='#d15252'>不一样</font>时，则采用resultMap处理 </li>
<li><font color='#d15252'>手动封装</font>映射关系</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/09/29/PXNnJguxw6DzEoR.png" alt="image-20210927174804371"></p>
<h4 id="2-多条件查询-参数问题"><a href="#2-多条件查询-参数问题" class="headerlink" title="2.多条件查询-参数问题"></a>2.多条件查询-参数问题</h4><ul>
<li><p>比如需要指定查询时，通过id或uname查询</p>
</li>
<li><p>当映射文件中需要参数时，传递参数的方法有以下几种</p>
<ul>
<li><p>第一种方式</p>
<ul>
<li>原始的方法是使用parameterType传递一个封装好的对象，直接使用其成员变量</li>
</ul>
<p><img src="https://i.loli.net/2021/09/27/3NSrqQRaMtknsfb.png" alt="image-20210927175305815"></p>
</li>
<li><p><strong><font color='#d15252'>第二种方式</font></strong></p>
<ul>
<li><p>在mapper层的方法上定义需要传递的参数类型</p>
</li>
<li><p>调用该方法时传递参数</p>
</li>
<li><p>mapper映射xml文件中，在需要使用参数的的地方写入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">arg0 rg1 ....</span><br><span class="line">或者是</span><br><span class="line">param1 param2 ....</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://i.loli.net/2021/09/27/cXPsZt6puYw7mah.png" alt="image-20210927180948745"></p>
<p><img src="https://i.loli.net/2021/09/27/5Vz1EgvFrkHRQd7.png" alt="image-20210927181100428"></p>
<p><img src="https://i.loli.net/2021/09/27/lBKWGHDzxyTsJVA.png" alt="image-20210927181110679"></p>
<ul>
<li><p>但不是很方便，如果参数过多 agr 和 param 需要一个一个数</p>
</li>
<li><p>可以在方法的定义上通过注解的方式给arg/param起<font color='#d15252'>别名</font></p>
<p><img src="https://i.loli.net/2021/09/27/ckRZITEH1pVsx4f.png" alt="image-20210927182232619"></p>
<ul>
<li>需要注意的是，Maven有可能会运行上一次的结果，如果确定代码没有问题，可以通过clean或者重启项目解决问题</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="3-模糊查询"><a href="#3-模糊查询" class="headerlink" title="3. 模糊查询"></a>3. 模糊查询</h4><p><img src="https://i.loli.net/2021/09/27/HCohAj3T5KxBb6v.png" alt="image-20210927183807578"></p>
<ul>
<li><p>需要注意的是，#{}起到一个<font color='#d15252'>占位符</font>的作用</p>
<ul>
<li>并且占位符会自动添加单引号</li>
<li>所以sql语句模糊查询中的%需要作为参数传递进来</li>
</ul>
<p><img src="https://i.loli.net/2021/09/27/t72mBlig6QJfGFA.png" alt="image-20210927183900978"></p>
</li>
<li><p>也可以使用${}，起到一个拼接的作用</p>
</li>
</ul>
<h4 id="4-插入数据并获取主键"><a href="#4-插入数据并获取主键" class="headerlink" title="4.插入数据并获取主键"></a>4.插入数据并获取主键</h4><p><img src="https://i.loli.net/2021/09/27/FRvqPSQsHDmulaf.png" alt="image-20210927185621659"></p>
<p><img src="https://i.loli.net/2021/09/27/3RBcPhd8TvaQebJ.png" alt="image-20210927192419776"></p>
<p><img src="https://i.loli.net/2021/09/27/GFYeK5aTU9fmd4O.png" alt="image-20210927192436572"></p>
<ul>
<li>将需要插入的数据封装成一个对象，通过parameterType属性传递参数，并用成员变量插入<ul>
<li>需要注意的是：keyProperty需要添加数据库中的字段名</li>
</ul>
</li>
</ul>
<h5 id="获取主键的通用方式"><a href="#获取主键的通用方式" class="headerlink" title="获取主键的通用方式"></a>获取主键的通用方式</h5><p><img src="https://i.loli.net/2021/09/27/zpnd7e1mQawjycs.png" alt="image-20210927193443821"></p>
<ul>
<li>keyProperty：传递到JavaBean的哪一个成员变量里</li>
<li>keyColumn：主键ID</li>
<li>resultType：返回值类型</li>
<li>order：在什么时候执行 ，一般Mysql使用after，Orcle使用before</li>
</ul>
<h4 id="5-动态Sql"><a href="#5-动态Sql" class="headerlink" title="5.动态Sql"></a>5.动态Sql</h4><p>sql语句的条件是变化的</p>
<h5 id="动态查询-（if）"><a href="#动态查询-（if）" class="headerlink" title="动态查询 （if）"></a>动态查询 （if）</h5><p><img src="https://i.loli.net/2021/09/27/EnTtRPlOXg6Qwyv.png" alt="image-20210927200406578"></p>
<p><img src="https://i.loli.net/2021/09/27/sOSW3ilwUNxmqjZ.png" alt="image-20210927200416178"></p>
<h5 id="动态更新-（set）"><a href="#动态更新-（set）" class="headerlink" title="动态更新 （set）"></a>动态更新 （set）</h5><p><img src="https://i.loli.net/2021/09/27/ZujYTqIXa5769Np.png" alt="image-20210927202134230"></p>
<p><img src="https://i.loli.net/2021/09/27/VeUtAMQGjBrwYkn.png" alt="image-20210927202142632"></p>
<h5 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h5><p><img src="https://i.loli.net/2021/09/27/pNktdrJGPa9gW7l.png" alt="image-20210927203213526"></p>
<p><img src="https://i.loli.net/2021/09/27/DSkUOL8mHFtsr49.png" alt="image-20210927203222608"></p>
<h4 id="6-分页-pagehelper"><a href="#6-分页-pagehelper" class="headerlink" title="6.分页 pagehelper"></a>6.分页 pagehelper</h4><p><img src="https://i.loli.net/2021/09/27/u1OEGj6FVlSXgyr.png" alt="image-20210927205110469"></p>
<ul>
<li>mapper调用page方法，得到一个集合</li>
</ul>
<p><img src="https://i.loli.net/2021/09/27/ZFWgEJUVAfp3qzY.png" alt="image-20210927205142029"></p>
<h4 id="7-select片段的抽取"><a href="#7-select片段的抽取" class="headerlink" title="7.select片段的抽取"></a>7.select片段的抽取</h4><p>使用sql标签，将需要重复利用的sql语句包起并起名</p>
<p>在使用时用&lt;In….&gt;标签调用即可</p>
]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis多表查询</title>
    <url>/2021/09/29/Mybatis%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h2 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h2><ul>
<li>多表查询</li>
<li>注解</li>
<li>日志（log4j）</li>
<li>缓存（一级，二级）</li>
</ul>
<h3 id="一、多表查询"><a href="#一、多表查询" class="headerlink" title="一、多表查询"></a>一、多表查询</h3><h4 id="1-一对一查询"><a href="#1-一对一查询" class="headerlink" title="1.一对一查询"></a>1.一对一查询</h4><ul>
<li><p>需求：查询所有订单和相关用户信息</p>
</li>
<li><p>sql语句的查询结果，必然会出现一个由<font color='#d15252'>两个表</font>组成的结果</p>
<ul>
<li>在做封装映射关系的时候，为了降低耦合性</li>
<li>应做两个JavaBean，对一个结果进行拆分，拆为两对映射关系<ul>
<li>其实就是两张表对应的映射关系</li>
</ul>
</li>
<li>这两对映射关系，JavaBean如何管理</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/09/28/LAbpRX1xNjVQWU8.png" alt="image-20210928102211407"></p>
<p><img src="https://i.loli.net/2021/09/28/LAbpRX1xNjVQWU8.png"></p>
<ul>
<li>使用association标签设置Orders中的User成员变量</li>
</ul>
<h4 id="2-一对多查询"><a href="#2-一对多查询" class="headerlink" title="2.一对多查询"></a>2.一对多查询</h4><ul>
<li>需求：查询所有用户</li>
</ul>
<p><img src="https://i.loli.net/2021/09/28/LB1bO6uDwAdihgI.png" alt="image-20210928104233246"></p>
<p><img src="https://i.loli.net/2021/09/28/xMqvV5SBFWmzchg.png" alt="image-20210928104918217"></p>
<ul>
<li>使用collection标签</li>
</ul>
<h4 id="3-多对多查询"><a href="#3-多对多查询" class="headerlink" title="3.多对多查询"></a>3.多对多查询</h4><p><img src="https://i.loli.net/2021/09/28/V9L3WSHEPmfct2A.png" alt="image-20210928104803365"></p>
<p><img src="https://i.loli.net/2021/09/28/eyWMKPxOIL1tdaX.png" alt="image-20210928104812188"></p>
<h3 id="二、注解"><a href="#二、注解" class="headerlink" title="二、注解"></a>二、注解</h3><h4 id="1-使用注解"><a href="#1-使用注解" class="headerlink" title="1.使用注解"></a>1.使用注解</h4><ul>
<li><p>Demo测试类</p>
<p><img src="https://i.loli.net/2021/09/28/1zGgQthVKwLWnf5.png" alt="image-20210928134605381"></p>
</li>
<li><p>配置文件导入</p>
<p><img src="https://i.loli.net/2021/09/28/wiRAmpbUSDNZl4E.png" alt="image-20210928134637066"></p>
</li>
<li><p>mapper层接口</p>
<p><img src="https://i.loli.net/2021/09/28/2Ad4mWVcrjHFho5.png" alt="image-20210928134657192"></p>
</li>
<li><p>使用注解的方式，不需要写mapper.xml文件</p>
</li>
</ul>
<h4 id="2-注解多表查询"><a href="#2-注解多表查询" class="headerlink" title="2.注解多表查询"></a>2.注解多表查询</h4><table>
<thead>
<tr>
<th>xml</th>
<th>注解</th>
</tr>
</thead>
<tbody><tr>
<td>select</td>
<td>select</td>
</tr>
<tr>
<td>insert</td>
<td>insert</td>
</tr>
<tr>
<td>update</td>
<td>update</td>
</tr>
<tr>
<td>delete</td>
<td>delete</td>
</tr>
<tr>
<td>resultMap</td>
<td>results</td>
</tr>
<tr>
<td>association</td>
<td>one</td>
</tr>
<tr>
<td>collection</td>
<td>many</td>
</tr>
<tr>
<td>result</td>
<td>result</td>
</tr>
</tbody></table>
<ul>
<li>一对一案例：查询所有订单，以及这些所属用户</li>
</ul>
<p><img src="https://i.loli.net/2021/09/28/ZOhcqG3uoBvEzNC.png" alt="image-20210928142823716"></p>
<ul>
<li><p>一对多案例：查询一个用户，以及该用户所属的订单</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> orders <span class="keyword">where</span> uid <span class="operator">=</span> user.id</span><br></pre></td></tr></table></figure></li>
<li><p>多对多案例：查询所有的用户，同时查出对应的角色</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/09/28/QJn7WTRXguE2vsO.png" alt="image-20210928153525634"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql索引、视图和存储过程</title>
    <url>/2021/09/29/Mysql%E7%B4%A2%E5%BC%95%E3%80%81%E8%A7%86%E5%9B%BE%E5%92%8C%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p>[TOC]</p>
<h3 id="一、Mysql索引"><a href="#一、Mysql索引" class="headerlink" title="一、Mysql索引"></a>一、Mysql索引</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h4><ul>
<li>Mysql的索引和数组的索引?<ul>
<li>是一样的</li>
<li>Mysql索引是加在<font color='#d15252'>字段</font>上的</li>
<li>目的：提高了查询效率</li>
</ul>
</li>
</ul>
<h4 id="2-Mysql索引的分类"><a href="#2-Mysql索引的分类" class="headerlink" title="2.Mysql索引的分类"></a>2.Mysql索引的分类</h4><table>
<thead>
<tr>
<th>索引名称</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>主键索引（primary key）</td>
<td>和主键的含义一样；查询速度快</td>
</tr>
<tr>
<td>唯一索引（unique）</td>
<td>索引值是唯一的</td>
</tr>
<tr>
<td>普通索引（index）</td>
<td>最常见的索引；加快对数据的访问速度</td>
</tr>
</tbody></table>
<h4 id="3-主键索引"><a href="#3-主键索引" class="headerlink" title="3.主键索引"></a>3.主键索引</h4><ul>
<li><p>特点：唯一，非空，每个表只能有一个主键索引（用来标识每一条数据）</p>
</li>
<li><p>添加主键索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">PRIMARY</span> KEY</span><br></pre></td></tr></table></figure>

<ul>
<li>可以在建表的时候添加主键索引</li>
<li>创建表之后，修改表结构添加索引</li>
</ul>
<p><img src="https://i.loli.net/2021/09/19/GZi46mJsUqbOIV9.png" alt="image-20210919094440024"></p>
</li>
</ul>
<h4 id="4-唯一索引"><a href="#4-唯一索引" class="headerlink" title="4.唯一索引"></a>4.唯一索引</h4><ul>
<li><p>特点：所有的值只能出现一次，必须唯一</p>
</li>
<li><p>加上唯一索引，查询的速度会提高</p>
<ul>
<li>在开发中，通常利用的是唯一索引的约束作用（唯一性）</li>
</ul>
</li>
<li><p>添加唯一索引</p>
<ul>
<li>创建表时添加唯一索引</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unique</span> [索引名称](字段)</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/09/19/bRKgS9vTZfsHVXJ.png" alt="image-20210919094917948"></p>
<ul>
<li>使用CREATE语句创建（在已有表上创建索引）</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX 索引名称 <span class="keyword">ON</span> 表名(字段名[长度])</span><br></pre></td></tr></table></figure>

<ul>
<li>使用ALTER语句创建索引</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span>(字段)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="5-普通索引"><a href="#5-普通索引" class="headerlink" title="5.普通索引"></a>5.普通索引</h4><ul>
<li><p>目的：有些字段查询、分组使用频率比较多，建议该字段作为普通索引</p>
</li>
<li><p>添加普通索引</p>
<ul>
<li>CREATE方式</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX 索引名 <span class="keyword">ON</span> 表名(字段[长度])</span><br></pre></td></tr></table></figure>

<ul>
<li>ALTER方式</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> INDEX 索引名(字段)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="6-删除索引"><a href="#6-删除索引" class="headerlink" title="6.删除索引"></a>6.删除索引</h4><ul>
<li><p>格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> INDEX 索引名称</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="7-测试索引性能"><a href="#7-测试索引性能" class="headerlink" title="7.测试索引性能"></a>7.测试索引性能</h4><ul>
<li><p>如果数据量较大，在创建表时应该添加索引，否则有可能失败</p>
</li>
<li><p>添加索引后，速度更快</p>
</li>
</ul>
<h5 id="索引的优点和缺点"><a href="#索引的优点和缺点" class="headerlink" title="索引的优点和缺点"></a>索引的优点和缺点</h5><p>添加索引首先应考虑在where和order by 涉及的列上做添加</p>
<ul>
<li>优点<ul>
<li>提高了查询的速度</li>
<li>显著的减少查询中分组和排序的时间</li>
</ul>
</li>
<li>缺点<ul>
<li>创建索引和维护索引需要时间，而且数据量越大时间越长</li>
<li>当对表中的数据进行增加、修改、删除的时候，索引也会同时进行维护的，降低了数据的<font color='#d15252'>维护速度</font></li>
</ul>
</li>
</ul>
<h3 id="二、Mysql视图"><a href="#二、Mysql视图" class="headerlink" title="二、Mysql视图"></a>二、Mysql视图</h3><h4 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1.概念"></a>1.概念</h4><ul>
<li><font color='cornflowerblue'>什么</font>是视图？<ul>
<li>也是数据库的一部分</li>
<li>视图是一张虚拟表</li>
<li>视图建立在已有表的基础上，这些原基础的视图被称为**<font color='#d15252'>基表</font>**</li>
<li>视图提供数据内容语句为SELECT语句，可以将视图理解为存储起来的select语句</li>
<li>视图向用户提高基表数据的另一种表示方式</li>
</ul>
</li>
<li>视图的<font color='cornflowerblue'>作用</font><ul>
<li>权限控制的时候可以使用<ul>
<li>视图操作不会影响到原表</li>
</ul>
</li>
<li>简化复杂的多表查询  </li>
</ul>
</li>
</ul>
<h4 id="2-创建视图"><a href="#2-创建视图" class="headerlink" title="2.创建视图"></a>2.创建视图</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> 视图名称 [字段名] <span class="keyword">AS</span> <span class="keyword">SELECT</span>语句</span><br></pre></td></tr></table></figure>

<ul>
<li>将Select语句查询结果作为基表<ul>
<li>字段名可以不写，如果不写会自动使用基表字段名</li>
</ul>
</li>
</ul>
<h4 id="3-查询视图"><a href="#3-查询视图" class="headerlink" title="3.查询视图"></a>3.查询视图</h4><ul>
<li>和查询表的操作一样</li>
</ul>
<h4 id="4-视图和表的区别"><a href="#4-视图和表的区别" class="headerlink" title="4.视图和表的区别"></a>4.视图和表的区别</h4><ul>
<li>视图是建立在表之上的，表存储的是数据库中的数据，而视图存的是一个数据的展示(select 查询语句)</li>
<li>通过视图不能改变表中的数据（一般情况下视图中的数据都是表中的列，经过计算得到的结果，不允许更新）</li>
<li>删除视图，表不受影响<ul>
<li>但是删除表，视图不再起作用</li>
</ul>
</li>
</ul>
<h3 id="三、存储过程"><a href="#三、存储过程" class="headerlink" title="三、存储过程"></a>三、存储过程</h3><h4 id="1-概念-2"><a href="#1-概念-2" class="headerlink" title="1.概念"></a>1.概念</h4><p>Mysql5以后开始支持存储过程</p>
<ul>
<li><p>什么是存储过程？</p>
<ul>
<li>存储过程是一种在数据库中存储复杂程序，以便外部程序调用的一种数据库对象</li>
<li>存储过程是为了完成特定功能的SQL语句集</li>
<li>简答来说：存储过程就是将一堆SQL语句的合并，中间加入一些逻辑控制</li>
<li>类似于Java中的<font color='#d15252'>方法</font></li>
</ul>
</li>
<li><p>存储过程的优缺点</p>
<p><img src="https://i.loli.net/2021/09/19/adZA8epxNwU6YlS.png" alt="image-20210919114250499"></p>
</li>
</ul>
<h4 id="2-创建方式"><a href="#2-创建方式" class="headerlink" title="2.创建方式"></a>2.创建方式</h4><ul>
<li><p>数据准备</p>
<ul>
<li>创建一个商品表和一个订单表</li>
</ul>
</li>
<li><p><font color='#d15252'><strong>创建存储过程</strong></font></p>
<ul>
<li><p>方式一</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter $$ </span><br></pre></td></tr></table></figure>

<blockquote>
<p>$$ ： 声明语句的结束符号，可以自定义，一般使用</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER $$ <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> food() <span class="comment">-- 存储过程声明BEGIN -- &#123; 开始写存储过程	SELECT * FROM foods;END $$ -- &#125; 存储过程结束-- 调用存储过程CALL food;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/09/19/o5yQGuLlJBaxTkK.png" alt="image-20210919120859126"></p>
</li>
<li><p>方式二</p>
<ul>
<li>创建存储过程，可以携带参数</li>
</ul>
<p><img src="https://i.loli.net/2021/09/19/bh92fZMA1QokO4N.png" alt="image-20210919121205355"></p>
</li>
<li><p>方式三</p>
<ul>
<li><p>调用存储过程时，可以定义一个返回值</p>
</li>
<li><p>定义变量</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> @变量名 <span class="operator">=</span> 值</span><br></pre></td></tr></table></figure></li>
<li><p>返回值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">out</span> 变量名 数据类型 （存储过程声明上）</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/09/19/Q1mtL3jKHb2Tfhi.png" alt="image-20210919122052130"></p>
<ul>
<li>返回变量值使用 <code>SELECT @变量名 </code>即可</li>
<li>调用存储过程时，因为返回值定义在声明上，所以调用要写上变量名</li>
</ul>
<p><img src="https://i.loli.net/2021/09/19/Qnv6sSikW5Nz9Z8.png" alt="image-20210919122241937"></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li>总结<ul>
<li>定义变量一定要加SET和@符号<ul>
<li><code>SET @变量名 = 数值</code></li>
</ul>
</li>
<li>如果有输入，需要加 IN</li>
<li>如果要返回值 ，需要 OUT</li>
<li>带回返回值 SELECT</li>
</ul>
</li>
</ul>
<h3 id="四、触发器"><a href="#四、触发器" class="headerlink" title="四、触发器"></a>四、触发器</h3><h4 id="1-概念-3"><a href="#1-概念-3" class="headerlink" title="1.概念"></a>1.概念</h4><ul>
<li><p>什么是触发器</p>
<ul>
<li><p>当我们执行一条SQL语句时，这条SQL语句的执行会自动的触发其他的SQL语句</p>
</li>
<li><p>类似于Java中的监听器</p>
</li>
</ul>
</li>
</ul>
<h4 id="2-触发器四要素"><a href="#2-触发器四要素" class="headerlink" title="2.触发器四要素"></a>2.触发器四要素</h4><ul>
<li>监视的地点<ul>
<li>监视的哪张TABLE</li>
</ul>
</li>
<li>监视事件<ul>
<li>insert / update / delete</li>
</ul>
</li>
<li>触发时间<ul>
<li>before / after</li>
</ul>
</li>
<li>触发的事件<ul>
<li>insert / update / delete</li>
</ul>
</li>
</ul>
<h4 id="3-定义触发器的语法格式"><a href="#3-定义触发器的语法格式" class="headerlink" title="3.定义触发器的语法格式"></a>3.定义触发器的语法格式</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter $ ;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>$ 定义触发器的结束符号</p>
</blockquote>
<ul>
<li><p>定义</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter $ ;<span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> 触发器名称 定义触发器;before<span class="operator">/</span>after (<span class="keyword">insert</span><span class="operator">/</span>update<span class="operator">/</span><span class="keyword">delete</span>) <span class="comment">-- 触发的时间和监听的时间on 表名  -- 触发器所在的表for each row  -- 固定写法，叫做触发器行，每一行受影响，触发事件都执行begin 	-- 具体的触发事件end $  -- 结束</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在同一个数据库中，触发器的名称是<font color='#d15252'>唯一</font>的，不能重复</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/09/19/ZocQ2PgiF3Anlvd.png" alt="image-20210919124800691"></p>
<h3 id="六、DCL操作（控制语言）"><a href="#六、DCL操作（控制语言）" class="headerlink" title="六、DCL操作（控制语言）"></a>六、DCL操作（控制语言）</h3><h4 id="1-概念-4"><a href="#1-概念-4" class="headerlink" title="1.概念"></a>1.概念</h4><ul>
<li>Mysql默认使用的是root账户，超级管理员，拥有全部的权限<ul>
<li>使用DCL可以创建不同的用户并赋予不同的权限</li>
</ul>
</li>
</ul>
<h4 id="2-创建用户"><a href="#2-创建用户" class="headerlink" title="2.创建用户"></a>2.创建用户</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>主机名 = IP地址</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>用户名</td>
<td>创建的新用户的登录名称</td>
</tr>
<tr>
<td>主机名</td>
<td>指定该用户可以在哪个主机上可以登录，本机登录的可以使用localhost，如果想该用户远程登陆的话，主机名就写通配符 %</td>
</tr>
<tr>
<td>密码</td>
<td>登录密码</td>
</tr>
</tbody></table>
<h4 id="3-DCL分配权限"><a href="#3-DCL分配权限" class="headerlink" title="3.DCL分配权限"></a>3.DCL分配权限</h4><ul>
<li><p>用户授权</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> 权限<span class="number">1</span>，权限<span class="number">2</span>，权限<span class="number">3</span>，... <span class="keyword">ON</span> 数据库名.表名 <span class="keyword">to</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> </span><br></pre></td></tr></table></figure>

<ul>
<li>操作有插入，修改，删除等，每一种都需要给予权限</li>
<li>分配所有权限</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">ON</span> 数据库名.表名 <span class="keyword">to</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> </span><br></pre></td></tr></table></figure></li>
<li><p>查看用户权限</p>
<ul>
<li>```sql<br>show grant for ‘用户名‘@’主机名’<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 删除用户</span><br><span class="line"></span><br><span class="line">  - ```<span class="keyword">sql</span></span><br><span class="line">    <span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>查看所有用户</p>
<ul>
<li><pre><code class="sql">SELECT * FROM USER
</code></pre>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>RestFul风格</title>
    <url>/2021/10/22/RestFul%E9%A3%8E%E6%A0%BC/</url>
    <content><![CDATA[<h2 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h2><ul>
<li>RestFul风格</li>
</ul>
<h3 id="一、RestFul风格"><a href="#一、RestFul风格" class="headerlink" title="一、RestFul风格"></a>一、RestFul风格</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h4><ul>
<li>是一种网络应用程序的设计风格和开发方式</li>
<li>基于HTTP，前后端分离用的比较多<ul>
<li>原始的http请求，需要先走Controller再到Service再找到对应的方法进行执行</li>
</ul>
</li>
<li>基于url+请求的方式<ul>
<li>get：查询</li>
<li>post：新增</li>
<li>delete：删除</li>
<li>put：更新</li>
</ul>
</li>
</ul>
<h4 id="2-RestController注解"><a href="#2-RestController注解" class="headerlink" title="2.RestController注解"></a>2.RestController注解</h4><ul>
<li>将Request和Controller合二为一</li>
</ul>
<h4 id="3-RestController案例"><a href="#3-RestController案例" class="headerlink" title="3.RestController案例"></a>3.RestController案例</h4><ul>
<li>统一Mapping映射，不同的方法使用不同的Mapping映射<ul>
<li>有GetMapping、PostMapping、DeleteMapping、PutMapping</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/10/19/aChMbDiGBLrmowZ.png" alt="image-20211019151350270"></p>
<p><img src="https://i.loli.net/2021/10/19/xJNw5gErtGWTD93.png" alt="image-20211019151850624"></p>
<ul>
<li>简化后<ul>
<li>不同的方法，使用相同Mapping应用相同的value值</li>
<li>通过<font color='#d15252'>请求方式</font>进行区分方法</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/10/19/7pVSWFIPkeK4vnU.png" alt="image-20211019152322404"></p>
<p><img src="https://i.loli.net/2021/10/19/5V2MHgc17tf9yUa.png" alt="image-20211019152644471"></p>
<h4 id="4-文件上传"><a href="#4-文件上传" class="headerlink" title="4.文件上传"></a>4.文件上传</h4><h5 id="Ⅰ-准备"><a href="#Ⅰ-准备" class="headerlink" title="Ⅰ.准备"></a>Ⅰ.准备</h5><ul>
<li><p>创建对应接收from表单action跳转的程序</p>
</li>
<li><p>前端部分</p>
<ul>
<li><p>form表单</p>
</li>
<li><p>需要<font color='#d15252'>使用post请求</font>，因为get去请求的请求体在url地址栏，不能上传文件</p>
</li>
<li><p>添加<font color='#d15252'>enctype</font>属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%--    application/x-www-form-urlencoded 上传的值是 key-value 的形式 --%&gt;</span><br><span class="line">&lt;%--    multipart/form-data 将内容切割成多个部分，按内容发送  --%&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/10/19/9mIUFNKLbcBu7Rn.png" alt="image-20211019154334317"></p>
</li>
</ul>
</li>
<li><p>后端部分：fileupload和IO流（属于commons组件）</p>
<ul>
<li><p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>将核心类注入到ioc容器中</p>
<ul>
<li>核心类 = 文件上传解析器</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;MultipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        设置最大上传文件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10485760&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        设置上传文件最小值，如果上传的文件小于该值，则不会产生临时文件  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxInMemorySize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1024&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写代码，方法带参MultipartFile对文件进行处理</p>
<ul>
<li>File类只是文件目录的管理，不适用于上传文件</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/10/19/kShztapHWxIBYs7.png" alt="image-20211019163203638"></p>
</li>
</ul>
<h4 id="5-SpringMVC处理异常的机制"><a href="#5-SpringMVC处理异常的机制" class="headerlink" title="5.SpringMVC处理异常的机制"></a>5.SpringMVC处理异常的机制</h4><h5 id="Ⅰ-概念"><a href="#Ⅰ-概念" class="headerlink" title="Ⅰ.概念"></a>Ⅰ.概念</h5><ul>
<li>普通处理异常有两种方式<ul>
<li>try</li>
<li>throws：一层一层向上，最后交给JVM</li>
</ul>
</li>
<li>SpringMVC类似于throws一层一层抛出异常，最后抛到HandlerexceptionResolver</li>
</ul>
<h5 id="Ⅱ-定制异常信息（两种）"><a href="#Ⅱ-定制异常信息（两种）" class="headerlink" title="Ⅱ.定制异常信息（两种）"></a>Ⅱ.定制异常信息（两种）</h5><p><strong>第一种方式：</strong></p>
<ul>
<li><p>自定义异常类</p>
<p><img src="https://i.loli.net/2021/10/19/bDcxGBKV3g9fwWR.png" alt="image-20211019163906389"></p>
</li>
<li><p>注入IOC容器中</p>
<p><img src="https://i.loli.net/2021/10/19/PaHSFT34sVuXJlG.png" alt="image-20211019164022987"></p>
<ul>
<li>return返回ModelAndView</li>
</ul>
</li>
</ul>
<p><strong>第二种方式：</strong></p>
<ul>
<li><p>配置web.xml文件</p>
<ul>
<li>修改错误信息页面</li>
</ul>
<p><img src="https://i.loli.net/2021/10/19/YtVdTLq2bfpIzoO.png" alt="image-20211019164138606"></p>
</li>
</ul>
<p><img src="https://i.loli.net/2021/10/19/kUMamtExAQzNP5q.png" alt="image-20211019164158578"></p>
<h4 id="6-拦截器"><a href="#6-拦截器" class="headerlink" title="6.拦截器"></a>6.拦截器</h4><p>SpringMVC自己的拦截器 —<font color='#d15252'>Interceptor</font></p>
<ul>
<li>servlet中的Filter用来对处理进行预处理和后处理</li>
<li>第一步：自定义实现类，继承对应接口</li>
</ul>
<p><img src="https://i.loli.net/2021/10/19/ZMonriaxqN6kRdu.png" alt="image-20211019164711144"></p>
<ul>
<li>第二步：注入IOC容器中，配置拦截器</li>
</ul>
<p><img src="https://i.loli.net/2021/10/19/SMsTU5f4chpBl8L.png" alt="image-20211019164806957"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--拦截的资源--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.controller.MyInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring框架</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>RestFul风格</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM整合</title>
    <url>/2021/10/26/SSM%E6%95%B4%E5%90%88/</url>
    <content><![CDATA[<h2 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h2><ul>
<li>SSM</li>
</ul>
<h3 id="一、SSM整合"><a href="#一、SSM整合" class="headerlink" title="一、SSM整合"></a>一、SSM整合</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h4><ul>
<li><p>Spring/Mybatis/SpringMVC</p>
</li>
<li><p>Mybatis和Spring先整合 ，SpringMVC单独跑起来</p>
</li>
<li><p>Spring5版本后适配JDK8-11</p>
</li>
</ul>
<h4 id="2-步骤"><a href="#2-步骤" class="headerlink" title="2.步骤"></a>2.步骤</h4><ul>
<li><p>搭建Mybatis</p>
<p><img src="https://i.loli.net/2021/10/21/B6oLzIKmr3MTcOE.png" alt="image-20211021112454116"></p>
</li>
<li><p>搭建Spring</p>
<p><img src="https://i.loli.net/2021/10/21/5hTwFnNXkr1UfVe.png" alt="image-20211021122653604"></p>
<p><img src="https://i.loli.net/2021/10/21/OWzAV73TyxkuIDa.png" alt="image-20211021122706189"></p>
</li>
<li><p>整合Mybatis和Spring</p>
<ul>
<li>让applicationContext.xml文件替换掉mybatisconfig.xml文件</li>
</ul>
</li>
<li><p>整合MVC</p>
</li>
</ul>
<h4 id="3-BootStrap"><a href="#3-BootStrap" class="headerlink" title="3.BootStrap"></a>3.BootStrap</h4><ul>
<li>快速搭建响应式网页的框架</li>
<li>栅格系统：将页面分为12份</li>
<li></li>
</ul>
<p>以后补充</p>
]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Mybatis</tag>
        <tag>SSM</tag>
        <tag>SpringMvc</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro、pdf、拦截器</title>
    <url>/2021/10/28/Shiro%E3%80%81pdf%E3%80%81%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
    <content><![CDATA[<h2 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h2><ul>
<li>SpringBoot整合Shiro</li>
</ul>
<h3 id="一、SpringBoot整合Shiro"><a href="#一、SpringBoot整合Shiro" class="headerlink" title="一、SpringBoot整合Shiro"></a>一、SpringBoot整合Shiro</h3><h4 id="1-什么是Shiro"><a href="#1-什么是Shiro" class="headerlink" title="1.什么是Shiro"></a>1.什么是Shiro</h4><p><img src="https://i.loli.net/2021/10/28/ia2VEjZvh8PHTQo.png" alt="image-20211028090125117"></p>
<ul>
<li><p>Subject：主体，就是请求的”用户”</p>
</li>
<li><p>Security Manager：就是Shiro的心脏</p>
<ul>
<li>管理所有的Subject，所有的访问（交互 ）都需要通过其进行拦截和控制<ul>
<li>对其进行认证和授权</li>
</ul>
</li>
</ul>
</li>
<li><p>Authenticator：认证器，负责主体的认证</p>
<ul>
<li>例如确认用户是否登录成功，我们可以使用shiro的方法<ul>
<li>也可以自定义</li>
</ul>
</li>
</ul>
</li>
<li><p>Authorizer：授权器，权限授予，给Subject分类权限</p>
</li>
<li><p>Session Manager：会话管理，shiro自己实现的，和我们以前用的HttpSession没有关系</p>
</li>
<li><p>Pluggable <font color='#d15252'>Realms</font></p>
<ul>
<li>需要我们自己去实现的</li>
<li>以登陆为例，我们的账号、密码需要提供</li>
</ul>
</li>
<li><p>Session Dao：对Session进行crud操作的</p>
</li>
<li><p>Cache Manager：缓存控制器</p>
<ul>
<li>管理用户、角色、权限的缓存信息</li>
</ul>
</li>
<li><p>Cryptography：密码模块</p>
<ul>
<li>shiro中提供了一些密码的加密、解密策略</li>
</ul>
</li>
</ul>
<h4 id="2-boot中使用shiro"><a href="#2-boot中使用shiro" class="headerlink" title="2.boot中使用shiro"></a>2.boot中使用shiro</h4><ul>
<li><p>添加依赖</p>
<p><img src="https://i.loli.net/2021/10/28/jtSGhgieuLFfs8X.png" alt="image-20211028092023125"></p>
<p><img src="https://i.loli.net/2021/10/28/KyhsLmNkgDoi5FW.png" alt="image-20211028092116453"></p>
</li>
<li><p>配置application.properties</p>
<p><img src="https://i.loli.net/2021/10/28/rLyEYoAmOCBGKJZ.png" alt="image-20211028092754725"></p>
</li>
<li><p>创建shiroConfig类（shiro配置类）</p>
<ul>
<li><p>定义两个Bean</p>
<ul>
<li><p>Realm：提供账号密码的</p>
<p><img src="https://i.loli.net/2021/10/28/EDmtizTYUCuoeZd.png" alt="image-20211028093620918"></p>
</li>
<li><p>ShiroDialect ：为了thymeleaf中使用shiro类</p>
<p><img src="https://i.loli.net/2021/10/28/5E2abFu3YlItHBL.png" alt="image-20211028093833659"></p>
</li>
</ul>
</li>
<li><p>处理路径问题</p>
<p><img src="https://i.loli.net/2021/10/28/Awvbm4t3Psha8HJ.png" alt="image-20211028094515340"></p>
</li>
</ul>
</li>
<li><p>创建WebMvcConfig类，实现WebMvcConfigurer接口</p>
<ul>
<li><p>重写addViewControllers方法</p>
<p><img src="https://i.loli.net/2021/10/28/HSrDwtN321kqXjL.png" alt="image-20211028095014220"></p>
</li>
</ul>
</li>
<li><p>创建ExceptionController类</p>
<ul>
<li>使用注解@ControllerAdvice （控制器通知）</li>
</ul>
<p><img src="https://i.loli.net/2021/10/28/lx5QMpu2iGHnIU7.png" alt="image-20211028101040635"></p>
</li>
<li><p>创建UserController控制器类</p>
<ul>
<li>提供登录doLogin方法</li>
</ul>
<p><img src="https://i.loli.net/2021/10/28/4IVKk8fWBblLCy3.png" alt="image-20211028114222090"></p>
<ul>
<li><p>提供管理员页面跳转控制</p>
</li>
<li><p>提供普通用户页面跳转控制</p>
<p><img src="https://i.loli.net/2021/10/28/6p2F5ZAheR43djk.png" alt="image-20211028125752118"></p>
</li>
</ul>
</li>
<li><p>创建idex.html页面</p>
<p><img src="https://i.loli.net/2021/10/28/Gw7EBFkLnqsgaSh.png" alt="image-20211028103255799"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">xmlns:shiro=&quot;http://www.pollix.at/thymeleaf/shiro&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>创建login.html页面</p>
<p><img src="https://i.loli.net/2021/10/28/vIKWTyOu9mfnJUS.png" alt="image-20211028114454133"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">xmlns:th=&quot;http://www.thymeleaf.org&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>创建admin.html和user.html、unautthorrized页面</p>
</li>
</ul>
<h3 id="二、视图和视图解析器"><a href="#二、视图和视图解析器" class="headerlink" title="二、视图和视图解析器"></a>二、视图和视图解析器</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h4><ul>
<li><p>视图</p>
<ul>
<li>逻辑视图</li>
<li>非逻辑视图</li>
</ul>
</li>
<li></li>
</ul>
<h4 id="2-返回pdf文件步骤"><a href="#2-返回pdf文件步骤" class="headerlink" title="2.返回pdf文件步骤"></a>2.返回pdf文件步骤</h4><ul>
<li><p>导入依赖</p>
<p><img src="https://i.loli.net/2021/10/28/YPfTVhONXDiwtGx.png" alt="image-20211028134359269"></p>
</li>
<li><p>获取数据库数据，得到集合（暂时用打桩数据）</p>
</li>
<li><p>创建Service层</p>
<ul>
<li>接口</li>
</ul>
<p><img src="https://i.loli.net/2021/10/28/BN7oHKY1QELhjTJ.png" alt="image-20211028135040295"></p>
</li>
<li><p>创建实体类PdfView</p>
<p><img src="https://i.loli.net/2021/10/28/Dcw5U82ygPCbE1M.png" alt="image-20211028135406687"></p>
</li>
</ul>
<ul>
<li><p>创建实体类User</p>
<p><img src="https://i.loli.net/2021/10/28/bakZXq3wM5rgz1h.png" alt="image-20211028140809196"></p>
</li>
<li><p>创建控制器</p>
<p><img src="https://i.loli.net/2021/10/28/hHR7ZpdD2nVufoc.png" alt="image-20211028182953624"></p>
<p><img src="https://i.loli.net/2021/10/28/RAQFujnDGpOX1yL.png" alt="image-20211028183001116"></p>
<p><img src="https://i.loli.net/2021/10/28/jZrNoWVxYzwlUgf.png" alt="image-20211028183016249"></p>
<p><img src="https://i.loli.net/2021/10/28/t7uEhXN6lYUDowa.png" alt="image-20211028183030914"></p>
</li>
</ul>
<h3 id="三、在SpringBoot中使用拦截器"><a href="#三、在SpringBoot中使用拦截器" class="headerlink" title="三、在SpringBoot中使用拦截器"></a>三、在SpringBoot中使用拦截器</h3><h4 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h4><ul>
<li><p>不需要添加依赖</p>
</li>
<li><p>创建拦截器<font color='#d15252'>配置</font>类InterceptorConfig</p>
<ul>
<li>继承接口WebMvcConfigurer</li>
<li>实现addInterceptors方法<ul>
<li>配置需要拦截的路径，所有的请求都需要拦截</li>
<li>配置不需要拦截的路径</li>
<li>使用<font color='#d15252'>registry</font>注册拦截器（拦截器自己创建）</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/10/28/GIX8ye6N1v2THdr.png" alt="image-20211028190430361"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//配置需要拦截的路径  所有的请求都需要拦截</span></span><br><span class="line">        String [] addPathPatterns=&#123;<span class="string">&quot;/**&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">//不需要拦截的路径</span></span><br><span class="line">        String [] excludePathPatterns = &#123;<span class="string">&quot;/boot/get&quot;</span>,<span class="string">&quot;/boot/post&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">//注册拦截器（登录的拦截器）</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> LoginInterceptor())</span><br><span class="line">                .addPathPatterns(addPathPatterns).</span><br><span class="line">                excludePathPatterns(excludePathPatterns);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>创建拦截器类LoginInterceptor</p>
<ul>
<li>继承接口HandlerInterceptor</li>
<li>重写preHandle方法</li>
</ul>
<p><img src="https://i.loli.net/2021/10/28/4oJz7kUtAql5Lcf.png" alt="image-20211028190534477"></p>
</li>
<li><p>创建Controller类，测试拦截器是否生效</p>
<p><img src="https://i.loli.net/2021/10/28/zXOCbvq2FhjG5o3.png" alt="image-20211028190638592"></p>
</li>
</ul>
<h3 id="四、在Spring中使用servlet"><a href="#四、在Spring中使用servlet" class="headerlink" title="四、在Spring中使用servlet"></a>四、在Spring中使用servlet</h3><ul>
<li>创建servlet包<ul>
<li>创建Myservlet类<ul>
<li>继承HttpServlet<ul>
<li>添加@WebServlet注解<ul>
<li>重写doGet、doPost方法</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>直接通过注解起的value值访问即可</li>
</ul>
<p><img src="https://i.loli.net/2021/10/28/5HuZUiPpqKv6OhN.png" alt="image-20211028190810249"></p>
]]></content>
      <categories>
        <category>Spring框架</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Shiro</tag>
        <tag>PDF</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet、HTTP协议、Tomcat</title>
    <url>/2021/08/31/Servlet%E3%80%81HTTP%E5%8D%8F%E8%AE%AE%E3%80%81Tomcat/</url>
    <content><![CDATA[<h3 id="一、HTTP协议"><a href="#一、HTTP协议" class="headerlink" title="一、HTTP协议"></a>一、HTTP协议</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h4><ul>
<li>HTTP是网络传输协议</li>
</ul>
<h4 id="2-HTTP的两个组成部分"><a href="#2-HTTP的两个组成部分" class="headerlink" title="2.HTTP的两个组成部分"></a>2.HTTP的两个组成部分</h4><ul>
<li><p><strong>请求体</strong></p>
<ul>
<li><p>请求头</p>
<ul>
<li>一堆键值对</li>
</ul>
<p><img src="https://i.loli.net/2021/08/31/c41juIBdN7qsehR.png" alt="image-20210831091440715"></p>
</li>
<li><p>请求空行</p>
<ul>
<li>一堆空格</li>
</ul>
</li>
<li><p><font color='#d15252'>请求体</font></p>
<ul>
<li>请求提交的数据</li>
</ul>
</li>
<li><p>请求行</p>
<ul>
<li>包含请求的地址，请求的方式(get,post)，请求的状态</li>
</ul>
<p><img src="https://i.loli.net/2021/08/31/c41juIBdN7qsehR.png"></p>
</li>
</ul>
<blockquote>
<p>不携带数据（?携带数据）</p>
</blockquote>
</li>
<li><p><strong>响应体</strong></p>
<ul>
<li><p>响应头</p>
<ul>
<li>一堆键值对</li>
</ul>
<p><img src="https://i.loli.net/2021/08/31/ZatSpuyVl9xNgJr.png" alt="image-20210831091829347"></p>
<ul>
<li>需要注意的键值对：<ul>
<li><font color='#d15252'>Content-Type</font>: text/html;charset= utf - 8<ul>
<li>设置编码格式</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>响应行</p>
<ul>
<li>响应的地址，响应的状态</li>
</ul>
</li>
<li><p>响应空行</p>
<ul>
<li>其实就是一堆空格</li>
</ul>
</li>
<li><p><font color='#d15252'>响应体</font></p>
<ul>
<li>服务器返回来的数据</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="二、服务器软件"><a href="#二、服务器软件" class="headerlink" title="二、服务器软件"></a>二、服务器软件</h3><ul>
<li>Tomcat</li>
</ul>
<h4 id="1-Tomcat下载安装"><a href="#1-Tomcat下载安装" class="headerlink" title="1.Tomcat下载安装"></a>1.Tomcat下载安装</h4><p><img src="https://i.loli.net/2021/08/31/K8ku64HbPOoIDSL.png" alt="image-20210831093130771"></p>
<ul>
<li><p>tar.gz：LINUX系统版本</p>
</li>
<li><p>zip免安装版会闪退，需要配置环境变量等</p>
</li>
<li><p>建议安装版</p>
</li>
</ul>
<p><img src="https://i.loli.net/2021/08/31/mwjl69eMNB18zZE.png" alt="image-20210831093221283"></p>
<p>建议不要填写默认的-1 ，肯会出现问题，随便写个数</p>
<ul>
<li>选择jre时，可以直接选择jdk路径，因为jdk中包含jre</li>
</ul>
<h4 id="2-Tomcat目录"><a href="#2-Tomcat目录" class="headerlink" title="2.Tomcat目录"></a>2.Tomcat目录</h4><ul>
<li><p>bin目录：二进制的执行文件</p>
</li>
<li><p>cof目录：配置信息（端口号，默认的环境部署位置）</p>
</li>
<li><p>lib目录：第三方jar包</p>
</li>
<li><p>logs目录：日志信息</p>
</li>
<li><p>temp：临时文件（上传/下载的中转）</p>
</li>
<li><p><font color='#d15252'>webapps</font>：tomcat上部署项目默认访问路径</p>
</li>
<li><p>work：存放jsp的</p>
</li>
</ul>
<h4 id="3-Tomcat注意事项"><a href="#3-Tomcat注意事项" class="headerlink" title="3.Tomcat注意事项"></a>3.Tomcat注意事项</h4><ul>
<li>任何项目，默认打开index.html / index.jsp 文件</li>
<li>如果没有部署项目，默认打开webapps中的root目录的index.jsp文件</li>
</ul>
<h4 id="4-结解决乱码为题"><a href="#4-结解决乱码为题" class="headerlink" title="4.结解决乱码为题"></a>4.结解决乱码为题</h4><ul>
<li><p>找到 <code>C:\Program Files\Apache Software Foundation\Tomcat 9.0\conf</code>下的 <code>logging.properties</code></p>
</li>
<li><p>更改代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.util.logging.ConsoleHandler.level = FINE</span><br><span class="line">java.util.logging.ConsoleHandler.formatter = org.apache.juli.OneLineFormatter</span><br><span class="line">java.util.logging.ConsoleHandler.encoding = GBK</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="5-拓展知识"><a href="#5-拓展知识" class="headerlink" title="5.拓展知识"></a>5.拓展知识</h4><ul>
<li>JavaSE和JavaEE<ul>
<li>JavaSE<ul>
<li>只能操作本地内容</li>
</ul>
</li>
<li>JavaEE<ul>
<li>JavaEE可以处理HTTP请求和响应</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="三、idea集成Tomcat"><a href="#三、idea集成Tomcat" class="headerlink" title="三、idea集成Tomcat"></a>三、idea集成Tomcat</h3><h3 id="四、JavaEE概述"><a href="#四、JavaEE概述" class="headerlink" title="四、JavaEE概述"></a>四、JavaEE概述</h3><ul>
<li>java前端开发（jsp）<ul>
<li><font color='#d15252'>Servlet+ jsp</font>（核心）</li>
</ul>
</li>
<li>Java后端开发（服务器端开发，获取数据（crud = 增删改查））</li>
</ul>
<h3 id="五、Servlet"><a href="#五、Servlet" class="headerlink" title="五、Servlet"></a>五、Servlet</h3><h4 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1.概述"></a>1.概述</h4><ul>
<li>是一个接口<ul>
<li>必须实现所有的方法</li>
</ul>
</li>
<li>该类想要运行，必需要有Web服务器</li>
<li>是一个小型Java应用程序</li>
<li>可以处理请求和响应<ul>
<li>还有其他两种处理请求和响应的方式<ul>
<li>GenericServlet</li>
<li>HttpServlet</li>
</ul>
</li>
</ul>
</li>
<li>需要导包</li>
</ul>
<h4 id="2-入门"><a href="#2-入门" class="headerlink" title="2.入门"></a>2.入门</h4><ul>
<li><p>out目录下的东西放在web服务器中</p>
<ul>
<li>该目录底下的内容，只有tomcat有访问权限，<font color='#d15252'>http协议</font>没有访问权限</li>
</ul>
</li>
<li><p>设置http协议访问权限</p>
<ul>
<li>在web.xml中添加配置语句</li>
</ul>
<p><img src="https://i.loli.net/2021/08/31/zQCH7ESqmwrptIj.png" alt="image-20210831114153199"></p>
<p><img src="https://i.loli.net/2021/08/31/FJuwAZ38dvEzhG5.png" alt="image-20210831114253478"></p>
</li>
</ul>
<h4 id="3-成员方法"><a href="#3-成员方法" class="headerlink" title="3.成员方法"></a>3.成员方法</h4><h5 id="Ⅰ-init"><a href="#Ⅰ-init" class="headerlink" title="Ⅰ. init()"></a>Ⅰ. init()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span><span class="keyword">throws</span> ServletException</span></span><br></pre></td></tr></table></figure>

<ul>
<li>提示将servlet放入容器</li>
<li><font color='#d15252'>自动实例化</font>一个ServletConfig对象，并将该值估值给参数(servletConfig)</li>
</ul>
<p><img src="https://i.loli.net/2021/08/31/bVT2sJKwudMQfEW.png" alt="image-20210831143955227"></p>
<h5 id="Ⅱ-getServletConfig"><a href="#Ⅱ-getServletConfig" class="headerlink" title="Ⅱ. getServletConfig()"></a>Ⅱ. getServletConfig()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>该方法只要有请求过来，容器（Servlet）会自动帮我们调用Service方法</li>
</ul>
<h5 id="Ⅲ-service"><a href="#Ⅲ-service" class="headerlink" title="Ⅲ. service()"></a>Ⅲ. <font color='#d15252'>service</font>()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ServletException, IOException </span></span><br></pre></td></tr></table></figure>



<h5 id="Ⅳ-getServletInfo"><a href="#Ⅳ-getServletInfo" class="headerlink" title="Ⅳ. getServletInfo()"></a>Ⅳ. getServletInfo()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>返回有关 servlet 的信息，比如作者、版本和版权</li>
</ul>
<h5 id="Ⅴ-destroy"><a href="#Ⅴ-destroy" class="headerlink" title="Ⅴ. destroy()"></a>Ⅴ. destroy()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>由容器自己调用，告知容器Servlet已经被销毁</li>
</ul>
<h3 id="六、ServletConfig"><a href="#六、ServletConfig" class="headerlink" title="六、ServletConfig"></a>六、ServletConfig</h3><ul>
<li>servlet 容器使用的 servlet 配置对象，该对象在初始化期间将信息传递给 servlet</li>
</ul>
<table>
<thead>
<tr>
<th>返回值类型</th>
<th>方法</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>String</td>
<td>getInitParameter(String name)</td>
<td>取出指定name的值</td>
</tr>
<tr>
<td>Enumeration</td>
<td>getaInitParameterNames()</td>
<td>取出所有的name，并以枚举形式存储</td>
</tr>
<tr>
<td>ServletContext</td>
<td>getServletContext()</td>
<td>获取Context对象</td>
</tr>
<tr>
<td>String</td>
<td>getServletName()</td>
<td>取出servletConfig的名字</td>
</tr>
</tbody></table>
<ul>
<li>补充Enumeration中的方法<ul>
<li>hasMoreElements（）<ul>
<li>判断下一个有没有值</li>
</ul>
</li>
<li>nextElement()<ul>
<li>依次取值</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/08/31/ucaSM1zCIlqHBRe.png" alt="image-20210831152055449"></p>
<p><img src="https://i.loli.net/2021/08/31/dJq5mQnNoHSaA9k.png" alt="image-20210831164750694"></p>
<h3 id="七、ServletContext"><a href="#七、ServletContext" class="headerlink" title="七、ServletContext"></a>七、ServletContext</h3><ul>
<li><p>代表的是整个Java程序（由很多个Servlet组成）</p>
</li>
<li><p>servlet 使用这些方法与其他 servlet 容器进行通信</p>
</li>
</ul>
<h5 id="Ⅰ-getContextPath"><a href="#Ⅰ-getContextPath" class="headerlink" title="Ⅰ. getContextPath()"></a>Ⅰ. getContextPath()</h5><p><img src="https://i.loli.net/2021/08/31/CVMfhzwtgsp76nc.png" alt="image-20210831173949987"></p>
<h5 id="Ⅱ-getInitParameter"><a href="#Ⅱ-getInitParameter" class="headerlink" title="Ⅱ. getInitParameter()"></a>Ⅱ. getInitParameter()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getInitParameter</span><span class="params">(String name)</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>获取指定name的value</li>
<li>**<font color='#d15252'>注意</font>**：因为Context面对的是全局，所以，写在servlet中的param不能使用，需要在&lt; servlet &gt;外设置数据</li>
</ul>
<p><img src="https://i.loli.net/2021/08/31/SsQJhAwN82LZFH4.png" alt="image-20210831174608458"></p>
<ul>
<li>因为设置了全局的，所以可以实现两个程序间的通信<ul>
<li>即一个set一个get</li>
</ul>
</li>
<li>获取全局数据</li>
</ul>
<p><img src="https://i.loli.net/2021/08/31/GX6k5STstnQ2NUE.png" alt="image-20210831174941224"></p>
<h5 id="Ⅲ-setAttribute"><a href="#Ⅲ-setAttribute" class="headerlink" title="Ⅲ. setAttribute()"></a>Ⅲ. setAttribute()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(String name, Object object)</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>将对象绑定到此 servlet 上下文中的给定属性名称。如果已将指定名称用于某个属性，则此方法将使用新属性替换具有该名称的属性</li>
</ul>
<h5 id="Ⅳ-getAttribute"><a href="#Ⅳ-getAttribute" class="headerlink" title="Ⅳ. getAttribute()"></a>Ⅳ. getAttribute()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getAttribute</span><span class="params">(String name)</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>返回具有给定名称的 servlet 容器属性，如果不具有该名称的属性，则返回 <code>null</code></li>
</ul>
<h5 id="Ⅴ-getServerInfo"><a href="#Ⅴ-getServerInfo" class="headerlink" title="Ⅴ. getServerInfo()"></a>Ⅴ. getServerInfo()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getServerInfo</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>返回正在其上运行 servlet 的 servlet 容器的名称和版本</li>
</ul>
<p><img src="https://i.loli.net/2021/08/31/AfD5OC62vU1JjHN.png" alt="image-20210831182019984"></p>
<h3 id="八、Service：处理请求和响应"><a href="#八、Service：处理请求和响应" class="headerlink" title="八、Service：处理请求和响应"></a>八、Service：处理请求和响应</h3><ul>
<li><p>该方法只要有请求过来，容器（Servlet）会自动帮我们调用Service方法</p>
</li>
<li><p>处理请求</p>
<ul>
<li>自动创建ServletRequest对象，并将该实例赋值给变量</li>
</ul>
</li>
</ul>
<h4 id="1-处理请求"><a href="#1-处理请求" class="headerlink" title="1.处理请求"></a>1.处理请求</h4><ul>
<li>请求行、请求头、请求体、请求空行</li>
<li>ServletRequest 处理请求 ，是一个接口</li>
</ul>
<h4 id="2-ServletRequest"><a href="#2-ServletRequest" class="headerlink" title="2.ServletRequest"></a>2.ServletRequest</h4><ul>
<li>定义将客户端请求信息提供给某个 servlet 的对象。servlet 容器创建 <code>ServletRequest</code>  对象，并将该对象作为参数传递给该 servlet 的 <code>service</code> 方法</li>
<li><code>ServletRequest</code> 对象提供包括参数名称、参数值、属性和输入流的数据</li>
</ul>
<h4 id="3-ServletRequest方法"><a href="#3-ServletRequest方法" class="headerlink" title="3.ServletRequest方法"></a>3.ServletRequest方法</h4><h5 id="Ⅰ-getCharacterEncoding"><a href="#Ⅰ-getCharacterEncoding" class="headerlink" title="Ⅰ. getCharacterEncoding()"></a>Ⅰ. getCharacterEncoding()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCharacterEncoding</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>返回此<font color='cornflowerblue'>请求正文</font>中使用的<font color='#d15252'>字符编码</font>的名称。如果该请求未指定字符编码，则此方法返回 <code>null</code> </li>
</ul>
<p><img src="https://i.loli.net/2021/08/31/kZJXOrCQlMweW18.png" alt="image-20210831185235951"></p>
<ul>
<li>请求正文 = 请求体 = 传递的数据</li>
</ul>
<h5 id="Ⅱ-getParameter-String-name"><a href="#Ⅱ-getParameter-String-name" class="headerlink" title="Ⅱ. getParameter(String name)"></a>Ⅱ. <font color='#d15252'>getParameter</font>(String name)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getParameter</span><span class="params">(String name)</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>以 <code>String</code> 形式返回请求参数的值，如果该参数不存在，则返回  <code>null</code>。请求参数是与请求一起发送的额外信息。对于 HTTP servlet，参数包含在查询字符串或发送的表单数据中。</li>
<li>获取的参数是<font color='#d15252'>请求时传递的数据</font>，如果没有返回null</li>
</ul>
<h5 id="Ⅲ-getServerPort"><a href="#Ⅲ-getServerPort" class="headerlink" title="Ⅲ. getServerPort()"></a>Ⅲ. getServerPort()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getServerPort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getServerName</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>返回请求被发送到的端口号</li>
<li>返回请求被发送到服务器的主机名</li>
</ul>
<h5 id="Ⅳ-setAttribute-String-name-Object-o"><a href="#Ⅳ-setAttribute-String-name-Object-o" class="headerlink" title="Ⅳ. setAttribute(String name, Object o)"></a>Ⅳ. setAttribute(String name, Object o)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(String name, Object o)</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>存储此请求中的属性。在请求之间重置属性。此方法常常与 [<code>RequestDispatcher</code>]一起使用</li>
<li>get</li>
<li><font color='#d15252'>必须在同一个请求中</font></li>
</ul>
<h5 id="Ⅴ-getAttribute-String-name"><a href="#Ⅴ-getAttribute-String-name" class="headerlink" title="Ⅴ. getAttribute(String name)"></a>Ⅴ. getAttribute(String name)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getAttribute</span><span class="params">(String name)</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>以 <code>Object</code> 形式返回指定属性的值，如果不存在给定名称的属性，则返回 <code>null</code></li>
<li><font color='#d15252'>必须在同一个请求中</font></li>
</ul>
<h5 id="Ⅵ-其他方法"><a href="#Ⅵ-其他方法" class="headerlink" title="Ⅵ.其他方法"></a>Ⅵ.其他方法</h5><p><img src="https://i.loli.net/2021/08/31/qSmV4lAyvGNHn3O.png" alt="image-20210831185504385"></p>
<ul>
<li>获取请求体长度</li>
<li>获取请求体</li>
<li>获取请求的输入字节流</li>
</ul>
<p><img src="https://i.loli.net/2021/08/31/YqHkhb8xO6iwJQ2.png" alt="image-20210831191204421"></p>
<ul>
<li>设置请求体的编码格式</li>
<li>设置请求体的参数名称</li>
</ul>
<h5 id="Ⅶ-getRequestDispatcher-String-path"><a href="#Ⅶ-getRequestDispatcher-String-path" class="headerlink" title="Ⅶ. getRequestDispatcher(String path)"></a>Ⅶ. getRequestDispatcher(String path)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> RequestDispatcher <span class="title">getRequestDispatcher</span><span class="params">(String path)</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>返回一个 [<code>RequestDispatcher</code>]对象，它充当位于给定路径上的资源的包装器。可以使用 <code>RequestDispatcher</code>  对象将请求转发给资源，或者在响应中包含资源。资源可以是动态的，也可以是静态的</li>
<li>简单来说就是打包发送请求</li>
</ul>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
        <tag>HTTP协议</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet和JSP</title>
    <url>/2021/09/01/Servlet%E5%92%8CJSP/</url>
    <content><![CDATA[<h3 id="一、ServletResponse"><a href="#一、ServletResponse" class="headerlink" title="一、ServletResponse"></a>一、ServletResponse</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h4><ul>
<li>定义辅助 servlet 将响应发送到客户端的对象<ul>
<li>即处理响应</li>
</ul>
</li>
<li>由servlet容器创建的</li>
<li>作为参数传递给service方法</li>
<li>给请求端响应数据<ul>
<li>可以是二进制的字节流<ul>
<li>getOutputStream返回的ServletOutputStream对象</li>
</ul>
</li>
<li>可以是字符<ul>
<li>getWriter返回的printWriter对象</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="2-成员方法"><a href="#2-成员方法" class="headerlink" title="2.成员方法"></a>2.成员方法</h4><h5 id="Ⅰ-getOutputSteam"><a href="#Ⅰ-getOutputSteam" class="headerlink" title="Ⅰ. getOutputSteam()"></a>Ⅰ. getOutputSteam()</h5><ul>
<li>获得ServletOutputStream对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ServletOutputStream <span class="title">getOutputStream</span><span class="params">()</span> <span class="keyword">throws</span> java.io.IOException</span></span><br></pre></td></tr></table></figure>

<ul>
<li>返回响应二进制数据</li>
<li>是OutputStream的子类，可以使用字节流的方法</li>
</ul>
<p><img src="https://i.loli.net/2021/09/01/hIYkm5s2jpF8GzX.png" alt="image-20210901094204139"></p>
<h5 id="Ⅱ-getWriter"><a href="#Ⅱ-getWriter" class="headerlink" title="Ⅱ. getWriter()"></a>Ⅱ. getWriter()</h5><ul>
<li>获得PrintWriter对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> java.io.<span class="function">PrintWriter <span class="title">getWriter</span><span class="params">()</span> <span class="keyword">throws</span> java.io.IOException</span></span><br></pre></td></tr></table></figure>

<ul>
<li>返回可将字符文本发送到客户端的 <code>PrintWriter</code> 对象</li>
<li>是Writer的子类，可以使用字符流的方法</li>
</ul>
<h5 id="Ⅲ-setContentType"><a href="#Ⅲ-setContentType" class="headerlink" title="Ⅲ. setContentType()"></a>Ⅲ. setContentType()</h5><h5 id="setCharacterEncoding"><a href="#setCharacterEncoding" class="headerlink" title="setCharacterEncoding()"></a>setCharacterEncoding()</h5><ul>
<li>设置编码字符集格式</li>
</ul>
<p><img src="https://i.loli.net/2021/09/01/kyQOSrHBugUbZw5.png" alt="image-20210901095248983"></p>
<h5 id="Ⅳ-setLocale"><a href="#Ⅳ-setLocale" class="headerlink" title="Ⅳ. setLocale()"></a>Ⅳ. setLocale()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(java.util.Locale loc)</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>设置响应的语言环境</li>
</ul>
<h3 id="二、Servlet的生命周期"><a href="#二、Servlet的生命周期" class="headerlink" title="二、Servlet的生命周期"></a>二、Servlet的生命周期</h3><ul>
<li><p>初始化</p>
<ul>
<li>init</li>
</ul>
</li>
<li><p>生长部分</p>
<ul>
<li>service</li>
</ul>
</li>
<li><p>销毁</p>
<ul>
<li>destory</li>
</ul>
</li>
<li><p>Servlet由容器通过**<font color='#d15252'>反射</font>**进行创建</p>
<ul>
<li>Tomcat解析XML文件，拿到权限和路径名，加载到代码中</li>
<li>如果将Servlet的构造方法改为private修饰，则反射创建Servlet失败，会报500错误</li>
</ul>
</li>
</ul>
<h4 id="补充知识点"><a href="#补充知识点" class="headerlink" title="补充知识点"></a>补充知识点</h4><ul>
<li>自定义实现Servlet方式有很多弊端<ul>
<li>请求的方式有很多种<ul>
<li><font color='#d15252'>get</font>：请求数据（不安全，数据显示在地址栏上）</li>
<li><font color='#d15252'>post</font>：提交数据</li>
<li>delete：删除数据</li>
<li>put：增加数据</li>
</ul>
</li>
<li>不知道是哪个请求</li>
<li>必须要<font color='#d15252'>重写</font>五个Servlet接口中的方法<ul>
<li>GenericServlet （抽象类）<ul>
<li>实现接口Servlet， ServletConfig</li>
<li>为了解决重写所有方法</li>
<li>使用GenericServlet 只需要重写service方法即可</li>
</ul>
</li>
<li>HttpServlet<ul>
<li>继承于GenericServlet </li>
<li>实现接口Serializable</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="三、HttpServlet"><a href="#三、HttpServlet" class="headerlink" title="三、HttpServlet"></a>三、HttpServlet</h3><h4 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1.概念"></a>1.概念</h4><p><img src="https://i.loli.net/2021/09/01/JEB86fwczRAno5N.png" alt="image-20210901104233393"></p>
<ul>
<li><p>根据请求类型写出doGet或者doPost等方法，但通常请求不一定由哪种方法</p>
<ul>
<li>所以，get,post通常都写</li>
<li>但为了防止代码的重复性，可以只在一个方法中写相关代码，其他方法进行调用，并传递req,resp即可</li>
</ul>
<p><img src="https://i.loli.net/2021/09/01/ktK9los2yviB3Nc.png" alt="image-20210901112602553"></p>
</li>
<li><p>底层代码运行逻辑</p>
<ul>
<li>请求传递后，先走GenericServlet 的service方法</li>
<li>service方法中第一行，调用判断请求类型的方法</li>
<li>根据不同的请求类型，执行不同的方法（doGet，doPost）<ul>
<li>req.getmthod()</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="2-线程安全问题：Servlet"><a href="#2-线程安全问题：Servlet" class="headerlink" title="2.线程安全问题：Servlet"></a>2.线程安全问题：Servlet</h4><ul>
<li>当两个请求发送时撞到一起，比如线程等待时，会出现两个请求响应相同的情况</li>
</ul>
<p><img src="https://i.loli.net/2021/09/01/xQ6mZiD14VCM829.png" alt="image-20210901114442599"></p>
<ul>
<li>解决方案：加锁（同步代码块）<ul>
<li>会导致加载变慢</li>
<li>能避免就尽量避免</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/09/01/DWHlnwtOx8Kj2Xi.png" alt="image-20210901115023223"></p>
<h4 id="2-访问路径"><a href="#2-访问路径" class="headerlink" title="2.访问路径"></a>2.访问路径</h4><ul>
<li><p>写死</p>
</li>
<li><p>/路径/*</p>
</li>
<li><p>*.后缀</p>
<ul>
<li>针对多次请求</li>
</ul>
<p><img src="https://i.loli.net/2021/09/01/YZVHg25hxKIW46s.png" alt="image-20210901135848942"></p>
</li>
</ul>
<h3 id="四、JSP"><a href="#四、JSP" class="headerlink" title="四、JSP"></a>四、JSP</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h4><ul>
<li><p>Java Server page</p>
</li>
<li><p>动态网页开发技术</p>
</li>
<li><p>它使用JSP标签在HTML网页中插入Java代码。标签通常以</p>
<p><font color='#d15252'>&lt;%开头以%&gt;</font>结束</p>
</li>
<li><p>html+css+java代码</p>
</li>
</ul>
<h4 id="2-JSP的使用和处理步骤"><a href="#2-JSP的使用和处理步骤" class="headerlink" title="2.JSP的使用和处理步骤"></a>2.JSP的使用和处理步骤</h4><ul>
<li>安装jdk，配置环境变量</li>
<li>安装Tomcat，配置环境变量</li>
</ul>
<h5 id="JSP处理步骤"><a href="#JSP处理步骤" class="headerlink" title="JSP处理步骤"></a>JSP处理步骤</h5><p><img src="https://i.loli.net/2021/09/01/XPrLFaRnE5JUCAj.png" alt="image-20210901145705890"></p>
<h4 id="3-JSP语法"><a href="#3-JSP语法" class="headerlink" title="3.JSP语法"></a>3.JSP语法</h4><ul>
<li>可以包含任意量的Java语句、变量、方法或表达式</li>
</ul>
<h5 id="Ⅰ-脚本程序语法格式"><a href="#Ⅰ-脚本程序语法格式" class="headerlink" title="Ⅰ.脚本程序语法格式"></a>Ⅰ.脚本程序语法格式</h5><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;% 代码片段 %&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>任何文本、HTML标签、JSP元素必须写在脚本程序的外面</li>
</ul>
<h5 id="Ⅱ-JSP声明语法格式"><a href="#Ⅱ-JSP声明语法格式" class="headerlink" title="Ⅱ.JSP声明语法格式"></a>Ⅱ.JSP声明语法格式</h5><ul>
<li>一个声明语句可以声明一个或多个变量、方法，供后面的Java代码使用</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%! declaration; [ declaration; ]+ ... %&gt;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>&lt;%%&gt;和&lt;%!%&gt;中都可以定义变量，但是有以下区别：</p>
<ul>
<li>&lt;%%&gt;中定义的是在成员位置，并且可以进行其他操作</li>
<li>&lt;%!%&gt;中定义的在方法中，局部位置，并且不能进行其他操作</li>
</ul>
</blockquote>
<h5 id="Ⅲ-JSP表达式的语法格式"><a href="#Ⅲ-JSP表达式的语法格式" class="headerlink" title="Ⅲ.JSP表达式的语法格式"></a>Ⅲ.JSP表达式的语法格式</h5><ul>
<li>一个JSP表达式中包含的脚本语言表达式，先被转化成String，然后插入到表达式出现的地方</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%= 表达式 %&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>不管里面写什么，最终得到一个值即可<ul>
<li>对象也可以</li>
</ul>
</li>
</ul>
<h5 id="Ⅳ-JSP注释"><a href="#Ⅳ-JSP注释" class="headerlink" title="Ⅳ.JSP注释"></a>Ⅳ.JSP注释</h5><ul>
<li>与Java相同</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%-- 这里可以填写 JSP 注释 --%&gt;</span><br></pre></td></tr></table></figure>



<h3 id="4-JSP的九大隐式对象"><a href="#4-JSP的九大隐式对象" class="headerlink" title="4.JSP的九大隐式对象"></a>4.JSP的九大隐式对象</h3><ul>
<li>JSP隐式对象是JSP容器为每个页面提供的Java对象，开发者可以直接使用它们而不用显式声明</li>
</ul>
<p><img src="https://i.loli.net/2021/09/01/DXrBUHPFRAVlkTs.png" alt="image-20210901160746457"></p>
<ul>
<li><h5 id="request-gt-HttpServletRequest"><a href="#request-gt-HttpServletRequest" class="headerlink" title="request == &gt; HttpServletRequest"></a>request == &gt; <strong>HttpServletRequest</strong></h5><ul>
<li>request对象提供了一系列方法来获取HTTP头信息，cookies，HTTP方法等等</li>
<li>每当客户端请求一个JSP页面时，JSP引擎就会制造一个新的request对象来代表这个请求</li>
</ul>
</li>
</ul>
<ul>
<li><h5 id="response-gt-HttpServletResponse"><a href="#response-gt-HttpServletResponse" class="headerlink" title="response ==&gt; HttpServletResponse"></a>response ==&gt; <strong>HttpServletResponse</strong></h5><ul>
<li>当服务器创建request对象时会同时创建用于响应这个客户端的response对象</li>
<li>response对象也定义了处理HTTP头模块的接口，可以添加新的cookies，时间戳，HTTP状态码等等</li>
</ul>
</li>
</ul>
<ul>
<li>out ==&gt; <strong>PrintWriter</strong><ul>
<li>用于把结果输出至网页上</li>
</ul>
</li>
</ul>
<ul>
<li>session ==&gt; HttpSession<ul>
<li>session对象用来跟踪在各个客户端请求间的会话</li>
</ul>
</li>
</ul>
<ul>
<li><h5 id="application-gt-ServletContext"><a href="#application-gt-ServletContext" class="headerlink" title="application ==&gt; ServletContext"></a>application ==&gt; <strong>ServletContext</strong></h5><ul>
<li>应用上下文，别的jsp页面也可以访问</li>
<li>中一个重要的方法就是removeArribute()，它可接受一个或两个参数</li>
</ul>
</li>
</ul>
<ul>
<li><p>config ==&gt; ServletConfig</p>
<ul>
<li>允许开发者访问Servlet或者JSP引擎的初始化参数，比如文件路径等</li>
</ul>
</li>
<li><h5 id="pageContext-gt-PageContext"><a href="#pageContext-gt-PageContext" class="headerlink" title="pageContext ==&gt; PageContext"></a>pageContext ==&gt; <strong>PageContext</strong></h5><ul>
<li>创建pageContext类的实例，提供对当前JSP页面的访问</li>
</ul>
</li>
<li><p>page ==&gt;类似于Java中的this关键字</p>
<ul>
<li>这个对象就是页面实例的引用。它可以被看做是整个JSP页面的代表</li>
</ul>
</li>
<li><p>Exception ==&gt;Exception</p>
<ul>
<li>代表发送错误的JSP页面中对应的异常对象</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
        <tag>ServletResponse</tag>
        <tag>HttpServlet</tag>
        <tag>JSP</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot入门</title>
    <url>/2021/10/26/SpringBoot%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h2><ul>
<li>SpringBoot</li>
<li>微服务</li>
</ul>
<p><img src="https://i.loli.net/2021/10/24/Z2pPxCNisKITLvm.png" alt="image-20211024160321656"></p>
<h3 id="一、SpringBoot"><a href="#一、SpringBoot" class="headerlink" title="一、SpringBoot"></a>一、SpringBoot</h3><h4 id="1-SpringBoot的概念"><a href="#1-SpringBoot的概念" class="headerlink" title="1.SpringBoot的概念"></a>1.SpringBoot的概念</h4><ul>
<li><p>SpringBoot是整合Spring<font color='#d15252'>技术栈</font>一站式框架</p>
<ul>
<li>也可以说是全家桶</li>
<li>是一个非常优秀的脚手架</li>
</ul>
</li>
<li><p>SpringBoot的优点</p>
<p><img src="https://i.loli.net/2021/10/24/9BxcIXSwEWGdZKv.png" alt="image-20211024172922029"></p>
</li>
<li><p>SpringBoot的缺点</p>
<ul>
<li>版本较多，更新太快<ul>
<li>作为开发人员需要及时关注新功能的出现</li>
</ul>
</li>
<li>封装太深，内部原理复杂，不容易精通</li>
<li></li>
</ul>
</li>
</ul>
<h4 id="2-使用SpringBoot的步骤"><a href="#2-使用SpringBoot的步骤" class="headerlink" title="2.使用SpringBoot的步骤"></a>2.使用SpringBoot的步骤</h4><ul>
<li><p>创建Maven程序，在pom.xml配置文件中添加SpringBoot的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建spring-boot中的web依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>新建类，使用@SpringBootApplication标记当前程序为SpringBoot程序</p>
<p><img src="https://i.loli.net/2021/10/24/1EHIb75Amd6Ziu3.png" alt="image-20211024165422341"></p>
</li>
<li><p>新建Controller类，返回到前端页面查看效果</p>
<p><img src="https://i.loli.net/2021/10/24/Sg28Xb9paYUJdN4.png" alt="image-20211024174315240"></p>
</li>
</ul>
<h4 id="3-使用thymeleaf（页面）"><a href="#3-使用thymeleaf（页面）" class="headerlink" title="3.使用thymeleaf（页面）"></a>3.使用thymeleaf（页面）</h4><ul>
<li>直接创建项目</li>
</ul>
<p><img src="https://i.loli.net/2021/10/24/GtUyK372CdzTwP5.png" alt="image-20211024174436000"></p>
<ul>
<li><p>创建Book的JavaBean</p>
<p><img src="https://i.loli.net/2021/10/24/1mgHAUCdFnXKfNw.png" alt="image-20211024183308022"></p>
</li>
<li><p>创建BookController</p>
<p><img src="https://i.loli.net/2021/10/24/xrC7PN8i6zbOpUu.png" alt="image-20211024183448998"></p>
</li>
<li><p>配置application.properties</p>
<ul>
<li>主要添加thymeleaf各项设置</li>
</ul>
<p><img src="https://i.loli.net/2021/10/24/KnlrtWxfgo8JhQc.png" alt="image-20211024185658660"></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 端口号</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8082</span></span><br><span class="line"><span class="comment"># 项目名</span></span><br><span class="line"><span class="meta">server.servlet.context-path</span>=<span class="string">/springboot-thymeleaf</span></span><br><span class="line"><span class="comment"># 是否开启缓存</span></span><br><span class="line"><span class="meta">spring.thymeleaf.cache</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#检查模板是否存在</span></span><br><span class="line"><span class="meta">spring.thymeleaf.check-template</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#检查模板位置是否存在</span></span><br><span class="line"><span class="meta">spring.thymeleaf.check-template-location</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#设置模板的编码</span></span><br><span class="line"><span class="meta">spring.thymeleaf.encoding</span>=<span class="string">UTF-8</span></span><br><span class="line"><span class="comment">#模板位置</span></span><br><span class="line"><span class="meta">spring.thymeleaf.prefix</span>=<span class="string">classpath:/templates/</span></span><br><span class="line"><span class="comment">#设置内容</span></span><br><span class="line"><span class="meta">spring.thymeleaf.servlet.content-type</span>=<span class="string">text/html</span></span><br><span class="line"><span class="comment">#设置后缀</span></span><br><span class="line"><span class="meta">spring.thymeleaf.suffix</span>=<span class="string">.html</span></span><br></pre></td></tr></table></figure></li>
<li><p>添加<font color='#d15252'>thymeleaf</font>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建前端页面，并获取数据</p>
<p><img src="https://i.loli.net/2021/10/24/ywbcQrFHspg56aV.png" alt="image-20211024185746722"></p>
</li>
</ul>
<h4 id="4-使用freemarker（页面）"><a href="#4-使用freemarker（页面）" class="headerlink" title="4.使用freemarker（页面）"></a>4.使用freemarker（页面）</h4><ul>
<li><p>导入依赖</p>
<p><img src="https://i.loli.net/2021/10/24/QFMa41xPD82R5Jv.png" alt="image-20211024190429574"></p>
<ul>
<li>如果不写版本号，springboot自动版本冲裁，不会报错</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;version&gt;2.5.0&lt;/version&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置application.properties</p>
<p><img src="https://i.loli.net/2021/10/24/Xdo8aqSxgNu5HiJ.png" alt="image-20211024190955813"></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 端口号</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8083</span></span><br><span class="line"><span class="comment"># 项目名</span></span><br><span class="line"><span class="meta">server.servlet.context-path</span>=<span class="string">/springboot-freemarker</span></span><br><span class="line"><span class="comment">#检查request中是否有同名model</span></span><br><span class="line"><span class="meta">spring.freemarker.allow-request-override</span>=<span class="string">false</span></span><br><span class="line"><span class="comment">#检查session中是否有同名model</span></span><br><span class="line"><span class="meta">spring.freemarker.allow-session-override</span>=<span class="string">false</span></span><br><span class="line"><span class="comment">#开启缓存</span></span><br><span class="line"><span class="meta">spring.freemarker.cache</span>=<span class="string">false</span></span><br><span class="line"><span class="comment">#编码</span></span><br><span class="line"><span class="meta">spring.freemarker.charset</span>=<span class="string">UTF-8</span></span><br><span class="line"><span class="comment">#模板位置</span></span><br><span class="line"><span class="meta">spring.freemarker.check-template-location</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.freemarker.content-type</span>=<span class="string">text/html</span></span><br><span class="line"><span class="meta">spring.freemarker.expose-request-attributes</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">spring.freemarker.expose-session-attributes</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.freemarker.template-loader-path</span>=<span class="string">classpath:/templates/</span></span><br><span class="line"><span class="comment">#限制类型</span></span><br><span class="line"><span class="meta">spring.freemarker.suffix</span>=<span class="string">.ftl</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot安全管理</title>
    <url>/2021/10/27/SpringBoot%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h2 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h2><ul>
<li>SpringBoot安全管理</li>
</ul>
<h3 id="一、SpringBoot安全管理"><a href="#一、SpringBoot安全管理" class="headerlink" title="一、SpringBoot安全管理"></a>一、SpringBoot安全管理</h3><p><a href="https://www.cnblogs.com/crazy-lc/p/12361118.html">SpringBoot安全管理–（一）SpringSecurity基本配置 - CrazyLL - 博客园 (cnblogs.com)</a></p>
<h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h4><ul>
<li>项目需要走严格的认证和授权</li>
<li>java领域中实现认证和授权的框架有两个<ul>
<li>shiro</li>
<li>Spring security</li>
</ul>
</li>
<li>shiro是一个<font color='#d15252'>轻量级</font>的框架，认证、授权、会话管理、密码管理、缓存管理</li>
<li>Spring Security 是<font color='#d15252'>相对复杂</font>的安全管理框架，功能会比shiro强大，权限控制级别会更高</li>
</ul>
<h4 id="2-使用步骤"><a href="#2-使用步骤" class="headerlink" title="2.使用步骤"></a>2.使用步骤</h4><h5 id="基于内存以及默认的安全认证"><a href="#基于内存以及默认的安全认证" class="headerlink" title="基于内存以及默认的安全认证"></a>基于<font color='#d15252'>内存</font>以及默认的安全认证</h5><ul>
<li><p>添加依赖</p>
<p><img src="https://i.loli.net/2021/10/27/f72hdTaxwqkUE6u.png" alt="image-20211027090955554"></p>
<ul>
<li>也可以手动添加</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        security安全认证依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>默认用户名user，默认密码将在控制台打印</p>
<ul>
<li><p>可以在application.properties中配置默认的用户名和密码还有用户角色</p>
<p><img src="https://i.loli.net/2021/10/27/S4kw5JrUe6XMn1y.png" alt="image-20211027112201652"></p>
</li>
<li><p>也可以自定义Config方法</p>
</li>
</ul>
</li>
<li><p>创建MyWebSecurity<font color='#d15252'>Config</font>类</p>
<ul>
<li><p>继承WebSecurityConfigurerAdapter类</p>
</li>
<li><p>添加密码编译器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 密码的编码器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> NoOpPasswordEncoder.getInstance();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>添加基于内存的Authentication认证</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    auth.inMemoryAuthentication().withUser(<span class="string">&quot;root&quot;</span>).password(<span class="string">&quot;123456&quot;</span>).roles(<span class="string">&quot;DBA&quot;</span>).</span><br><span class="line">            and().</span><br><span class="line">            withUser(<span class="string">&quot;admin&quot;</span>).password(<span class="string">&quot;123456&quot;</span>).roles(<span class="string">&quot;ADMIN&quot;</span>,<span class="string">&quot;DBA&quot;</span>).and().</span><br><span class="line">            withUser(<span class="string">&quot;gikh&quot;</span>).password(<span class="string">&quot;123456&quot;</span>).roles(<span class="string">&quot;USER&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果重写了该方法，则是基于内存认证，SpringBoot<font color='#d15252'>不会再自动给出</font>默认的密码</li>
</ul>
<p><img src="https://i.loli.net/2021/10/27/OT6BwRbkCDSKztM.png" alt="image-20211027102246833"></p>
</li>
</ul>
</li>
<li><p>编写控制器</p>
<p><img src="https://i.loli.net/2021/10/27/428vUGYjFTXZd3y.png" alt="image-20211027101230930"></p>
</li>
<li><p>启动项目，访问程序，会自动弹出登录页面</p>
<ul>
<li>使用用户名user和控制台给出的默认密码进行登录</li>
</ul>
</li>
</ul>
<h5 id="基于http的安全认证"><a href="#基于http的安全认证" class="headerlink" title="基于http的安全认证"></a>基于<font color='#d15252'>http</font>的安全认证</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8081/springsecurity  ---&gt; 我用一个 # 代替</span><br><span class="line"></span><br><span class="line">   #/admin/hello  这个地址  admin访问权限的能访问</span><br><span class="line">   #/user/hello  这个地址  admin和user权限都能访问</span><br><span class="line">   #/dba/hello  这个地址   root访问权限的能访问</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/10/27/P6ULVtsOjGQu8ex.png" alt="image-20211027101816112"></p>
<ul>
<li><p>在MyWebSecurity<font color='#d15252'>Config</font>中添加</p>
<p><img src="https://i.loli.net/2021/10/27/xdqCMSWzvj7so4Y.png" alt="image-20211027102412118"></p>
<p><img src="https://i.loli.net/2021/10/27/wvUN24tHOFIdAbE.png" alt="image-20211027103652126"></p>
</li>
</ul>
<h5 id="基于数据库的安全认证"><a href="#基于数据库的安全认证" class="headerlink" title="基于数据库的安全认证"></a>基于数据库的安全认证</h5><ul>
<li><p>准备三张表</p>
<ul>
<li><p>用户表 users</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> users(</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">	username <span class="type">varchar</span>(<span class="number">200</span>),</span><br><span class="line">	password <span class="type">varchar</span>(<span class="number">200</span>),</span><br><span class="line">    enabled <span class="type">int</span>,</span><br><span class="line">    locked <span class="type">int</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/10/27/5rU8gO9nxQTK2us.png" alt="image-20211027151938266"></p>
</li>
<li><p>角色表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> role(</span><br><span class="line">	id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">	rname <span class="type">VARCHAR</span>(<span class="number">200</span>),</span><br><span class="line">	nameZh <span class="type">VARCHAR</span>(<span class="number">200</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/10/27/rqJHypIw3ozu5Rf.png" alt="image-20211027151920347"></p>
</li>
<li><p>用户角色关联表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--   用户和角色的关联表</span></span><br><span class="line">  <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> user_role(</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">	uid <span class="type">INT</span>,  <span class="comment">-- 用户的编号`role`</span></span><br><span class="line">	rid <span class="type">INT</span>  <span class="comment">-- 角色的id </span></span><br><span class="line">  )</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/10/27/zLcpYdwo92q3eK8.png" alt="image-20211027151927632"></p>
</li>
</ul>
</li>
<li><p>创建用户表，角色表对应的pojo层类</p>
<ul>
<li><p>User用户类需要实现接口UserDetails</p>
<ul>
<li><p>User类中还需要一个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一个用户可能有多个角色</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Role&gt; roles;</span><br></pre></td></tr></table></figure></li>
<li><p>重写接口方法</p>
<p><img src="https://i.loli.net/2021/10/27/CMiZ4u5HY3OIVwx.png" alt="image-20211027153021666"></p>
</li>
</ul>
</li>
<li><p>Role角色表实体类正常创建</p>
</li>
</ul>
</li>
<li><p>创建Mapper层</p>
<p><img src="https://i.loli.net/2021/10/27/HnAE6RTFzpfYGth.png" alt="image-20211027162322896"></p>
<p><img src="https://i.loli.net/2021/10/27/y34G1Ered8jUHlV.png" alt="image-20211027162332604"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建Config层</p>
<ul>
<li><p>和基于内存/http一样，继承自WebSecurityConfigurerAdapter</p>
</li>
<li><p>注入userService层对象</p>
</li>
<li><p>Authentication认证从数据库中获取权限</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">auth.userDetailsService(usersService);</span><br></pre></td></tr></table></figure></li>
<li><p>基于http的安全认证，根据数据库表修改用户名权限</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                                            <span class="comment">//表示访问admin/路径的必须要  ADMIN权限</span></span><br><span class="line">    http.authorizeRequests().antMatchers(<span class="string">&quot;admin/**&quot;</span>).access(<span class="string">&quot;hasAnyRole(&#x27;admin&#x27;)&quot;</span>)</span><br><span class="line">            .antMatchers(<span class="string">&quot;/user/**&quot;</span>).access(<span class="string">&quot;hasAnyRole(&#x27;admin&#x27;,&#x27;user&#x27;)&quot;</span>)</span><br><span class="line">            .antMatchers(<span class="string">&quot;/dba/**&quot;</span>).access(<span class="string">&quot;hasAnyRole(&#x27;admin&#x27;) and hasRole(&#x27;dba&#x27;)&quot;</span>).anyRequest().authenticated().and()</span><br><span class="line">            .formLogin().loginProcessingUrl(<span class="string">&quot;/login&quot;</span>).permitAll().and().cors().disable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/10/27/fSqe6XLdVaRlzgp.png" alt="image-20211027154321211"></p>
</li>
</ul>
</li>
<li><p>创建Service层</p>
<ul>
<li>注入UserMapper</li>
<li>实现接口UserDetailsService<ul>
<li>重写一个方法（检索用户是否存在）<ul>
<li>如果存在给予授权</li>
<li>如果不存在抛出异常</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/10/27/ztep45PHDjkbmFU.png" alt="image-20211027155710132"></p>
</li>
<li><p>创建Controller层</p>
<p><img src="https://i.loli.net/2021/10/27/Lyhq7iXgkBt3EeF.png" alt="image-20211027155754204"></p>
</li>
</ul>
<h4 id="3-补充知识点"><a href="#3-补充知识点" class="headerlink" title="3.补充知识点"></a>3.补充知识点</h4><ul>
<li><p>明文加密代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span></span>&#123;</span><br><span class="line">    BCryptPasswordEncoder encoder = <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    System.out.println(encoder.encode(<span class="string">&quot;123456&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Security</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot特性、核心、配置文件等</title>
    <url>/2021/10/26/SpringBoot%E7%89%B9%E6%80%A7%E3%80%81%E6%A0%B8%E5%BF%83%E3%80%81%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%AD%89/</url>
    <content><![CDATA[<h2 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h2><h3 id="一、SpringBoot"><a href="#一、SpringBoot" class="headerlink" title="一、SpringBoot"></a>一、SpringBoot</h3><h4 id="1-SpringBoot的特性"><a href="#1-SpringBoot的特性" class="headerlink" title="1.SpringBoot的特性"></a>1.SpringBoot的特性</h4><ul>
<li>能够快速创建一个独立的spring应用</li>
<li>不需要配置tomcat，直接运行main方法即可</li>
<li>使用starter场景启动器，能够自动导入很多依赖</li>
<li>无xml配置的开发模式</li>
<li>提供健康检查机制</li>
</ul>
<h4 id="2-SpringBoot的四大核心"><a href="#2-SpringBoot的四大核心" class="headerlink" title="2.SpringBoot的四大核心"></a>2.SpringBoot的<font color='#d15252'>四大核心</font></h4><ul>
<li>自动配置<ul>
<li>针对spring的常用功能，SpringBoot能够提供自动配置</li>
</ul>
</li>
<li>起步以来<ul>
<li>你只需要告诉SpringBoot你需要什么功能，它就能引入相关的功能</li>
</ul>
</li>
<li>Actuator健康检查<ul>
<li>可以探究SpringBoot应用程序的内部信息</li>
</ul>
</li>
<li>命令行界面 <ul>
<li>是一个可选的特性，了解即可</li>
</ul>
</li>
</ul>
<h4 id="3-了解-yml配置文件"><a href="#3-了解-yml配置文件" class="headerlink" title="3.了解.yml配置文件"></a>3.了解.yml配置文件</h4><p><img src="https://i.loli.net/2021/10/25/tEsONdHXD9JTq6G.png" alt="image-20211025130953194"></p>
<p><img src="https://i.loli.net/2021/10/25/Gl3VmkQO4Pevy7H.png" alt="image-20211025131248185"></p>
<ul>
<li><p>语法格式不同，但作用一样</p>
</li>
<li><p>注意需要空格</p>
</li>
<li><p>两种配置文件不能同时存在，后期使用yml情况居多，特别是使用码云托管时</p>
<ul>
<li>如果两种文件同时存在，默认执行的是第一个文件</li>
</ul>
</li>
<li><p><font color='#d15252'>yml</font></p>
<ul>
<li>是一种yaml格式的配置文件，主要采用一定的空格</li>
</ul>
</li>
</ul>
<h4 id="4-多环境配置"><a href="#4-多环境配置" class="headerlink" title="4.多环境配置"></a>4.多环境配置</h4><ul>
<li><p>多环境配置操作</p>
<ul>
<li>新建application-dev.yml文件</li>
<li>新建application-test.yml文件</li>
<li>在application.yml文件中，通过添加spring-profiles-active属性，指定开发环境</li>
</ul>
<p><img src="https://i.loli.net/2021/10/25/DkXoLxTCf1OYZrj.png" alt="image-20211025131809745"></p>
</li>
</ul>
<h4 id="5-自定义配置"><a href="#5-自定义配置" class="headerlink" title="5.自定义配置"></a>5.自定义配置</h4><h5 id="Ⅰ-自定义配置信息"><a href="#Ⅰ-自定义配置信息" class="headerlink" title="Ⅰ. 自定义配置信息"></a>Ⅰ. 自定义配置信息</h5><p>使用注解@Value注解，完成自定义配置</p>
<ul>
<li><p>首先在application配置文件中，添加自定义的信息</p>
<p><img src="https://i.loli.net/2021/10/25/q7SfTQIKU4dCo6z.png" alt="image-20211025132657832"></p>
</li>
<li><p>在自定义类中定义变量，并添加@Value注解，赋值给出配置文件中的name</p>
<p><img src="https://i.loli.net/2021/10/25/OTIlespbCSV6UMQ.png" alt="image-20211025132950255"></p>
</li>
<li><p>使用RequsetMapping注解，将信息打印到前端页面查看</p>
<p><img src="https://i.loli.net/2021/10/25/aiJTBjheCIRl8DK.png" alt="image-20211025135855346"></p>
</li>
</ul>
<h5 id="Ⅱ-将自定义配置信息映射成一个对象"><a href="#Ⅱ-将自定义配置信息映射成一个对象" class="headerlink" title="Ⅱ. 将自定义配置信息映射成一个对象"></a>Ⅱ. 将自定义配置信息映射成一个对象</h5><ul>
<li><p>自定义一个pojo（javabean类）</p>
<ul>
<li><p>通过注解设置前缀</p>
</li>
<li><p>定义成员变量</p>
</li>
<li><p><font color='#d15252'>前缀+成员变量名称 = 配置文件中的name</font></p>
</li>
<li><p>定义构造方法，get/set方法，toSring方法</p>
</li>
</ul>
<p><img src="https://i.loli.net/2021/10/25/V1vQ5uIS6Edsfp4.png" alt="image-20211025141034667"></p>
</li>
<li><p>Controller层添加pojo类成员变量，使用get/set方法取值即可</p>
<p><img src="https://i.loli.net/2021/10/25/LM2SHRpPkxfVBzl.png" alt="image-20211025141114059"></p>
</li>
</ul>
<h4 id="6-SpringBoot使用jsp"><a href="#6-SpringBoot使用jsp" class="headerlink" title="6.SpringBoot使用jsp"></a>6.SpringBoot使用jsp</h4><ul>
<li>添加依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- web  依赖 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- servlet 依赖 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- tomcat 的支持.--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>在pom.xml文件中的&lt; build &gt;中添加配置</p>
<ul>
<li>指定编译文件夹</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                源文件位置--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/webapp<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                编译的目录 不可以乱写--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>META-INF/resources<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                    **表示webapp目录以及子目录，  *.*表示所有--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/10/25/wfx5zZGhAjQcmve.png" alt="image-20211025142207877"></p>
</li>
<li><p>在resources下新建目录webapp，并设计项目结构设置为Web</p>
<ul>
<li>新建index.jsp页面</li>
</ul>
</li>
<li><p>在application.properties中添加指定目录</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#指定目录  --- 类似于视图解析器</span></span><br><span class="line"><span class="comment"># 前缀 ：一旦选择/就会在webapp根目录下进行选址</span></span><br><span class="line"><span class="meta">spring.mvc.view.prefix</span>=<span class="string">/</span></span><br><span class="line"><span class="comment">#后缀</span></span><br><span class="line"><span class="meta">spring.mvc.view.suffix</span>=<span class="string">.jsp</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/10/25/OQcd5nFreut3AgX.png" alt="image-20211025190928579"></p>
</li>
<li><p>开发控制器</p>
<p><img src="https://i.loli.net/2021/10/25/arkJKq41RDvWEhl.png" alt="image-20211025191401757"></p>
<ul>
<li>index.jsp中使用 ${data}取值即可</li>
</ul>
</li>
</ul>
<h4 id="7-使用SpringBoot继承Mybatis"><a href="#7-使用SpringBoot继承Mybatis" class="headerlink" title="7.使用SpringBoot继承Mybatis"></a>7.使用SpringBoot继承Mybatis</h4><ul>
<li><p>新建项目，选择添加web模块，添加SQL中的MySQL Driver模块</p>
</li>
<li><p>在pom文件中添加mybatis启动器依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>默认mysql-connect版本是8. 可以手动更改</li>
</ul>
</li>
<li><p>在application.properties中添加连接数据库的信息</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据库配置</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">000909</span></span><br><span class="line"><span class="comment">#注意驱动</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql:///springboot</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/10/25/YUMOVA461TBvEfi.png" alt="image-20211025193216797"></p>
</li>
<li><p>使用反向生成工具</p>
<p><img src="https://i.loli.net/2021/10/25/4kEbcIvTu6lARet.png" alt="image-20211025200931951"></p>
</li>
<li><p>mapper层添加注解@Mapper</p>
</li>
<li><p>添加Controller层</p>
<p><img src="https://i.loli.net/2021/10/25/hZFz4BR9joAPfym.png" alt="image-20211025203716148"></p>
</li>
<li><p>添加Service层</p>
<ul>
<li><p>创建接口，创建实现类</p>
<p><img src="https://i.loli.net/2021/10/25/gCpDnLu3GdFUVeY.png" alt="image-20211025201730510"></p>
</li>
<li><p>如果使用@Auto注解，会飘红，更改设置解决</p>
<p><img src="https://i.loli.net/2021/10/25/aQkCH4ZN35SRiYX.png" alt="image-20211025201822480"></p>
</li>
</ul>
</li>
<li><p>pom.xml中添加resource设置，将mapper中的xml文件添加到配置中</p>
<p><img src="https://i.loli.net/2021/10/25/1KQJSIr3ZFkTEht.png" alt="image-20211025203819161"></p>
<ul>
<li><p>如果将mapper中的xml文件放在resources下，包名需要一致，并且在application.properties中添加相关配置</p>
<p><img src="https://i.loli.net/2021/10/25/CDSYw4tNeRKM6hi.png" alt="image-20211025204533961"></p>
</li>
</ul>
</li>
</ul>
<h4 id="8-事务的使用"><a href="#8-事务的使用" class="headerlink" title="8. 事务的使用"></a>8. 事务的使用</h4><p><img src="https://i.loli.net/2021/10/25/Q4srKakLbi9oujE.png" alt="image-20211025210301390"></p>
<ul>
<li>一个update方法中，在业务逻辑层实现类<font color='#d15252'>service</font>中更新操作执行完毕后，手动创造一个异常<ul>
<li>发现update正常执行，执行完成后，才报异常<ul>
<li>即没有把整个方法作为一个单元，而是顺序执行，知道报错</li>
</ul>
</li>
<li>一旦我们加了<font color='#d15252'>@Transactional</font> 注解<ul>
<li>就会将整个方法看作一个整体，如果有错误，更新操作也不会执行</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="9-注解"><a href="#9-注解" class="headerlink" title="9.注解"></a>9.注解</h4><p>@Controller</p>
<ul>
<li>用于控制器中，表示控制器</li>
</ul>
<p>@RestController</p>
<ul>
<li>@Controller + @ResponseBody<ul>
<li>返回值是String或json，多方法需要注意</li>
</ul>
</li>
</ul>
<p>@RequestMapping</p>
<ul>
<li>请求映射<ul>
<li>代表Get请求</li>
<li>可以通过设置属性值，支持Post请求</li>
</ul>
</li>
</ul>
<p>@GetMapping</p>
<ul>
<li>是RequestMapping和get请求的结合体<ul>
<li>只能支持get请求</li>
</ul>
</li>
</ul>
<p>@PostMapping</p>
<ul>
<li>是RequestMapping和post请求的结合体<ul>
<li>只能支持Post请求</li>
</ul>
</li>
</ul>
<p>@PutMapping</p>
<ul>
<li>是RequestMapping和put请求的结合体<ul>
<li>只支持put请求</li>
</ul>
</li>
</ul>
<p>@DeleteMapping</p>
<ul>
<li>是RequestMapping和delete请求的结合体<ul>
<li>只支持delete</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC</title>
    <url>/2021/10/22/SpringMVC/</url>
    <content><![CDATA[<h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><h3 id="一、MVC"><a href="#一、MVC" class="headerlink" title="一、MVC"></a>一、MVC</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h4><ul>
<li><p>目的：解耦</p>
</li>
<li><p>发展史</p>
<ul>
<li>Model1<ul>
<li>将JSP和代码（Javabeans,以前什么业务都干）分开了</li>
</ul>
</li>
<li>Model2<ul>
<li>将页面控制和逻辑处理彻底分离，达到部分解耦的目的</li>
</ul>
</li>
<li>MVC<ul>
<li>三层架构是MVC衍生出来的<ul>
<li>将业务逻辑细分为业务逻辑和持久化逻辑两层</li>
</ul>
</li>
<li>表示层（JSP/Servlet）</li>
<li>业务逻辑层（业务规则）</li>
<li>持久化层（持久化逻辑，JDBC）</li>
</ul>
</li>
</ul>
</li>
<li><p>什么是SpringMVC？</p>
<ul>
<li><font color='#d15252'>处理表现层</font>的一个框架    </li>
<li>底层：封装了Servlet，抽取了Servlet的共性功能（请求，跳转）</li>
</ul>
</li>
<li><p>SpringMvc的控制核心：<font color='#d15252'>DispatcherServlet</font>类</p>
<ul>
<li>在web.xml中配置</li>
<li>起到一个拦截器的作用</li>
</ul>
</li>
</ul>
<h4 id="2-MVC入门案例"><a href="#2-MVC入门案例" class="headerlink" title="2.MVC入门案例"></a>2.MVC入门案例</h4><ul>
<li><p>第一步：创建Maven项目</p>
<ul>
<li>添加web模块</li>
<li>配置Tomcat</li>
</ul>
</li>
<li><p>第二步：导入依赖坐标</p>
<p><img src="https://i.loli.net/2021/10/13/9govS4Y7xFycwui.png" alt="image-20211013093322970"></p>
</li>
<li><p>第三步：SpingMVC配置文件</p>
<ul>
<li><p>创建springmvc.xml配置文件，导入约束</p>
</li>
<li><p>在web.xml文件中，添加servlet标签和servlet-mapping标签，使Springmvc.xml配置文件生效</p>
<p><img src="https://i.loli.net/2021/10/15/z1wDicp2SPO97WN.png" alt="image-20211015173623005"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        整个应用的启动加载（优先级）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>2<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>第五步：创建Controller层</p>
<ul>
<li><p>该类是一个普通的类，不具备Controller的功能 </p>
<ul>
<li><p>注入到IOC容器中</p>
<ul>
<li>可以通过注解的方式注入IOC</li>
</ul>
</li>
<li><p>因为mvc是属于Spring的，所以不需要另外创建一个Spring配置文件</p>
</li>
<li><p>不要忘了开启注解扫描</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    开启注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>该方法是一个普通方法，不具备处理请求的能力 </p>
<ul>
<li>通过添加<font color='#d15252'>@RequestMapping()</font>注解的方式<ul>
<li>（）内要加/</li>
</ul>
</li>
<li>返回值必须是是一个String类型</li>
</ul>
<p><img src="https://i.loli.net/2021/10/15/KbGNMtWCxriga4z.png" alt="image-20211015173819640"></p>
</li>
</ul>
</li>
</ul>
<h4 id="3-SpringMVC执行过程"><a href="#3-SpringMVC执行过程" class="headerlink" title="3.SpringMVC执行过程"></a>3.SpringMVC执行过程</h4><p><img src="https://i.loli.net/2021/10/13/18FCQLYjmHqiwK9.png" alt="image-20211013112144975"></p>
<p>请求 ——&gt; 前端控制器（DispacherServlet） ——&gt;  HandllerMapping（处理映射器）– &gt;dis  </p>
<ul>
<li><p>根据xml配置、注解，生成处理器对象及处理拦截器，交还给前端控制器</p>
</li>
<li><p>HandllerAdaptor 处理器适配器：封装</p>
</li>
</ul>
<h4 id="4-SpringMVC三大组件"><a href="#4-SpringMVC三大组件" class="headerlink" title="4.SpringMVC三大组件"></a>4.SpringMVC三大组件</h4><ul>
<li>处理器映射器 HandlerMapping</li>
<li>处理器适配器 HandlerAdptor</li>
<li>视图解析器 ViewResolve</li>
</ul>
<h5 id="Ⅰ-组件配置"><a href="#Ⅰ-组件配置" class="headerlink" title="Ⅰ.组件配置"></a>Ⅰ.组件配置</h5><ul>
<li><p>处理器映射器 HandlerMapping和处理器适配器 HandlerAdptor</p>
<ul>
<li>在springmvc配置文件中添加组件配置</li>
</ul>
<p><img src="https://i.loli.net/2021/10/15/k8LQDMB95usYv6X.png" alt="image-20211015175346182"></p>
<ul>
<li>相当于映射器和适配器功能的增强，以后可以处理json文件</li>
</ul>
</li>
<li><p>视图解析器 ViewResolve</p>
<ul>
<li>想要使用它，进行配置，需要将他注入到IOC容器当中</li>
</ul>
<p><img src="https://i.loli.net/2021/10/15/zAIhc16Xow8xnOb.png" alt="image-20211015180334538"></p>
<ul>
<li>例如retuan字符串，其实是一个逻辑视图<ul>
<li>视图解析器通过前缀和后缀进行判断</li>
<li>前缀：prefix</li>
<li>后缀：suffix</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/10/15/gTDO16cqAPZ2iku.png" alt="image-20211015180555986"></p>
</li>
</ul>
<blockquote>
<p>如果不配置这些，会走默认的</p>
</blockquote>
<h4 id="5-RequestMapping注解"><a href="#5-RequestMapping注解" class="headerlink" title="5.@RequestMapping注解"></a>5.@RequestMapping注解</h4><ul>
<li><p>可以加载在方法上，也可以加载在类上</p>
<ul>
<li>如果两个位置都加了映射注解，想要访问资源，需要将路径都写上<ul>
<li>类上：一级目录，如果没有，一级目录就是应用的根目录</li>
<li>方法：二级目录</li>
</ul>
</li>
</ul>
</li>
<li><p>属性</p>
<ul>
<li><p><strong>value</strong>：值</p>
<ul>
<li>如果只要value一个属性，value属性可以省略</li>
</ul>
</li>
<li><p><strong>method</strong>()：设置请求的方式，返回一个RequestMthod[]类型 </p>
<ul>
<li><p>请求方式</p>
<p><img src="https://i.loli.net/2021/10/15/NntxyR3v4o5DqCZ.png" alt="image-20211015182829055"></p>
</li>
<li><p>枚举类型通过类名.枚举名即可使用</p>
</li>
</ul>
<p><img src="https://i.loli.net/2021/10/15/qpExsItTagN3lR8.png" alt="image-20211015182925465"></p>
<ul>
<li>这里举例设置Post请求可以访问</li>
</ul>
</li>
<li><p><strong>params</strong>：设置参数，请求时必须携带这个参数</p>
<ul>
<li>参数是一个数组类型    </li>
</ul>
<p><img src="https://i.loli.net/2021/10/15/JbWulqrzif4E3p7.png" alt="image-20211015183719690"></p>
<ul>
<li><p>这里举例必须携带一个名为id的参数，如果不带，就会报错</p>
<p><img src="https://i.loli.net/2021/10/15/zf3MPpw12ULriOo.png" alt="image-20211015183752390"></p>
</li>
<li><p>parmas会<font color='#d15252'>自动转换数据类型</font></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="6-SpringMvc的请求（参数）"><a href="#6-SpringMvc的请求（参数）" class="headerlink" title="6.SpringMvc的请求（参数）"></a>6.SpringMvc的请求（参数）</h4><ul>
<li><p>参数的类型</p>
<ul>
<li><p>基本数据类型</p>
<p><img src="https://i.loli.net/2021/10/15/c2g7Qny4ZU6xDVu.png" alt="image-20211015185020204"></p>
<ul>
<li>方法声明变量名和参数名称保持一致，用于接收数据</li>
<li>就算不定义params属性，也可以传递参数，注解只是起到了提醒、约束的作用</li>
</ul>
<blockquote>
<p>基本数据类型包含String类型</p>
</blockquote>
</li>
<li><p>数组类型</p>
<ul>
<li><p>使用情况：name名称是一样的</p>
<ul>
<li>前端提交数据时的name属性值</li>
</ul>
<p><img src="https://i.loli.net/2021/10/15/t412FkvoLgQ6VSY.png" alt="image-20211015190351082"></p>
<p><img src="https://i.loli.net/2021/10/15/bcxIAiE8qYar15Q.png" alt="image-20211015190603057"></p>
</li>
</ul>
</li>
<li><p>集合类型</p>
<ul>
<li>获取集合参数时，这个集合必须要包含在一个POJO中</li>
<li>name=”集合名称[索引].成员变量名称”</li>
</ul>
<p><img src="https://i.loli.net/2021/10/15/fdtwD3PmNQU2eok.png" alt="image-20211015193021052"></p>
<p><img src="https://i.loli.net/2021/10/15/8x27SknYUmedLQJ.png" alt="image-20211015193031189"></p>
<p><img src="https://i.loli.net/2021/10/15/Cr5HydRFfDZw3x1.png" alt="image-20211015193040900"></p>
</li>
<li><p>POJO（引用数据类型）</p>
<p><img src="https://i.loli.net/2021/10/15/ZFcaeWMN9TtIhKs.png" alt="image-20211015185856706"></p>
<p><img src="https://i.loli.net/2021/10/15/D9VF63HbsaMxndT.png" alt="image-20211015190014501"></p>
<ul>
<li>引用的自定义数据类型，SpringMvc也会帮我们<font color='#d15252'>自动封装成对象</font></li>
<li>需要注意的是：<ul>
<li>成员变量的名称和参数名称保持一致</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="7-请求乱码问题"><a href="#7-请求乱码问题" class="headerlink" title="7.请求乱码问题"></a>7.请求乱码问题</h4><ul>
<li>通过设置过滤器全局过滤，设置Encoding属性设置编码格式，解决乱码问题</li>
</ul>
<p><img src="https://i.loli.net/2021/10/15/nVKqvbOZ8BpczLU.png" alt="image-20211015194332816"></p>
]]></content>
      <categories>
        <category>Spring框架</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringMvc</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC自定义数据类型转换</title>
    <url>/2021/10/22/SpringMVC%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h2 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h2><ul>
<li>SpringMvc</li>
</ul>
<h3 id="一、自定义数据类型转换"><a href="#一、自定义数据类型转换" class="headerlink" title="一、自定义数据类型转换"></a>一、自定义数据类型转换</h3><h4 id="1-Converter接口"><a href="#1-Converter接口" class="headerlink" title="1.Converter接口"></a>1.Converter接口</h4><p><font color='#d15252'>Converter接口</font>实现自定义数据类型转换</p>
<ul>
<li>自定义类，实现Converter&lt;String, Date&gt;接口</li>
<li>重写方法</li>
</ul>
<p><img src="https://i.loli.net/2021/10/14/uGpTfN8kBvoCR9l.png" alt="image-20211014093911112"></p>
<ul>
<li><p>返回值类型就是需要转换成的类型，带参String s 是要被转换的数据类型</p>
<ul>
<li>最后由return带回转换后的返回值</li>
</ul>
</li>
<li><p>springMVC.xml配置文件中，增强映射器和适配器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    增强映射器和适配器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">&quot;c&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>自定义转换器配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    自定义转换器配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;c&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;converters&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.controller.DateConverter&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/10/14/elvB96xH7mGYadF.png" alt="image-20211014094226948"></p>
</li>
</ul>
<h4 id="2-RequestParam注解"><a href="#2-RequestParam注解" class="headerlink" title="2.@RequestParam注解"></a>2.@RequestParam注解</h4><p><img src="https://i.loli.net/2021/10/14/UAapBr86ob2HRGY.png" alt="image-20211014101835667"></p>
<ul>
<li>name属性就是起名字，在get请求传参时可以用ida，也可以用id</li>
<li>defaultValue是默认值<ul>
<li>如果有默认值，还传入了参数，最后得到的是默认值</li>
</ul>
</li>
<li>required：设置是否必须传递参数 ，默认是true<ul>
<li>如果参数有默认值，则不会报错，会默认变为true</li>
<li>如果没有默认值，并且设置为false，则必须传递参数，不然就会报错</li>
</ul>
</li>
</ul>
<h4 id="3-RequestHeader注解"><a href="#3-RequestHeader注解" class="headerlink" title="3.@RequestHeader注解"></a>3.@RequestHeader注解</h4><ul>
<li>获取请求头信息</li>
</ul>
<p>CookieValue注解</p>
<h4 id="4-获取原始Servlet的API"><a href="#4-获取原始Servlet的API" class="headerlink" title="4.获取原始Servlet的API"></a>4.获取原始Servlet的API</h4><ul>
<li>把API当作参数传递即可，MVC框架会自动将接口注入到IOC容器中</li>
</ul>
<h4 id="5-SpringMVC的响应"><a href="#5-SpringMVC的响应" class="headerlink" title="5.SpringMVC的响应"></a>5.SpringMVC的响应</h4><ul>
<li><p>返回值为字符串值的逻辑视图</p>
<ul>
<li>返回字符串逻辑视图直接跳转</li>
</ul>
</li>
<li><p>返回值为void原始ServletAPI</p>
<ul>
<li>可以直接打印到网页</li>
</ul>
<p><img src="https://i.loli.net/2021/10/16/d4hHLXW8TDU1tsm.png" alt="image-20211016194859824"></p>
<ul>
<li>可以通过作用域进行赋值取值</li>
</ul>
<p><img src="https://i.loli.net/2021/10/16/ecna4pENWwsTDlV.png" alt="image-20211016195033671"></p>
<ul>
<li><p>可以使用res,resp的功能</p>
<p><img src="https://i.loli.net/2021/10/16/rtcZE1amq5Xil4v.png" alt="image-20211016195443307"></p>
</li>
</ul>
</li>
<li><p><font color='#d15252'>ModelANDViwe</font></p>
</li>
</ul>
<h4 id="6-请求转发和重定向"><a href="#6-请求转发和重定向" class="headerlink" title="6.请求转发和重定向"></a>6.请求转发和重定向</h4><ul>
<li><p>逻辑视图</p>
<ul>
<li><p>return “字符串”</p>
<ul>
<li>底层就是请求转发</li>
</ul>
<p><img src="https://i.loli.net/2021/10/22/wjnYdzb7HWCuxZ4.png" alt="image-20211016200515340"></p>
</li>
</ul>
</li>
</ul>
<h4 id="7-ModelandViwe响应数据"><a href="#7-ModelandViwe响应数据" class="headerlink" title="7.ModelandViwe响应数据"></a>7.ModelandViwe响应数据</h4><ul>
<li><p>方式一：方法中new </p>
<ul>
<li> new ModelAndView();</li>
<li>调用addObject()方法，设置数据模型（封装数据）<ul>
<li>传递两个String类型的参数，一个是name，一个是value</li>
</ul>
</li>
<li> 调用setViewName()方法，设置数据的视图</li>
</ul>
<p><img src="https://i.loli.net/2021/10/16/9tZ2eiBbYcnk7sD.png" alt="image-20211016201404553"></p>
</li>
<li><p>方式二：IOC自动注入，定义在参数上</p>
<p><img src="https://i.loli.net/2021/10/16/RzNuD6vlJUQjy4Z.png" alt="image-20211016201558691"></p>
</li>
</ul>
<h4 id="8-SessionAttribute注解"><a href="#8-SessionAttribute注解" class="headerlink" title="8.SessionAttribute注解"></a>8.SessionAttribute注解</h4><ul>
<li><p>位置：在类的声明上</p>
</li>
<li><p>将request数据存入HttpSession域中</p>
</li>
</ul>
<h4 id="8-开启静态资源的访问"><a href="#8-开启静态资源的访问" class="headerlink" title="8.开启静态资源的访问"></a>8.开启静态资源的访问</h4><h5 id="Ⅰ-什么是静态资源，为什么要开启访问？"><a href="#Ⅰ-什么是静态资源，为什么要开启访问？" class="headerlink" title="Ⅰ.什么是静态资源，为什么要开启访问？"></a>Ⅰ.什么是静态资源，为什么要开启访问？</h5><ul>
<li><p>比如要引入jq文件，文件引入没有错误，但是网页显示jq引入失败</p>
</li>
<li><p>原因就是web配置文件中的前端控制器将所有请求资源拦截并交给了映射器，映射器解析路径并进行拼接，最终交给适配器</p>
<p><img src="https://i.loli.net/2021/10/16/8gTjYzlnmFks2PO.png" alt="image-20211016203712794"></p>
<ul>
<li>所以我们需要开启静态资源的访问才能使用JQ文件</li>
</ul>
</li>
</ul>
<h5 id="Ⅱ-开启静态资源的方式"><a href="#Ⅱ-开启静态资源的方式" class="headerlink" title="Ⅱ.开启静态资源的方式"></a>Ⅱ.开启静态资源的方式</h5><ul>
<li><p>方式一</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    在SpringMVC配置文件中，放行指定资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/js/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/js/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:resources</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>方式二</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    在SpringMVC配置文件中，开启处理静态资源 -&gt;</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="9-Ajax异步交互"><a href="#9-Ajax异步交互" class="headerlink" title="9.Ajax异步交互"></a>9.Ajax异步交互</h4><ul>
<li><p>导入依赖</p>
<ul>
<li>和SpringMvc有关</li>
<li>SpringMvc默认MappingJackson2HttpMassageConverter对Json数据的转换</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        导入Ajax所需依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>环境搭建</p>
<ul>
<li><p>开启注解支持</p>
<p><img src="https://i.loli.net/2021/10/19/KacjwqL6Tt2YOyN.png" alt="image-20211019111021334"></p>
</li>
</ul>
</li>
<li><p>定义Ajax</p>
<p><img src="https://i.loli.net/2021/10/19/sxIzLNkPVhDCwqd.png" alt="image-20211019113948930"></p>
<p><img src="https://i.loli.net/2021/10/19/n24sqtMPDz9T7Wi.png" alt="image-20211019114005266"></p>
<ul>
<li>使用注解@RequestBody使类型转换</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Spring框架</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringMvc</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring依赖注入的分类</title>
    <url>/2021/10/22/Spring%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E7%9A%84%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<h3 id="一、依赖注入分类"><a href="#一、依赖注入分类" class="headerlink" title="一、依赖注入分类"></a>一、依赖注入分类</h3><ul>
<li>构造方法</li>
</ul>
<p><img src="https://i.loli.net/2021/09/29/N6Cdl9EOVYtUHWk.png" alt="image-20210929160114283"></p>
<ul>
<li>set方法<ul>
<li>ref标签</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/09/29/J4u8lBLzkQqfgUN.png" alt="image-20210929161648838"></p>
<ul>
<li><p>p命名空间法</p>
<ul>
<li><p>导入约束</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:p =&quot;http://www.springframework.org/schema/p&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://i.loli.net/2021/09/29/XiyMlPC68s7AS4w.png" alt="image-20210929162428596"></p>
</li>
<li><p>之前的内容补充</p>
</li>
</ul>
<p>依赖注入给对应JavaBean成员变量赋值</p>
<p><img src="https://i.loli.net/2021/10/08/mthzNEcTJlR392B.png" alt="image-20211008095556555"></p>
<ul>
<li>数组类型注入</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;u1&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.User&quot;</span>&gt;</span><br><span class="line">     &lt;property name=<span class="string">&quot;age&quot;</span> value=<span class="string">&quot;12&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">     &lt;property name=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;武松&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">     &lt;!--数组--&gt;</span><br><span class="line">     &lt;property name=<span class="string">&quot;arr&quot;</span>&gt;</span><br><span class="line">          &lt;array&gt;</span><br><span class="line">               &lt;value&gt;a&lt;/value&gt;</span><br><span class="line">               &lt;value&gt;b&lt;/value&gt;</span><br><span class="line"></span><br><span class="line">          &lt;/array&gt;</span><br><span class="line">     &lt;/property&gt;</span><br><span class="line">     &lt;property name=<span class="string">&quot;arrbook&quot;</span>&gt;</span><br><span class="line">         &lt;array&gt;</span><br><span class="line">              &lt;ref bean=<span class="string">&quot;book&quot;</span>&gt;&lt;/ref&gt;</span><br><span class="line">         &lt;/array&gt;</span><br><span class="line">     &lt;/property&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>List集合和数组一样</p>
</li>
<li><p>Map集合注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;property name=<span class="string">&quot;maps&quot;</span>&gt;</span><br><span class="line">           &lt;map&gt;</span><br><span class="line">               &lt;entry value=<span class="string">&quot;猪八戒&quot;</span> key=<span class="string">&quot;姓名&quot;</span>&gt;&lt;/entry&gt;</span><br><span class="line">           &lt;/map&gt;</span><br><span class="line">       &lt;/property&gt;</span><br><span class="line">       &lt;property name=<span class="string">&quot;map_books&quot;</span>&gt;</span><br><span class="line">           &lt;map&gt;</span><br><span class="line">               &lt;entry key=<span class="string">&quot;图书&quot;</span> value-ref=<span class="string">&quot;book&quot;</span>&gt;&lt;/entry&gt;</span><br><span class="line">           &lt;/map&gt;</span><br><span class="line">       &lt;/property&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="二、配置文件模块化"><a href="#二、配置文件模块化" class="headerlink" title="二、配置文件模块化"></a>二、配置文件模块化</h3><ul>
<li><p>传统的配置文件方式，依赖注入太多，容易乱，我们就可以对配置文件进行拆分，该方式就被称为配置文件模块化（根据三层架构、功能进行拆分）</p>
</li>
<li><p>采用<font color='#d15252'>主从配置文件</font>的方式，解决多个配置文件导入的问题</p>
<p><img src="https://i.loli.net/2021/10/08/qjA9KhzGkD4t235.png" alt="image-20211008102610015"></p>
</li>
</ul>
<h4 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h4><p>spring整合DBUtils（账户 增删改查 三层架构）</p>
<ul>
<li><p>导入依赖</p>
</li>
<li><p>创建实体类</p>
<p><img src="https://i.loli.net/2021/10/08/X7hqK2gEYT5cDL1.png" alt="image-20211008133831120"></p>
</li>
<li><p>创建Dao层</p>
<p><img src="https://i.loli.net/2021/10/08/5KMZCe8DAQtGVRO.png" alt="image-20211008153247862"></p>
<p><img src="https://i.loli.net/2021/10/08/i6Bj74Ho2JsKYM9.png" alt="image-20211008153255300"></p>
</li>
<li><p>创建dbc.properties文件并引入</p>
<p><img src="https://i.loli.net/2021/10/08/6CD1iO5ubUhnpTZ.png" alt="image-20211008150932187"></p>
<ul>
<li><p>在applicationcontext中读取jdbc.prperties</p>
</li>
<li><p>引入命名空间（在约束中导入）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/10/08/QEZo9hj4pT6SVOW.png" alt="image-20211008170938494"></p>
</li>
<li><p>引入约束</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">http://www.springframework.org/schema/context</span><br><span class="line">http://www.springframework.org/schema/context/spring-context.xsd</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/10/08/HpnyoOBRXVbaCcI.png" alt="image-20211008171243277"></p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    读取jdbc.prperties--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>完整约束代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="二、注解注入"><a href="#二、注解注入" class="headerlink" title="二、注解注入"></a>二、注解注入</h3><ul>
<li>利用反射的方式进行注入</li>
</ul>
<p><img src="https://i.loli.net/2021/10/08/8DjbOAt2MrP1mnT.png" alt="image-20211008155057212"></p>
<h4 id="1-普通注入"><a href="#1-普通注入" class="headerlink" title="1.普通注入"></a>1.普通注入</h4><p><img src="https://i.loli.net/2021/10/08/9Qtl5mKoiCZVWNJ.png" alt="image-20211008180231456"></p>
<ul>
<li><p><font color='#d15252'>开启扫描</font>注解</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>当使用@Component等四个注解时</p>
<ul>
<li>就等于在ioc中做了&lt; bean id=”” class=””&gt;</li>
<li>id就是默认的数据类型（类名小写）</li>
</ul>
<p><img src="https://i.loli.net/2021/10/08/TqxNZnF1cQ9WJ7o.png" alt="image-20211008175729182"></p>
<p><img src="https://i.loli.net/2021/10/08/wni27CW6N4SqTHf.png" alt="image-20211008175736913"></p>
<ul>
<li><p>也可以通过注解后加小括号<font color='#d15252'>起名</font></p>
<p><img src="https://i.loli.net/2021/10/08/cGMTsfqLp4OW8aQ.png" alt="image-20211008175941837"></p>
</li>
<li><ul>
<li>如果只有一个value值时，value<font color='#d15252'>可以省略</font></li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="2-依赖注入"><a href="#2-依赖注入" class="headerlink" title="2.依赖注入"></a>2.依赖注入</h4><ul>
<li>为成员变量依赖注入值</li>
</ul>
<p><img src="https://i.loli.net/2021/10/08/rfPNMRpAxWjBG6E.png" alt="image-20211008180247934"></p>
<ul>
<li>使用@Autowired进行依赖注入时，需要注意名字的问题<ul>
<li>比如一个父类有两个子类，这两个子类在依赖注入时，都属于P类型，如果按照类型匹配，就会报错，不知道匹配哪一个</li>
<li>需要<font color='#d15252'>配合@Qualifier</font>使用</li>
</ul>
</li>
<li>@Qualifier可以根据名字进行匹配<ul>
<li>名字：在普通注入类时通过加小括号起名</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Spring框架</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring框架</title>
    <url>/2021/10/22/Spring%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h2 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h2><ul>
<li>Spring</li>
</ul>
<h3 id="一、Spring"><a href="#一、Spring" class="headerlink" title="一、Spring"></a>一、Spring</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h4><p>什么是Spring？</p>
<ul>
<li><p>分层设计（持久层mybatis、业务层、控制层）</p>
</li>
<li><p>JavaSE/JavaEE应用full-stack<strong>（全栈式）轻量级</strong>开源的框架</p>
<ul>
<li>轻量级：服务、资源、耦合度</li>
</ul>
</li>
<li><p>两大核心</p>
<ul>
<li><p>IOC：控制反转（创建对象的主动权：new —-&gt;  Spring）</p>
</li>
<li><p>AOP：面向切面编程（在我们不改变源代码的情况下，对业务进行更改）</p>
<ul>
<li>比如输出123，要添加输出456，我们通过反射<font color='#d15252'>不改变源代码</font>的情况下修改业务</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sav</span><span class="params">()</span></span>&#123;sout(<span class="number">123</span>);sout(<span class="number">456</span>)&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="2-Spring框架的发展史"><a href="#2-Spring框架的发展史" class="headerlink" title="2.Spring框架的发展史"></a>2.Spring框架的发展史</h4><p><img src="https://i.loli.net/2021/09/29/LbshtyIPK2QEDfo.png" alt="image-20210929091645261"></p>
<h4 id="3-Spring优势（特点）"><a href="#3-Spring优势（特点）" class="headerlink" title="3.Spring优势（特点）"></a>3.Spring优势（特点）</h4><ul>
<li><p><font color='#d15252'>方便解耦</font>，简化开发</p>
<ul>
<li>spring也是一个容器，它可以对所有对象的创建和销毁提供维护，实现了解耦<ul>
<li>耦合对：对象之间的一种关系，所以要合理的使用耦合度（Spring_IOC）<ul>
<li>降低耦合度，编译时期不允许</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>AOP编程的支持</p>
<ul>
<li>了解：面向切面编程</li>
</ul>
</li>
<li><p>声明式事务的支持（数据库）</p>
<ul>
<li>通过配置（xml）来完成事务的支持，不需要手动的编写代码</li>
</ul>
</li>
<li><p>方便调试</p>
<ul>
<li>能够使用junt测试单元</li>
</ul>
</li>
<li><p>方便集成各种优秀的框架</p>
<ul>
<li>Spring框架这个组织，不仅仅生产技术，还搬运集成其他的技术</li>
</ul>
</li>
</ul>
<p>关于依赖</p>
<ul>
<li>也是一种类和类之间的一种关系</li>
</ul>
<h4 id="4-Spring的体系结构"><a href="#4-Spring的体系结构" class="headerlink" title="4.Spring的体系结构"></a>4.Spring的体系结构</h4><p><img src="https://i.loli.net/2021/09/29/e3JVNqfs8CHGybL.png" alt="image-20210929093741238"></p>
<p><img src="https://i.loli.net/2021/09/29/aGOP2sNokzD3h64.png" alt="image-20210929094350353"></p>
<h3 id="二、IOC控制反转-–-解耦"><a href="#二、IOC控制反转-–-解耦" class="headerlink" title="二、IOC控制反转 – 解耦"></a>二、IOC控制反转 – 解耦</h3><h4 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1.概念"></a>1.概念</h4><ul>
<li><p>解耦的原则</p>
<ul>
<li><font color='#d15252'>编译时期不依赖，运行时依赖</font></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一种方式 (存在严重的编译时依赖)</span></span><br><span class="line">	DriverManager.registerDriver(<span class="keyword">new</span> com.mysql.jdbc.Driver());</span><br><span class="line"><span class="comment">//第二种方式 (运行时依赖)</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-自定义IOC容器"><a href="#2-自定义IOC容器" class="headerlink" title="2.自定义IOC容器"></a>2.自定义IOC容器</h4><ul>
<li><p>实现Services层和Dao层进行解耦（反射）</p>
</li>
<li><p>步骤</p>
<ul>
<li>创建Java项目，导入自定义IOC相关坐标</li>
<li>编写Dao层和它的实现类</li>
<li>编写Service层和它的实现类</li>
<li>编写测试代码</li>
</ul>
</li>
<li><p>通过反射<font color='#d15252'>解耦</font></p>
</li>
<li><p>通过配置xml文件解决代码<font color='#d15252'>硬编码</font></p>
<ul>
<li><p>创建Beans.xml文件</p>
<p><img src="https://i.loli.net/2021/09/29/jlFMg31tEXJZGh5.png" alt="image-20210929103233693"></p>
</li>
<li><p>导入dom4j、jaxen依赖</p>
<p><img src="https://i.loli.net/2021/09/29/zsmS5ehWZtUKcok.png" alt="image-20210929103226102"></p>
<ul>
<li>jaxen就是Xpath</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/09/29/95CtOwyBNZlpWs1.png" alt="image-20210929103007045"></p>
<ul>
<li>创建BeanFactory工厂类，负责创建相关对象并存入容器中</li>
</ul>
<p><img src="https://i.loli.net/2021/09/29/cKDZbq81EB7Xj95.png" alt="image-20210929104519391"></p>
<ul>
<li><p>创建方法，用来获取对象</p>
<p><img src="https://i.loli.net/2021/09/29/fQLamWprjG9dzbB.png" alt="image-20210929104935847"></p>
</li>
</ul>
</li>
</ul>
<h4 id="3-Spring框架入门案例"><a href="#3-Spring框架入门案例" class="headerlink" title="3.Spring框架入门案例"></a>3.Spring框架入门案例</h4><ul>
<li><p>实现services层和Dao层进行解耦</p>
<ul>
<li>第一步：创建项目，导入依赖（Spring）</li>
<li>第二步：定义xml（解决硬编码）</li>
<li>第三步：容器中取相关对象</li>
<li>第四步：测试代码</li>
</ul>
</li>
<li><p>导入Spring依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.17.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改Service层，使用Spring加载xml文件中的内容，通过反射创建对象</p>
<p><img src="https://i.loli.net/2021/09/29/kSzA3J7IdcvaKjQ.png" alt="image-20210929134322759"></p>
</li>
</ul>
<h3 id="三、SpringAPI"><a href="#三、SpringAPI" class="headerlink" title="三、SpringAPI"></a>三、SpringAPI</h3><p><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/javadoc-api/">BeanFactory (Spring Framework 5.2.17.RELEASE API)</a></p>
<h4 id="1-BeanFactory"><a href="#1-BeanFactory" class="headerlink" title="1. BeanFactory"></a>1. BeanFactory</h4><ul>
<li>IOC容器的核心接口，它定义了ioc的基本功能（解析XML文件）<ul>
<li>但是已经过时，不推荐使用</li>
<li>在调用getbean方法时创建实例</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">XmlBeanFactory xmlBeanFactory = <span class="keyword">new</span> XmlBeanFactory(<span class="keyword">new</span> ClassPathResource(<span class="string">&quot;applicationContext.xml&quot;</span>));</span><br><span class="line">Object u = xmlBeanFactory.getBean(<span class="string">&quot;u&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="2-ApplicationContext"><a href="#2-ApplicationContext" class="headerlink" title="2. ApplicationContext"></a>2. ApplicationContext</h4><ul>
<li>代表应用上下文对象（Spring项目），可以获取Spring容器中的对象<ul>
<li>容器启动时创建对象</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext apc = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"><span class="comment">//从容器中取出对象</span></span><br><span class="line">UserDaoImp u =(UserDaoImp) apc.getBean(<span class="string">&quot;u&quot;</span>);</span><br></pre></td></tr></table></figure>



<h4 id="3-常用的类"><a href="#3-常用的类" class="headerlink" title="3.常用的类"></a>3.常用的类</h4><ul>
<li><font color='#d15252'>ClasspathClassPathXmlApplicationContext</font><ul>
<li>调用有参构造获取资源</li>
<li>配置文件必须放在当前项目中</li>
</ul>
</li>
<li>FileSystemXmlApplicationContext<ul>
<li>参数带绝对路径 —&gt; 配置文件可以随意放在任何地方</li>
</ul>
</li>
</ul>
<h4 id="4-常用的方法"><a href="#4-常用的方法" class="headerlink" title="4.常用的方法"></a>4.常用的方法</h4><ul>
<li><p>getBean()</p>
<ul>
<li>根据id获取IOC容器中的对象</li>
<li>getBean方法具有方法的重载</li>
</ul>
<p><img src="https://i.loli.net/2021/09/29/vaWgQwlO2RT9PUX.png" alt="image-20210929135344824"></p>
<ul>
<li>如果当IOC容器中有相同的id指向不同的类时，可以根据运行时状态匹配</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="function">Object <span class="title">getBean</span><span class="params">(String var1)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"><span class="comment">//根据id指定Bean</span></span><br><span class="line"></span><br><span class="line">   &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(String var1, Class&lt;T&gt; var2)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">   <span class="comment">//根据运行时状态指定Bean</span></span><br><span class="line"></span><br><span class="line">   <span class="function">Object <span class="title">getBean</span><span class="params">(String var1, Object... var2)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">   &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; var1)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"><span class="comment">//直接使用运行时状态指定Bean（用的较多）</span></span><br><span class="line"></span><br><span class="line">   &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; var1, Object... var2)</span> <span class="keyword">throws</span> BeansException</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/09/29/lu8VqNPwg1EFhc9.png" alt="image-20210929135922566"></p>
<p><img src="https://i.loli.net/2021/09/29/oCNmbjWP7x1zRKf.png" alt="image-20210929135933379"></p>
<p><img src="https://i.loli.net/2021/09/29/qZVvzmj1BNaW9A7.png" alt="image-20210929135945005"></p>
<h3 id="四、Spring配置文件"><a href="#四、Spring配置文件" class="headerlink" title="四、Spring配置文件"></a>四、Spring配置文件</h3><ul>
<li>bean标签<ul>
<li>id：bean在Spring容器中的唯一标识</li>
<li>class：全限定路径名<ul>
<li>默认情况下，它调用的是类中的无参构造方法，如果没有无参构造，则会创建失败</li>
</ul>
</li>
</ul>
</li>
<li>bean标签的范围配置 <font color='#d15252'>scope </font>属性<ul>
<li>prototype：多例<ul>
<li>可以创建多个对象</li>
</ul>
</li>
<li>singleton：单例（默认单例）<ul>
<li>即多次通过getBeen获取对象，但只创建一个</li>
</ul>
</li>
</ul>
</li>
<li>bean的生命周期配置 <ul>
<li>init-method = “init”<ul>
<li>初始化状态<ul>
<li>调用init方法</li>
</ul>
</li>
</ul>
</li>
<li>destory-method = “destory”<ul>
<li>销毁<ul>
<li>调用destory方法</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="五、Bean的实例化"><a href="#五、Bean的实例化" class="headerlink" title="五、Bean的实例化"></a>五、Bean的实例化</h3><ul>
<li><p>无参构造</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;c&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.domain.Car&quot;</span> scope=<span class="string">&quot;prototype&quot;</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>工厂</p>
<ul>
<li>静态<ul>
<li>静态工厂：只需要一个bean；实例化工厂至少需要两个bean</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;c1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.utils.StaticCarFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getCar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>动态</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;if&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.utils.InstanceCarFactory&quot;</span>&gt;&lt;/bean&gt;    &lt;bean id=<span class="string">&quot;c4&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.domain.Car&quot;</span> factory-bean=<span class="string">&quot;if&quot;</span> factory-method=<span class="string">&quot;getCar&quot;</span>&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="六、依赖注入-DI"><a href="#六、依赖注入-DI" class="headerlink" title="六、依赖注入 DI"></a>六、依赖注入 DI</h3><h4 id="1-概念-2"><a href="#1-概念-2" class="headerlink" title="1.概念"></a>1.概念</h4><ul>
<li>它也是Spring框架的IOC的具体体现<ul>
<li>在我们编写代码的时候，创建对象的权利交给Spring（IOC）</li>
<li>但是代码中不可能出现没有依赖的情况</li>
<li>即IOC只能降低耦合，不能消除耦合</li>
</ul>
</li>
<li><font color='#d15252'>依赖注入</font>：这种类似业务层和数据持久层的依赖关系，在使用Spring以后，让Spring来维护</li>
</ul>
<h4 id="2-依赖注入分类"><a href="#2-依赖注入分类" class="headerlink" title="2.依赖注入分类"></a>2.依赖注入分类</h4><ul>
<li>构造方法</li>
</ul>
<p><img src="https://i.loli.net/2021/09/29/N6Cdl9EOVYtUHWk.png" alt="image-20210929160114283"></p>
<ul>
<li>set方法<ul>
<li>ref标签</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/09/29/J4u8lBLzkQqfgUN.png" alt="image-20210929161648838"></p>
<ul>
<li><p>p命名空间法</p>
<ul>
<li><p>导入约束</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:p =&quot;http://www.springframework.org/schema/p&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://i.loli.net/2021/09/29/XiyMlPC68s7AS4w.png" alt="image-20210929162428596"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Spring框架</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring整合Mybatis</title>
    <url>/2021/10/22/Spring%E6%95%B4%E5%90%88Mybatis/</url>
    <content><![CDATA[<h2 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h2><h3 id="一、Spring整合Mybatis"><a href="#一、Spring整合Mybatis" class="headerlink" title="一、Spring整合Mybatis"></a>一、Spring整合Mybatis</h3><ul>
<li><p>使用是Spring的配置文件</p>
</li>
<li><p>导入依赖</p>
<p><img src="https://i.loli.net/2021/10/22/QApkledVbMXP2uL.png" alt="image-20211012194735501"></p>
<p><img src="https://i.loli.net/2021/10/12/ynHkzsEwmtLZbhA.png" alt="image-20211012194742820"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        spring整合Mybatis依赖--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置mybatisConfig核心配置文件</p>
</li>
<li><p>配置mapper映射文件</p>
<ul>
<li>注意mapper映射文件位置需要和接口实例类一致</li>
</ul>
<p><img src="https://i.loli.net/2021/10/12/xQqABnTcftodFyj.png" alt="image-20211012195709533"></p>
</li>
<li><p>配置jdbc.properties文件</p>
<p><img src="https://i.loli.net/2021/10/12/VeaTLJXYmA5Z9sf.png" alt="image-20211012195639958"></p>
</li>
<li><p><font color='#d15252'>配置Spring核心配置文件</font></p>
<ul>
<li>在Spring配置文件中，配置相应的数据，代替MybatisConfig配置文件</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Spring框架</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring连接数据库</title>
    <url>/2021/10/22/Spring%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h2 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h2><ul>
<li>Spring最后一天</li>
</ul>
<h3 id="一、Spring-JDBC-Template"><a href="#一、Spring-JDBC-Template" class="headerlink" title="一、Spring JDBC Template"></a>一、Spring JDBC Template</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h4><ul>
<li><p>Spring提供的简化JDBC api 操作</p>
<ul>
<li>它的功能和DBUTILS是重合的</li>
</ul>
</li>
<li><p>核心类 <font color='#d15252'>JDBCTemplate</font>()</p>
</li>
<li><p>核心方法</p>
<ul>
<li>更新操作<ul>
<li>update()</li>
</ul>
</li>
<li>查询操作<ul>
<li>查询多个<ul>
<li>query()</li>
</ul>
</li>
<li>查询单个<ul>
<li>queryForObject</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>进行封装：BeanPropertyRowMapper</p>
</li>
</ul>
<h4 id="2-Spring-JDBC-Template-入门案例"><a href="#2-Spring-JDBC-Template-入门案例" class="headerlink" title="2.Spring JDBC Template 入门案例"></a>2.Spring JDBC Template 入门案例</h4><ul>
<li><p>导入依赖坐标</p>
<ul>
<li><p>spring框架依赖</p>
</li>
<li><p>连接数据库依赖</p>
</li>
<li><p>junit测试依赖</p>
</li>
<li><p>导入spring管理Mysql的依赖</p>
<p><img src="https://i.loli.net/2021/10/11/oxjeIApSXgC2uZq.png" alt="image-20211011194140527"></p>
</li>
<li><p>导入Mysql事务依赖</p>
<p><img src="https://i.loli.net/2021/10/11/aVU6n4twLQ5oiOe.png" alt="image-20211011194200724"></p>
</li>
</ul>
</li>
<li><p>准备Mysql数据库</p>
<p><img src="https://i.loli.net/2021/10/11/AxWUqrbwBVCFyRg.png" alt="image-20211011195314645"></p>
</li>
<li><p>创建JavaBean类</p>
<p><img src="https://i.loli.net/2021/10/11/isA3SafEMCmK7RG.png" alt="image-20211011195326729"></p>
</li>
<li><p>实现Dao层代码</p>
<ul>
<li>首先知道使用Spring操作数据库，需要Spring JDBC Template 的核心类JdbcTemplate进行操作</li>
<li>所以我们要准备一个<font color='#d15252'>JdbcTemplate</font>成员变量进行操作</li>
<li>使用成员变量，通过调用核心的update和query方法进行操作，根据不同的方法重载实现不同的功能</li>
</ul>
<p><img src="https://i.loli.net/2021/10/11/z2I3MP6qrDjavTx.png" alt="image-20211011201727732"></p>
<ul>
<li>参数使用？占位符，在方法重载时直接带参添加数据即可</li>
</ul>
<blockquote>
<p>注意事项：</p>
<ul>
<li><p>query方法需要一个BeanPropertyRowMapper参数</p>
</li>
<li><p>成员变量需要依赖注入</p>
</li>
</ul>
</blockquote>
</li>
<li><p>实现Service层代码</p>
</li>
</ul>
<p><img src="https://i.loli.net/2021/10/11/NQiDl2J5Fy9RjA8.png" alt="image-20211011202334655"></p>
<ul>
<li>编写Spring核心配置文件<ul>
<li>开启注解扫描</li>
<li>导入数据库连接池相关配置</li>
<li>注入Spring-jdbc核心类</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/10/11/dIQse7Bik6mnc2a.png" alt="image-20211011210346911"></p>
<ul>
<li><p>Spring整合junit</p>
<ul>
<li><p>导入依赖</p>
<p><img src="https://i.loli.net/2021/10/11/8O5TuxsAUFh79J1.png" alt="image-20211011210800876"></p>
</li>
<li><p>给测试类添加注解</p>
<p><img src="https://i.loli.net/2021/10/11/S6QIBXaw8EjR5rY.png" alt="image-20211011210944974"></p>
</li>
<li><p>使用spring整合junit相等于使用Spring框架中自带的junit</p>
</li>
</ul>
</li>
</ul>
<h3 id="二、Spring事务"><a href="#二、Spring事务" class="headerlink" title="二、Spring事务"></a>二、Spring事务</h3><h4 id="1-Spring事务中的控制方式"><a href="#1-Spring事务中的控制方式" class="headerlink" title="1.Spring事务中的控制方式"></a>1.Spring事务中的控制方式</h4><ul>
<li><strong>编程式</strong><ul>
<li>开发者直接把事务的代码和业务代码耦合到一起，在实际开发中不用</li>
</ul>
</li>
<li><strong><font color='#d15252'>声明式</font></strong><ul>
<li>开发者采用配置的方式来实现的事务控制，业务代码与事务代码实现解耦合，使用AOP思想</li>
</ul>
</li>
</ul>
<h4 id="2-编程式事务控制相关对象"><a href="#2-编程式事务控制相关对象" class="headerlink" title="2.编程式事务控制相关对象"></a>2.编程式事务控制相关对象</h4><ul>
<li>PlatfromTransactionManager接口，是spring的<font color='#d15252'>事务管理器</font>，里面提供了我们常用的操作事务的方法</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>getTransaction</td>
<td>获取事务的状态信息</td>
</tr>
<tr>
<td>commit</td>
<td>回滚</td>
</tr>
<tr>
<td>rooback</td>
<td>提交</td>
</tr>
</tbody></table>
<ul>
<li><p>PlatfromTransactionManager是一个接口类型，不同的Dao层技术有不同的实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PlatformTransactionManager 是接口类型，不同的 Dao 层技术则有不同的实现类。</span><br><span class="line"></span><br><span class="line">Dao层技术是jdbcTemplate或mybatis时：</span><br><span class="line">    <span class="comment">//重点	</span></span><br><span class="line">    DataSourceTransactionManager</span><br><span class="line"></span><br><span class="line">Dao层技术是hibernate时：</span><br><span class="line">	</span><br><span class="line">    HibernateTransactionManager</span><br><span class="line"></span><br><span class="line">Dao层技术是JPA时：</span><br><span class="line">	JpaTransactionManager</span><br></pre></td></tr></table></figure></li>
<li><p>TransactionDefinition</p>
<ul>
<li>TransactionDefinition接口提供事务的定义信息（事务隔离级别、事务传播行为等等）</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>int getIsolationLevel()</td>
<td>获得事务的隔离级别</td>
</tr>
<tr>
<td>int getPropogationBehavior()</td>
<td>获得事务的传播行为</td>
</tr>
<tr>
<td>int getTimeout()</td>
<td>获得超时时间</td>
</tr>
<tr>
<td>boolean isReadOnly()</td>
<td>是否只读</td>
</tr>
</tbody></table>
<ul>
<li><p><strong>事务隔离级别</strong></p>
<p>设置隔离级别，可以解决事务并发产生的问题，如脏读、不可重复读和虚读（幻读）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* ISOLATION_DEFAULT				使用数据库默认</span><br><span class="line">* ISOLATION_READ_UNCOMMITTED	读未提交</span><br><span class="line">* ISOLATION_READ_COMMITTED		读已提交</span><br><span class="line">* ISOLATION_REPEATABLE_READ		可重复读</span><br><span class="line">* ISOLATION_SERIALIZABLE  		串行化</span><br></pre></td></tr></table></figure></li>
<li><p><strong>事务传播行为</strong></p>
<p>事务传播行为指的就是当一个业务方法【被】另一个业务方法调用时，应该如何进行事务控制。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>REQUIRED</strong></td>
<td>如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中，一般的选择（默认值）</td>
</tr>
<tr>
<td><strong>SUPPORTS</strong></td>
<td>支持当前事务，如果当前没有事务，就以非事务方式执行（没有事务）</td>
</tr>
<tr>
<td>MANDATORY</td>
<td>使用当前的事务，如果当前没有事务，就抛出异常</td>
</tr>
<tr>
<td>REQUERS_NEW</td>
<td>新建事务，如果当前在事务中，把当前事务挂起</td>
</tr>
<tr>
<td>NOT_SUPPORTED</td>
<td>以非事务方式执行操作，如果当前存在事务，就把当前事务挂起</td>
</tr>
<tr>
<td>NEVER</td>
<td>以非事务方式运行，如果当前存在事务，抛出异常</td>
</tr>
<tr>
<td>NESTED</td>
<td>如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行REQUIRED 类似的操作</td>
</tr>
</tbody></table>
</li>
</ul>
<h6 id="2-2-3-TransactionStatus"><a href="#2-2-3-TransactionStatus" class="headerlink" title="2.2.3 TransactionStatus"></a>2.2.3 TransactionStatus</h6><ul>
<li><p>TransactionStatus 接口提供的是事务具体的运行状态。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>boolean isNewTransaction()</td>
<td>是否是新事务</td>
</tr>
<tr>
<td>boolean hasSavepoint()</td>
<td>是否是回滚点</td>
</tr>
<tr>
<td>boolean isRollbackOnly()</td>
<td>事务是否回滚</td>
</tr>
<tr>
<td>boolean isCompleted()</td>
<td>事务是否完成</td>
</tr>
</tbody></table>
<p>可以简单的理解三者的关系：<strong>事务管理器</strong>通过读取<strong>事务定义参数</strong>进行事务管理，然后会产生一系列的<strong>事</strong></p>
<p><strong>务状态</strong>。</p>
</li>
</ul>
<h6 id="2-2-4-实现代码"><a href="#2-2-4-实现代码" class="headerlink" title="2.2.4 实现代码"></a><strong>2.2.4</strong> <strong>实现代码</strong></h6><ul>
<li><p>配置文件</p>
<ul>
<li>```xml<!--事务管理器交给IOC-->
<bean id="transactionManager"     class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> <property name="dataSource" ref="dataSource"/> </bean>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 业务层代码</span><br><span class="line"></span><br><span class="line">  * ```java</span><br><span class="line">    @Service</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> AccountServiceImpl <span class="keyword">implements</span> AccountService &#123; </span><br><span class="line">        @Autowired</span><br><span class="line">    	<span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line">    	@Autowired</span><br><span class="line">    	<span class="keyword">private</span> PlatformTransactionManager transactionManager;</span><br><span class="line">    	@Override</span><br><span class="line">    	<span class="keyword">public</span> <span class="keyword">void</span> transfer(String outUser, String inUser, <span class="keyword">Double</span> money) &#123;</span><br><span class="line">    	<span class="comment">// 创建事务定义对象</span></span><br><span class="line">            DefaultTransactionDefinition <span class="keyword">def</span> = <span class="keyword">new</span> DefaultTransactionDefinition();</span><br><span class="line">            <span class="comment">// 设置是否只读，false支持事务</span></span><br><span class="line">            <span class="keyword">def</span>.setReadOnly(<span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">// 设置事务隔离级别，可重复读mysql默认级别</span></span><br><span class="line">            <span class="keyword">def</span>.setIsolationLevel(TransactionDefinition.ISOLATION_REPEATABLE_READ);</span><br><span class="line">            <span class="comment">// 设置事务传播行为，必须有事务</span></span><br><span class="line">            <span class="keyword">def</span>.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);</span><br><span class="line">            <span class="comment">// 配置事务管理器</span></span><br><span class="line">            TransactionStatus status = transactionManager.getTransaction(<span class="keyword">def</span>);</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 转账</span></span><br><span class="line">            accountDao.out(outUser, money); accountDao.in(inUser, money);</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 提交事务</span></span><br><span class="line">            transactionManager.commit(status);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123; e.printStackTrace();</span><br><span class="line">            <span class="comment">// 回滚事务</span></span><br><span class="line">            transactionManager.rollback(status);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="2-2-5-知识小结"><a href="#2-2-5-知识小结" class="headerlink" title="2.2.5 知识小结"></a><strong>2.2.5</strong> <strong>知识小结</strong></h6><ul>
<li><p>Spring中的事务控制主要就是通过这三个API实现的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PlatformTransactionManager 负责事务的管理，它是个接口，其子类负责具体工作 TransactionDefinition 定义了事务的一些相关参数 </span><br><span class="line">TransactionStatus 代表事务运行的一个实时状态</span><br></pre></td></tr></table></figure></li>
<li><p>理解三者的关系：<strong>事务管理器</strong>通过读取<strong>事务定义参数</strong>进行事务管理，然后会产生一系列的<strong>事务状态</strong>。</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Spring框架</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>class中的内容</title>
    <url>/2021/08/25/class%E4%B8%AD%E7%9A%84%E5%86%85%E5%AE%B9/</url>
    <content><![CDATA[<h3 id="一、自定义的数据类型：引用类型"><a href="#一、自定义的数据类型：引用类型" class="headerlink" title="一、自定义的数据类型：引用类型"></a>一、自定义的数据类型：引用类型</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 数据类型 </span>&#123;</span><br><span class="line">	<span class="comment">//成员变量</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-Java中的数据类型分为："><a href="#1-Java中的数据类型分为：" class="headerlink" title="1.Java中的数据类型分为："></a>1.Java中的数据类型分为：</h4><ul>
<li>基本数据类型：byte、short、int、long、float、double、char、boolean<ul>
<li>整型：byte、short、int、long</li>
<li>浮点型：float、double</li>
<li>字符型：char</li>
<li>布尔型：boolean</li>
</ul>
</li>
<li>引用数据类型：数组、类、接口</li>
</ul>
<h4 id="2-自定义数据类型（自定义类）的构成"><a href="#2-自定义数据类型（自定义类）的构成" class="headerlink" title="2.自定义数据类型（自定义类）的构成"></a>2.自定义数据类型（自定义类）的构成</h4><ul>
<li>属性：成员变量<ul>
<li>成员变量的位置：类中方法外</li>
<li>有默认初始化值（在new时进程进堆内存时初始化）</li>
</ul>
</li>
<li>方法：成员方法</li>
<li>构造方法（构造器）<ul>
<li>系统默认给出的</li>
<li>每个类必须要有的</li>
</ul>
</li>
</ul>
<h4 id="3-成员方法"><a href="#3-成员方法" class="headerlink" title="3.成员方法"></a>3.成员方法</h4><ul>
<li><p>成员方法的定义</p>
<ul>
<li>位置：自定义的数据类型（类）中，成员变量后</li>
<li>格式： <code>修饰符 返回值类型 方法名 （参数列表）&#123;  &#125;</code><ul>
<li>修饰符：public （不用static）</li>
</ul>
</li>
</ul>
</li>
<li><p>成员方法使用</p>
<ul>
<li>在main方法中创建自定义数据类型的对象</li>
<li>对象.方法名();</li>
</ul>
</li>
<li><p>成员方法调用的内存图</p>
<p><img src="https://i.loli.net/2021/07/27/ueO7sYFM621XdbH.png" alt="image-20210727095531172"></p>
</li>
</ul>
<h4 id="4-练习："><a href="#4-练习：" class="headerlink" title="4.练习："></a>4.练习：</h4><ul>
<li><p>狗的数据类型</p>
</li>
<li><p>属性：体重、姓名</p>
</li>
<li><p>行为：</p>
<ul>
<li>跑<ul>
<li>体重-10</li>
</ul>
</li>
<li>吃饭<ul>
<li>体重+10</li>
</ul>
</li>
<li>打印<ul>
<li>体重和姓名</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h5><ul>
<li><p>创建项目，测试环境</p>
</li>
<li><p>需求分析：</p>
<ul>
<li>由需求可知，需要定义一个狗的数据类型，Java没有自带这种类型，所以需要自己创建</li>
</ul>
</li>
<li><p>创建狗的数据类型</p>
<ul>
<li>位置：class之间并列关系</li>
<li>格式： class 类名 {   }</li>
</ul>
</li>
<li><p>根据需求分析，属性=变量，行为=方法，在创建的数据类型中，编写对应的内部数据</p>
<p><img src="https://i.loli.net/2021/07/27/Xki4pUL3OrHQGEt.png" alt="image-20210727103148741"></p>
</li>
<li><p>如果想要实现控制台可以重复选择吃饭或跑的功能，需要定义选择，菜单方法</p>
<ul>
<li><p>方法一</p>
<ul>
<li>在main方法并列的地方编写菜单方法</li>
</ul>
<p><img src="https://i.loli.net/2021/07/27/Du9n1E5c2FgqxWR.png" alt="image-20210727103340527"></p>
<ul>
<li>定义选择方法，调用对应的数据</li>
</ul>
<p><img src="H:\瑞通java\华为云盘\笔记\第四周\V2GJnYeM5cADxIu.png" alt="image-20210727103359720"></p>
</li>
<li><p>方法二</p>
<ul>
<li><p>在自定义的狗类中创建菜单、选择的成员方法</p>
</li>
<li><p>在main主程序中，创建狗类对象，调用狗类选择方法</p>
<p><img src="https://i.loli.net/2021/07/27/i27a4f3wopb6PhM.png" alt="image-20210727103738820"></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="二、成员变量和成员方法"><a href="#二、成员变量和成员方法" class="headerlink" title="二、成员变量和成员方法"></a>二、成员变量和成员方法</h3><h4 id="1-变量和成员变量的区别"><a href="#1-变量和成员变量的区别" class="headerlink" title="1.变量和成员变量的区别"></a>1.变量和成员变量的区别</h4><h5 id="Ⅰ-位置"><a href="#Ⅰ-位置" class="headerlink" title="Ⅰ.位置"></a>Ⅰ.位置</h5><ul>
<li>变量：方法内/方法的声明上</li>
<li>成员变量：类中方法外</li>
</ul>
<h5 id="Ⅱ-初始化值"><a href="#Ⅱ-初始化值" class="headerlink" title="Ⅱ.初始化值"></a>Ⅱ.初始化值</h5><ul>
<li>变量：使用前，需要手动赋值</li>
<li>成员变量：有<font color='#d15252'>默认初始化值(</font>在new时进堆内存时初始化)</li>
</ul>
<h5 id="Ⅲ-同名"><a href="#Ⅲ-同名" class="headerlink" title="Ⅲ.同名"></a>Ⅲ.同名</h5><ul>
<li>变量和成员变量有同名时，系统不会在变量名前提供默认的 <code>this关键字</code>了</li>
<li>就近原则</li>
</ul>
<h5 id="Ⅳ-生命周期"><a href="#Ⅳ-生命周期" class="headerlink" title="Ⅳ.生命周期"></a>Ⅳ.生命周期</h5><ul>
<li>成员变量：随对象同生共死</li>
<li>变量：方法执行完毕后消失</li>
</ul>
<h4 id="2-方法和成员方法的区别"><a href="#2-方法和成员方法的区别" class="headerlink" title="2.方法和成员方法的区别"></a>2.方法和成员方法的区别</h4><ul>
<li><p>成员方法没有static </p>
<ul>
<li><p>static 静态 ：代码存在与代码区.class文件的静态区中</p>
</li>
<li><p><font color='#d15252'>静态区的内容随着类的加载而存在</font>（<font color='orange'>栈区可以直接操作静态</font>），<font color='#d15252'>优先于对象</font></p>
<ul>
<li>栈区不能操作非静态区，但可以直接操作静态区，静态区属于该类本身</li>
</ul>
</li>
<li><p>静态区的内容属于类，在调用时默认省略的类名</p>
<ul>
<li><p>即静态修饰的可以<font color='#d15252'>直接通过类名调用</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Demo4.B();</span><br><span class="line"><span class="comment">//Demo4类名  B()方法	</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>非静态区的内容属于堆区的实例</p>
</li>
</ul>
<p><img src="https://i.loli.net/2021/07/27/xf2mIdvb9L54GrW.png" alt="image-20210727143251525"></p>
</li>
<li><p>static的注意事项：</p>
<ul>
<li>在静态方法中没有this关键字</li>
<li>静态方法只能访问静态的成员变量和静态的成员方法</li>
</ul>
</li>
</ul>
<h4 id="3-类的加载时机"><a href="#3-类的加载时机" class="headerlink" title="3.类的加载时机"></a>3.类的加载时机</h4><ul>
<li>用到类时加载.class进Jvm内存</li>
<li>即碰到new时</li>
</ul>
<h3 id="三、构造方法（构造器）"><a href="#三、构造方法（构造器）" class="headerlink" title="三、构造方法（构造器）"></a>三、<font color='#d15252'>构造方法</font>（构造器）</h3><h4 id="1-构造方法的格式"><a href="#1-构造方法的格式" class="headerlink" title="1.构造方法的格式"></a>1.构造方法的格式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">类名() &#123;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>方法名与类名相同</li>
<li>没有返回值，连void都没有</li>
<li>没有具体的返回值</li>
</ul>
<h4 id="2-什么是构造器"><a href="#2-什么是构造器" class="headerlink" title="2.什么是构造器"></a>2.什么是构造器</h4><ul>
<li>构成类的一个成员<ul>
<li>给对象的数据进行初始化</li>
</ul>
</li>
<li>构建实体 : new 类名</li>
<li>构建实体的时候赋值</li>
</ul>
<h4 id="3-构造方法的细节问题"><a href="#3-构造方法的细节问题" class="headerlink" title="3.构造方法的细节问题"></a>3.构造方法的细节问题</h4><ul>
<li>当构造方法的参数变量名和成员变量名相同时<ul>
<li><font color='#d15252'>添加this关键字</font></li>
</ul>
</li>
<li>构造方法只能<font color='#d15252'>赋值</font>，不能改值（在创建对象时完成数据的初始化）</li>
</ul>
<h4 id="4-补充知识点"><a href="#4-补充知识点" class="headerlink" title="4.补充知识点"></a>4.补充知识点</h4><ul>
<li>如果手动给出构造器，系统不会再自动给出<ul>
<li>如果不给，系统给出默认构造器</li>
<li>建议给出空参构造</li>
</ul>
</li>
<li>构造方法可以重载</li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li>实体 === 对象</li>
<li>属性 === 成员变量</li>
<li>行为 === 成员方法</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>class</tag>
        <tag>成员变量</tag>
        <tag>成员方法</tag>
        <tag>构造方法</tag>
      </tags>
  </entry>
  <entry>
    <title>XML</title>
    <url>/2021/08/24/XML/</url>
    <content><![CDATA[<h3 id="一、XML文件-JavaEE"><a href="#一、XML文件-JavaEE" class="headerlink" title="一、XML文件(JavaEE)"></a>一、XML文件(JavaEE)</h3><ul>
<li>存储数据的语言<ul>
<li>Extensible：扩展</li>
<li>Marup：标记</li>
<li>Language：语言</li>
</ul>
</li>
</ul>
<h4 id="1-特点"><a href="#1-特点" class="headerlink" title="1.特点"></a>1.特点</h4><ul>
<li>作用<ul>
<li>存储数据</li>
<li>传输数据</li>
</ul>
</li>
<li>优点<ul>
<li>可读性好</li>
<li>维护性好</li>
</ul>
</li>
</ul>
<h3 id="二、XML语言的语法"><a href="#二、XML语言的语法" class="headerlink" title="二、XML语言的语法"></a>二、XML语言的语法</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h4><h5 id="xml语法规范"><a href="#xml语法规范" class="headerlink" title="xml语法规范"></a>xml语法规范</h5><ul>
<li>区分大小写</li>
<li>必须正确的嵌套</li>
<li>必须有根元素</li>
<li>属性值必须加引号</li>
</ul>
<p>例：让XML文件保存Person</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Person</span>&gt;</span> &lt;--&gt;Person根元素&lt;/--&gt;</span><br><span class="line">	<span class="tag">&lt;<span class="name">p1</span>&gt;</span>	&lt;--&gt;Person对象&lt;/--&gt;</span><br><span class="line">    	<span class="tag">&lt;<span class="name">name</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Person</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>它是一个标签语言<ul>
<li>标签是成对出现的</li>
</ul>
</li>
</ul>
<h5 id="标签语言"><a href="#标签语言" class="headerlink" title="标签语言"></a>标签语言</h5><ul>
<li>在标签语言中&lt;&gt;中只有一个单词，称为元素标签</li>
<li>在标签语言中 &lt;单词&gt; 在单词后跟的所有的单词，都被称为<font color='#d15252'>属性标签</font>，它可以赋值</li>
</ul>
<h4 id="2-XML声明"><a href="#2-XML声明" class="headerlink" title="2.XML声明"></a>2.XML声明</h4><p><img src="https://i.loli.net/2021/08/18/IdGKFNVAcg672ej.png" alt="image-20210818113055208"></p>
<ul>
<li> version ：版本</li>
<li> encoding：编码格式</li>
<li> standalone：该xml文件是否依赖与其他文件</li>
</ul>
<h5 id="文档声明的注意细节"><a href="#文档声明的注意细节" class="headerlink" title="文档声明的注意细节"></a>文档声明的注意细节</h5><ul>
<li>文档声明<font color='#d15252'>必须在第一行</font></li>
<li>?和xml之间不能有空格</li>
</ul>
<h4 id="3-xml中的大于小于"><a href="#3-xml中的大于小于" class="headerlink" title="3.xml中的大于小于"></a>3.xml中的大于小于</h4><p><img src="https://i.loli.net/2021/08/18/NlnKJZ9XGLR4q7j.png" alt="image-20210818113155510"></p>
<h3 id="三、XML的数据传输：解析XML"><a href="#三、XML的数据传输：解析XML" class="headerlink" title="三、XML的数据传输：解析XML"></a>三、XML的数据传输：解析XML</h3><p><img src="https://i.loli.net/2021/08/18/UOj5b1paegVQFEW.png" alt="img"></p>
<p><img src="https://i.loli.net/2021/08/18/tQj5FU92Cxu3dAm.png" alt="image-20210818114104225"></p>
<ul>
<li><p>浏览器用<font color='#d15252'>Document</font>将整个xml封装起来</p>
</li>
<li><p>Java中解析XML已经由第三方做好了</p>
<ul>
<li>dom4j</li>
</ul>
<p><img src="https://i.loli.net/2021/08/18/BKcnLWeg1sfrQJS.png" alt="image-20210818114827519"></p>
</li>
<li><p>下载步骤</p>
<ul>
<li>下载后缀为.zip的文件解压</li>
<li>后缀为.jar的文件就是我们要使用的</li>
<li><font color='#d15252'>docs</font>文件夹中，是官网文档<ul>
<li>找到index.html</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="1-Java中解析xml的步骤"><a href="#1-Java中解析xml的步骤" class="headerlink" title="1.Java中解析xml的步骤"></a>1.Java中解析xml的步骤</h4><ul>
<li>第一步：导包并解压</li>
<li>第二步：创建SAXReader对象 — 解析器</li>
<li>第三步：使用getResource获取路径</li>
<li>第四步： 读取文档，解析器调用read方法读取文档，并用Document保存</li>
</ul>
<p><img src="https://i.loli.net/2021/08/18/8FfTupCy2Pb1cRq.png" alt="image-20210818134337840"></p>
<ul>
<li>第五步：使用Document中的getRootElement()方法<font color='#d15252'>解析根目录</font></li>
</ul>
<p><img src="https://i.loli.net/2021/08/18/6iWrgmXChHwEyeP.png" alt="image-20210818134841873"></p>
<ul>
<li>第六步：使用Document中的elements()方法获取每一个元素<ul>
<li>并存入List集合，注意泛型</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/08/18/FE1cGXgaeLMyHTf.png" alt="image-20210818150624257"></p>
<ul>
<li>第七步：遍历List集合中的元素，拿到每一个元素<ul>
<li>同样用元素调用<font color='#d15252'>elements()方法</font>，并带参，获取到<font color='#d15252'>具体的属性对象</font></li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/08/18/Xidj71oTtCWh2ED.png" alt="image-20210818150753561"></p>
<ul>
<li>第八步：用每一个元素调用attribute()方法带参，可以取出所有带指定属性值，用来判断某一个具体的元素</li>
</ul>
<p><img src="https://i.loli.net/2021/08/18/P18xnRg2aoQDvOh.png" alt="image-20210818151242119"></p>
<ul>
<li>第九步：用获取到的具体对象，调用<font color='#d15252'>getText()</font>方法，获取<font color='#d15252'>具体的值</font></li>
</ul>
<p><img src="https://i.loli.net/2021/08/18/sj1SDUBed3C8zXh.png" alt="image-20210818150854734"></p>
<hr>
<h4 id="2-解析XML的方法"><a href="#2-解析XML的方法" class="headerlink" title="2.解析XML的方法"></a>2.解析XML的方法</h4><h5 id="Ⅰ-getRootElement（）"><a href="#Ⅰ-getRootElement（）" class="headerlink" title="Ⅰ. getRootElement（）"></a>Ⅰ. getRootElement（）</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getRootElement（）<span class="comment">//解析根目录</span></span><br></pre></td></tr></table></figure>

<ul>
<li>document调用，获取根目录</li>
</ul>
<p><img src="https://i.loli.net/2021/08/18/RO2HjFenNQvaZwI.png" alt="image-20210818143500082"></p>
<h5 id="Ⅱ-getResource"><a href="#Ⅱ-getResource" class="headerlink" title="Ⅱ. getResource()"></a>Ⅱ. getResource()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getResource() <span class="comment">//获取目录路径</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/08/24/nJoPVXRwTYAq4Fj.png" alt="image-20210818143533544"></p>
<h5 id="Ⅲ-elements"><a href="#Ⅲ-elements" class="headerlink" title="Ⅲ. elements()"></a>Ⅲ. elements()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">elements() 			<span class="comment">//获取所有元素</span></span><br><span class="line">elements(<span class="string">&quot;标签名&quot;</span>)	  <span class="comment">//获取指定的所有元素</span></span><br><span class="line">element() 			<span class="comment">//获取单个的元素</span></span><br><span class="line">element(String str) <span class="comment">//获取指定元素</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/08/18/CfbgayeHFuipVDG.png" alt="image-20210818140157107"></p>
<ul>
<li>获取所有的元素，并存入List数组中，注意给泛型</li>
</ul>
<p><img src="https://i.loli.net/2021/08/18/sbyLZMznv7wV8CU.png" alt="image-20210818141034352"></p>
<ul>
<li>返回值List集合</li>
</ul>
<h5 id="Ⅳ-attribute"><a href="#Ⅳ-attribute" class="headerlink" title="Ⅳ. attribute()"></a>Ⅳ. attribute()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Attribute <span class="title">attribute</span><span class="params">(<span class="string">&quot;str&quot;</span>)</span> <span class="comment">//获取属性为str的元素</span></span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/08/18/kExhSnz1X2ag7dG.png" alt="image-20210818141819372"></p>
<p><img src="https://i.loli.net/2021/08/18/LeljzUgWaBcvVPy.png" alt="image-20210818141916131"></p>
<ul>
<li>可以看到，获取了所有属性为id的元素<ul>
<li>如果我们要获取其中一个指定的元素，需要对value值进行判断</li>
</ul>
</li>
<li>如果有其他元素，没有带指定的标签，会返回null</li>
<li>返回值Attribute类型</li>
</ul>
<h5 id="Ⅴ-getValue"><a href="#Ⅴ-getValue" class="headerlink" title="Ⅴ. getValue()"></a>Ⅴ. getValue()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getValue()	<span class="comment">//获得元素的值</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/08/18/xwHW2MNbTEI7iUm.png" alt="image-20210818142150055"></p>
<p><img src="https://i.loli.net/2021/08/18/ZacsrY3f8pW7ytg.png" alt="image-20210818142339756"></p>
<ul>
<li>Attribute调用，获取元素的值</li>
</ul>
<h5 id="Ⅵ-getText"><a href="#Ⅵ-getText" class="headerlink" title="Ⅵ. getText()"></a>Ⅵ. getText()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getText()	<span class="comment">//取出数据</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/08/18/JMG8Y4cLbRmdgTi.png" alt="image-20210818143329102"></p>
<ul>
<li>Element调用</li>
</ul>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p><img src="https://i.loli.net/2021/08/18/HqatLhTz3EDm9rU.png" alt="image-20210818145833898"></p>
<h4 id="将String类转为Int类型"><a href="#将String类转为Int类型" class="headerlink" title="将String类转为Int类型"></a>将String类转为Int类型</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer.parseInt(要转换的数据);</span><br></pre></td></tr></table></figure>



<h3 id="四、约束XML文件"><a href="#四、约束XML文件" class="headerlink" title="四、约束XML文件"></a>四、约束XML文件</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul>
<li>用来限定xml文件中使用的标签以及属性</li>
<li>约束分类<ul>
<li>DTD</li>
<li>Schema</li>
</ul>
</li>
</ul>
<h3 id="五、DTD"><a href="#五、DTD" class="headerlink" title="五、DTD"></a>五、DTD</h3><h4 id="编写DTD约束的步骤"><a href="#编写DTD约束的步骤" class="headerlink" title="编写DTD约束的步骤"></a>编写DTD约束的步骤</h4><ul>
<li><p><strong>第一步</strong>：创建一个文件，后缀为.dtd</p>
</li>
<li><p><strong>第二步</strong>：看xml文件中使用了哪些元素</p>
</li>
<li><p><strong>第三步</strong>：判断元素是 简单元素，还是 复杂元素</p>
<ul>
<li>简单元素：只有元素自己</li>
<li>复杂元素：包含嵌套其他元素</li>
</ul>
</li>
<li><p><font color='cornflowerblue'><strong>第四步</strong></font>：创建约束</p>
<ul>
<li><p>```dtd</p>
<!ELEMENT 元素名称 类别>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    - 可以定义元素</span><br><span class="line"></span><br><span class="line">  - 简单元素：`<span class="meta">&lt;!ELEMENT 元素名称&gt;</span>`</span><br><span class="line"></span><br><span class="line">    - 可以加()标明数据类型</span><br><span class="line">    - 字符串类型：`<span class="meta">&lt;!ELEMENT <span class="meta-keyword">sid</span>(<span class="meta-keyword">#PCDATA</span>) &gt;</span>`</span><br><span class="line">    - Int类型：`<span class="meta">&lt;!ELEMENT <span class="meta-keyword">sid</span>(<span class="meta-keyword">#PCDATA</span>) &gt;</span>`</span><br><span class="line"></span><br><span class="line">  - 复杂元素：`<span class="meta">&lt;!ELEMENT 元素名称（子元素名称，子元素名称）&gt;</span>`</span><br><span class="line"></span><br><span class="line">    - 如果有多个元素的话，可以用 `,`或 `|`隔开</span><br><span class="line">    - `，`  可以出现多个，标识顺序</span><br><span class="line">    - `|` 只能写一个其中一个元素，不能写多个</span><br><span class="line"></span><br><span class="line">    可选符号</span><br><span class="line"></span><br><span class="line">    - `?`代表零次或者一次</span><br><span class="line">    - `+`一次或者多次</span><br><span class="line">    - `*`代表零次或者多次</span><br><span class="line"></span><br><span class="line">    如果不写，表示出现一次</span><br><span class="line"></span><br><span class="line">- **第五步**：在xml文件中引入约束文件</span><br><span class="line"></span><br><span class="line">  - <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&#x27;#d15252&#x27;</span>&gt;</span>引入本地<span class="tag">&lt;/<span class="name">font</span>&gt;</span>：</span><br><span class="line"></span><br><span class="line">    ```xml</span><br><span class="line">    <span class="meta">&lt;!DOCTYPE 根元素名称 <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&#x27;DTD文件路径&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/08/18/u8SfdJWrDX3joiA.png" alt="image-20210818162615097"></p>
</li>
<li><p>在xml文件内部引入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE 根元素名称[dtd文件内容]&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/08/18/qQPRY9ZOFemnSu6.png" alt="image-20210818162644301"></p>
</li>
<li><p>引入网络DTD</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE 根元素名称 <span class="meta-keyword">PUBLIC</span><span class="meta-string">&quot;DTD文件名称&quot;</span><span class="meta-string">&quot;DTD文档url&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>第六步</strong>：定义属性的格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ATTLIST 元素名称 属性名称 属性类型 类型&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="作业练习"><a href="#作业练习" class="headerlink" title="作业练习"></a>作业练习</h4><p><img src="https://i.loli.net/2021/08/18/YMsSDquvyfdVNC6.png" alt="image-20210818165443886"></p>
<h3 id="六、Schema"><a href="#六、Schema" class="headerlink" title="六、Schema"></a>六、Schema</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul>
<li>schema和dtd的区别<ul>
<li>schema的后缀是.xsd</li>
</ul>
</li>
<li>一个XML文件中可以引入多个schema约束文件<ul>
<li>多个schema之间使用名称空间来区分</li>
</ul>
</li>
<li>dtd元素取值比较单一，最常见的是PCDATA类型<ul>
<li>而Schema中，支持多个数据类型</li>
</ul>
</li>
<li>语法更加复杂</li>
</ul>
<h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h4><ul>
<li><p>文档声明和根元素</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>给文件内容起名字</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">targetNamespace=&quot;http://www.easthome.com/javase<span class="string">&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>声明文档的质量</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">elementFormDefault=&quot;qualified&quot;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/08/19/Kq7let8SWpPih3B.png" alt="image-20210819091908874"></p>
</li>
</ul>
<h4 id="2-Schema中的内容"><a href="#2-Schema中的内容" class="headerlink" title="2.Schema中的内容"></a>2.Schema中的内容</h4><p><code>&lt;element name=&quot;Student&quot;&gt;</code> 根标签</p>
<ul>
<li><code>&lt;complexType&gt;</code>复杂标签<ul>
<li><code>&lt;sequence&gt;</code>顺序标签<ul>
<li><code>&lt;element name=&quot;s1&quot;&gt;</code> 定义元素标签</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/08/19/h6gC4foXUNyqct3.png" alt="image-20210819092948914"></p>
<h4 id="3-Schema中的引入"><a href="#3-Schema中的引入" class="headerlink" title="3.Schema中的引入"></a>3.Schema中的引入</h4><ul>
<li><p>在根元素中引入xsd文件</p>
</li>
<li><p>第一步：导入xsd</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意：要在路径后加<font color='#d15252'>instance</font>，表明它是被约束文件</li>
</ul>
</li>
<li><p>第二步：分配</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">xmlns=&quot;http://www.easthome.com/javase<span class="string">&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>第三步：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">xsi:schemaLocation=<span class="string">&quot;http://www.easthome.com/javase a.xsd&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://i.loli.net/2021/08/19/pql2sDmEh3XKxHt.png" alt="image-20210819095034184"></p>
<h4 id="4-Schema中的属性"><a href="#4-Schema中的属性" class="headerlink" title="4.Schema中的属性"></a>4.Schema中的属性</h4><ul>
<li><p>在sequence顺序标签下面定义属性</p>
<p><img src="https://i.loli.net/2021/08/19/NL7ZWT2hwguGfSc.png" alt="image-20210819100056793"></p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;attribute name=&quot;id&quot; type=&quot;string&quot; use=&quot;required&quot;&gt;&lt;/attribute&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>name：属性名称</p>
<p>type：数据类型</p>
<p>required：必须写属性</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>XML</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery</title>
    <url>/2021/08/26/jQuery/</url>
    <content><![CDATA[<h2 id="一、计时器"><a href="#一、计时器" class="headerlink" title="一、计时器"></a>一、计时器</h2><h4 id="1-setTimeout"><a href="#1-setTimeout" class="headerlink" title="1. setTimeout()"></a>1. setTimeout()</h4><ul>
<li>用于在指定的毫秒数后调用函数（只调用一次）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(code,millisec)</span><br></pre></td></tr></table></figure>

<ul>
<li>code：必需，要调用的函数或代码</li>
<li>millisec：必需，在执行代码前等待的<font color='#d15252'>毫秒数</font></li>
</ul>
<h4 id="2-setInterval"><a href="#2-setInterval" class="headerlink" title="2. setInterval()"></a>2. setInterval()</h4><ul>
<li>方法可按照指定的周期（以毫秒计）来调用函数或计算表达式</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(code,millisec[,<span class="string">&quot;lang&quot;</span>])</span><br></pre></td></tr></table></figure>

<ul>
<li>code：必需，要调用的函数或代码</li>
<li>millisec：必须，周期性执行或调用代码之间的间隔</li>
</ul>
<h4 id="3-补充知识"><a href="#3-补充知识" class="headerlink" title="3.补充知识"></a>3.补充知识</h4><ul>
<li>onload()事件，当页面或图像被加载完成后触发事件</li>
</ul>
<h3 id="二、Jquery"><a href="#二、Jquery" class="headerlink" title="二、Jquery"></a>二、Jquery</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h4><ul>
<li>jQuery 是一个 JavaScript 库</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./JQuery/jquery-3.3.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>导入Jquery</li>
</ul>
<h4 id="2-jQuery语法"><a href="#2-jQuery语法" class="headerlink" title="2.jQuery语法"></a>2.jQuery语法</h4><ul>
<li><p>基础语法 <code>$(selector).action()</code></p>
<ul>
<li>jQuery的核心就是选择器</li>
</ul>
<p><img src="https://i.loli.net/2021/08/26/UuaWB15QjhgtrLN.png" alt="image-20210826134720754"></p>
</li>
</ul>
<h4 id="3-基本选择器"><a href="#3-基本选择器" class="headerlink" title="3.基本选择器"></a>3.基本选择器</h4><ul>
<li>id选择器</li>
<li>类选择器</li>
<li>元素选择器</li>
<li>*</li>
</ul>
<h4 id="4-层级选择器"><a href="#4-层级选择器" class="headerlink" title="4.层级选择器"></a>4.层级选择器</h4><h5 id="Ⅰ-ancestor-descendant"><a href="#Ⅰ-ancestor-descendant" class="headerlink" title="Ⅰ. ancestor descendant"></a>Ⅰ. ancestor descendant</h5><ul>
<li><p>即<font color='#d15252'>后代选择器</font>，忽略层级</p>
</li>
<li><p>在给定的祖先元素下匹配所有的后代元素</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">ancestor：选择器</span><br><span class="line">descendant：有效选择器</span><br></pre></td></tr></table></figure>

<h5 id="Ⅱ-parent-gt-child"><a href="#Ⅱ-parent-gt-child" class="headerlink" title="Ⅱ. parent &gt; child"></a>Ⅱ. parent &gt; child</h5><ul>
<li>即子代选择器，只负责子级</li>
</ul>
<h5 id="Ⅲ-prev-next"><a href="#Ⅲ-prev-next" class="headerlink" title="Ⅲ. prev + next"></a>Ⅲ. prev + next</h5><ul>
<li>相邻元素选择器，下一个紧邻的兄弟</li>
</ul>
<h5 id="Ⅳ-prev-siblings"><a href="#Ⅳ-prev-siblings" class="headerlink" title="Ⅳ. prev ~ siblings"></a>Ⅳ. prev ~ siblings</h5><ul>
<li>同辈选择器，下面的所有兄弟</li>
</ul>
<blockquote>
<p><font color='#d15252'>其他选择器</font>有：基本筛选器、内容选择器，可见性选择器、属性选择器、子元素选择器、表单选择器、表单对象选择器等等</p>
<p>详细使用请查阅JqueryAPI</p>
</blockquote>
<h4 id="5-基本筛选器"><a href="#5-基本筛选器" class="headerlink" title="5.基本筛选器"></a>5.基本<font color='#d15252'>筛选器</font></h4><h5 id="Ⅰ-first"><a href="#Ⅰ-first" class="headerlink" title="Ⅰ.  :first"></a>Ⅰ.  :first</h5><ul>
<li>获取匹配的第一个元素</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>list item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>list item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>list item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>list item 4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>list item 5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;li:first&#x27;</span>);</span><br><span class="line"><span class="comment">//[ &lt;li&gt;list item 1&lt;/li&gt; ]</span></span><br></pre></td></tr></table></figure>



<h5 id="Ⅱ-not-selector"><a href="#Ⅱ-not-selector" class="headerlink" title="Ⅱ. :not(selector)"></a>Ⅱ. :not(selector)</h5><ul>
<li>去除所有与给定选择器匹配的元素</li>
<li>selector：用于筛选的选择器</li>
</ul>
<p><img src="https://i.loli.net/2021/08/26/BfQmUd5DpkuTScY.png" alt="image-20210826144537086"></p>
<h5 id="Ⅲ-even"><a href="#Ⅲ-even" class="headerlink" title="Ⅲ. :even"></a>Ⅲ. :even</h5><ul>
<li><p>匹配所有索引值为<font color='#d15252'>偶数</font>的元素，从 0 开始计数</p>
<p><img src="https://i.loli.net/2021/08/26/MZ2diS5m7BK1Tyk.png" alt="image-20210826144616263"></p>
</li>
</ul>
<h5 id="Ⅳ-odd"><a href="#Ⅳ-odd" class="headerlink" title="Ⅳ. :odd"></a>Ⅳ. :odd</h5><ul>
<li>匹配所有索引值为<font color='#d15252'>奇数</font>的元素，从 0 开始计数</li>
</ul>
<p><img src="https://i.loli.net/2021/08/26/4ceDWOnXLvubGyK.png" alt="image-20210826144853759"></p>
<h5 id="Ⅴ-last"><a href="#Ⅴ-last" class="headerlink" title="Ⅴ.:last()"></a>Ⅴ.:last()</h5><ul>
<li>获取最后一个元素</li>
</ul>
<p><img src="https://i.loli.net/2021/08/26/P8ucCBRZpDwALMv.png" alt="image-20210826145735703"></p>
<h5 id="Ⅵ-gt-index"><a href="#Ⅵ-gt-index" class="headerlink" title="Ⅵ. :gt(index)"></a>Ⅵ. :gt(index)</h5><ul>
<li>匹配所有大于给定索引值的元素</li>
</ul>
<p><img src="https://i.loli.net/2021/08/26/z5VygrflkNGPeTm.png" alt="image-20210826145258834"></p>
<h5 id="Ⅶ-lt-index"><a href="#Ⅶ-lt-index" class="headerlink" title="Ⅶ.  :lt(index)"></a>Ⅶ.  :lt(index)</h5><ul>
<li>匹配所有小于给定索引值的元素</li>
</ul>
<p><img src="https://i.loli.net/2021/08/26/E5zLOsX7ID3Cbvd.png" alt="image-20210826150013475"></p>
<h5 id="Ⅷ-eq-index"><a href="#Ⅷ-eq-index" class="headerlink" title="Ⅷ. :eq(index)"></a>Ⅷ. :eq(index)</h5><ul>
<li>匹配一个给定索引值的元素</li>
</ul>
<p><img src="https://i.loli.net/2021/08/26/oGJYIHpRWAKFPgs.png" alt="image-20210826145019978"></p>
<h5 id="Ⅸ-header"><a href="#Ⅸ-header" class="headerlink" title="Ⅸ. :header"></a>Ⅸ. :header</h5><ul>
<li>匹配如 h1, h2, h3之类的标题元素</li>
</ul>
<p><img src="https://i.loli.net/2021/08/26/kl4NPpSM6TZmznD.png" alt="image-20210826150052620"></p>
<h5 id="Ⅹ-lang-language"><a href="#Ⅹ-lang-language" class="headerlink" title="Ⅹ.:lang(language)"></a>Ⅹ.:lang(language)</h5><ul>
<li><p>选择指定语言的所有元素</p>
</li>
<li><p>:lang选择器,匹配有一个语言值等于所提供的语言代码，或以提供的语言代码开始，后面马上跟一个“ - ”的元素。例如，选择器$(“div:lang(en)”)将匹配<code>&lt;div lang=&quot;en&quot;&gt;</code> and <code>&lt;div lang=&quot;en-us&quot;&gt;</code>（和他们的后代<code>&lt;div&gt;</code>），但不包括<code>&lt;div lang=&quot;fr&quot;&gt;</code></p>
</li>
<li><p>对于HTML元素，语言值由lang属性决定，也可能由来自meta元素或HTTP头信息决定。</p>
</li>
</ul>
<h5 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h5><ul>
<li><p>:animated 匹配所有正在执行动画效果的元素</p>
</li>
<li><p>:focus 匹配当前获取焦点的元素</p>
</li>
<li><p>:target 选择由文档URI的格式化识别码表示的目标元素。</p>
</li>
<li><p>:root 选择该文档的根元素。</p>
</li>
</ul>
<h4 id="6-html属性"><a href="#6-html属性" class="headerlink" title="6. html属性"></a>6. html属性</h4><h5 id="Ⅰ-html-val-fn"><a href="#Ⅰ-html-val-fn" class="headerlink" title="Ⅰ.html([val|fn])"></a>Ⅰ.html([val|fn])</h5><ul>
<li>$中的.html() ===》获取值</li>
<li>在一个 HTML 文档中, 我们可以使用 .html() 方法来获取任意一个元素的内容。 如果选择器匹配多于一个的元素，那么只有第一个匹配元素的 HTML 内容会被获取。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    alert($(<span class="string">&quot;p&quot;</span>).html());</span><br><span class="line">    alert($(<span class="string">&quot;div&quot;</span>).html());</span><br><span class="line"><span class="comment">//取出p和div中的内容</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).html(<span class="string">&quot;Hello &lt;b&gt;world&lt;/b&gt;!&quot;</span>);</span><br><span class="line"><span class="comment">//修改p元素中国的值</span></span><br></pre></td></tr></table></figure>



<h5 id="Ⅱ-text-val-fn"><a href="#Ⅱ-text-val-fn" class="headerlink" title="Ⅱ. text([val|fn])"></a>Ⅱ. text([val|fn])</h5><ul>
<li>取得所有匹配元素的内容</li>
<li>结果是由所有匹配元素包含的文本内容组合起来的文本。这个方法对HTML和XML文档都有效</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;p&#x27;</span>).text();</span><br><span class="line"><span class="comment">//返回p元素的文本内容。</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).text(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line"><span class="comment">//设置所有 p 元素的文本内容</span></span><br></pre></td></tr></table></figure>



<h5 id="Ⅲ-val-val-fn-arr"><a href="#Ⅲ-val-val-fn-arr" class="headerlink" title="Ⅲ. val([val|fn|arr])"></a>Ⅲ. val([val|fn|arr])</h5><ul>
<li>获得匹配元素的当前值。</li>
<li>在 jQuery 1.2 中,可以返回任意元素的值了。包括select。如果多选，将返回一个数组，其包含所选的值。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;input&quot;</span>).val();</span><br><span class="line"><span class="comment">//获取文本框中的值</span></span><br><span class="line">$(<span class="string">&quot;input&quot;</span>).val(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line"><span class="comment">//设定文本框的值</span></span><br></pre></td></tr></table></figure>



<h4 id="7-css属性"><a href="#7-css属性" class="headerlink" title="7.css属性"></a>7.css属性</h4><ul>
<li> css(name|pro|[,val|fn])</li>
<li>name：要访问的属性名称</li>
<li>properties：一个或多个CSS属性组成的一个数组</li>
<li><code>|</code> 表示或</li>
<li>name,value键值对形式</li>
</ul>
<h3 id="三、jQuery事件"><a href="#三、jQuery事件" class="headerlink" title="三、jQuery事件"></a>三、jQuery事件</h3><h4 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1.概念"></a>1.概念</h4><ul>
<li>与Js的事件基本相同，但前缀不带on </li>
</ul>
<h4 id="2-事件"><a href="#2-事件" class="headerlink" title="2.事件"></a>2.事件</h4><p><img src="https://i.loli.net/2021/08/26/PNps9d5cGOIu8FJ.png" alt="image-20210826153751867"></p>
<p><img src="https://i.loli.net/2021/08/26/2TDKSrA1H6wBn9x.png" alt="image-20210826153755981"></p>
<h5 id="Ⅰ-click"><a href="#Ⅰ-click" class="headerlink" title="Ⅰ. click()"></a>Ⅰ. click()</h5><ul>
<li>  触发、或将函数绑定到指定元素的 click 事件</li>
</ul>
<p><img src="https://i.loli.net/2021/08/26/mJk3lZ76VpLRdtX.png" alt="image-20210826153649188"></p>
]]></content>
      <categories>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery补充,AJAX,JSON</title>
    <url>/2021/08/29/jQuery%E8%A1%A5%E5%85%85%EF%BC%8CAJAX/</url>
    <content><![CDATA[<h3 id="一、jQuery知识点补充"><a href="#一、jQuery知识点补充" class="headerlink" title="一、jQuery知识点补充"></a>一、jQuery知识点补充</h3><h4 id="1-事件"><a href="#1-事件" class="headerlink" title="1.事件"></a>1.事件</h4><ul>
<li>页面加载事件ready(fn)</li>
</ul>
<p><img src="https://i.loli.net/2021/08/27/o7XMlCGW2i4Bcpx.png" alt="image-20210827091950509"></p>
<ul>
<li>当DOM载入就绪可以查询及操纵时绑定一个要执行的函数。</li>
</ul>
<h4 id="2-隐藏和显示"><a href="#2-隐藏和显示" class="headerlink" title="2.隐藏和显示"></a>2.隐藏和显示</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).clink(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	&amp;(<span class="string">&quot;img&quot;</span>).hiden();</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//	&amp;(&quot;img&quot;).show();</span></span><br></pre></td></tr></table></figure>



<h4 id="3-淡入淡出"><a href="#3-淡入淡出" class="headerlink" title="3.淡入淡出"></a>3.淡入淡出</h4><h5 id="Ⅰ-fadeIn-speed-easing-fn"><a href="#Ⅰ-fadeIn-speed-easing-fn" class="headerlink" title="Ⅰ. fadeIn([speed],[easing],[fn])"></a>Ⅰ. fadeIn([speed],[easing],[fn])</h5><ul>
<li>通过不透明度的变化来实现所有匹配元素的<font color='#d15252'>淡入</font>效果，并在动画完成后可选地触发一个回调函数。</li>
<li>这个动画只调整元素的不透明度，也就是说所有匹配的元素的高度和宽度不会发生变化。</li>
<li>参数：<ul>
<li>speed：三种预定速度之一的字符串(“slow”,”normal”, or “fast”)或表示动画时长的毫秒数值</li>
<li>easing：用来指定切换效果，默认是”swing”，可用参数”linear”</li>
<li>fn：在动画完成时执行的函数，每个元素执行一次</li>
</ul>
</li>
</ul>
<h5 id="Ⅱ-fadeOut-speed-easing-fn"><a href="#Ⅱ-fadeOut-speed-easing-fn" class="headerlink" title="Ⅱ. fadeOut([speed],[easing],[fn])"></a>Ⅱ. fadeOut([speed],[easing],[fn])</h5><ul>
<li><p>通过不透明度的变化来实现所有匹配元素的淡出效果，并在动画完成后可选地触发一个回调函数。</p>
</li>
<li><p>这个动画只调整元素的不透明度，也就是说所有匹配的元素的高度和宽度不会发生变化。</p>
</li>
<li><p>参数：</p>
<ul>
<li>speed：三种预定速度之一的字符串(“slow”,”normal”, or “fast”)或表示动画时长的毫秒数值</li>
<li>easing：用来指定切换效果，默认是”swing”，可用参数”linear”</li>
<li>fn：在动画完成时执行的函数，每个元素执行一次</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).fadeOut(<span class="string">&quot;slow&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://i.loli.net/2021/08/27/oCnkqzpaNRTSYDh.png" alt="image-20210827092904700"></p>
<p><img src="https://i.loli.net/2021/08/27/tuvyB1Twngdk538.png" alt="image-20210827092900137"></p>
<ul>
<li><p>实现淡入淡出</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取到盒子并调用淡出效果 并触发一个回调函数</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).fadeOut(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&quot;div&quot;</span>).fadeIn(<span class="number">3000</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="3-滑动效果"><a href="#3-滑动效果" class="headerlink" title="3.滑动效果"></a>3.滑动效果</h4><h5 id="Ⅰ-slideDown-speed-easing-fn"><a href="#Ⅰ-slideDown-speed-easing-fn" class="headerlink" title="Ⅰ. slideDown([speed],[easing],[fn])"></a>Ⅰ. slideDown([speed],[easing],[fn])</h5><ul>
<li><p>通过高度变化（向下增大）来动态地显示所有匹配的元素，在显示完成后可选地触发一个回调函数。</p>
</li>
<li><p>这个动画效果只调整元素的高度，可以使匹配的元素以“滑动”的方式显示出来。在jQuery 1.3中，上下的padding和margin也会有动画，效果更流畅。</p>
</li>
<li><p>参数：</p>
<ul>
<li>speed：三种预定速度之一的字符串(“slow”,”normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)</li>
<li>easing：用来指定切换效果，默认是”swing”，可用参数”linear”</li>
<li>fn：在动画完成时执行的函数，每个元素执行一次。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.btn2&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">&quot;p&quot;</span>).slideDown();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//以滑动方式显示隐藏的 &lt;p&gt; 元素</span></span><br></pre></td></tr></table></figure>



<h5 id="Ⅱ-slideUp-speed-easing-fn"><a href="#Ⅱ-slideUp-speed-easing-fn" class="headerlink" title="Ⅱ. slideUp([speed,[easing],[fn]])"></a>Ⅱ. slideUp([speed,[easing],[fn]])</h5><ul>
<li>通过高度变化（向上减小）来动态地隐藏所有匹配的元素，在隐藏完成后可选地触发一个回调函数。</li>
<li>参数：<ul>
<li>speed：三种预定速度之一的字符串(“slow”,”normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)</li>
<li>easing：用来指定切换效果，默认是”swing”，可用参数”linear”</li>
<li>fn：在动画完成时执行的函数，每个元素执行一次</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).slideUp(<span class="string">&quot;slow&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/08/27/jUOhygSQ2CZ13br.png" alt="image-20210827094845296"></p>
<ul>
<li>实现滑动显示和隐藏</li>
</ul>
<h4 id="4-自定义动画"><a href="#4-自定义动画" class="headerlink" title="4.自定义动画"></a>4.自定义动画</h4><h5 id="Ⅰ-animate-params-speed-easing-fn"><a href="#Ⅰ-animate-params-speed-easing-fn" class="headerlink" title="Ⅰ. animate(params,[speed],[easing],[fn])"></a>Ⅰ. animate(params,[speed],[easing],[fn])</h5><ul>
<li>用于创建自定义动画的函数</li>
<li>参数：<ul>
<li><font color='#d15252'>params</font>：一组包含作为动画属性和终值的样式属性和及其值的集合</li>
<li>speed：三种预定速度之一的字符串(“slow”,”normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)</li>
<li>easing：要使用的擦除效果的名称(需要插件支持).默认jQuery提供”linear” 和 “swing</li>
<li>fn：在动画完成时执行的函数，每个元素执行一次。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在一个动画中同时应用三种类型的效果</span></span><br><span class="line">$(<span class="string">&quot;#go&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">&quot;#block&quot;</span>).animate(&#123; </span><br><span class="line">    <span class="attr">width</span>: <span class="string">&quot;90%&quot;</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="string">&quot;100%&quot;</span>, </span><br><span class="line">    <span class="attr">fontSize</span>: <span class="string">&quot;10em&quot;</span>, </span><br><span class="line">    <span class="attr">borderWidth</span>: <span class="number">10</span></span><br><span class="line">  &#125;, <span class="number">1000</span> );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h4 id="5-链式调用"><a href="#5-链式调用" class="headerlink" title="5.链式调用"></a>5.链式调用</h4><p><img src="https://i.loli.net/2021/08/27/76bqz23KdYxeRui.png" alt="image-20210827101902998"></p>
<h4 id="6-获取内容和属性"><a href="#6-获取内容和属性" class="headerlink" title="6.获取内容和属性"></a>6.获取内容和属性</h4><ul>
<li>是非常重要的部分，就是操作DOM的能力</li>
</ul>
<h5 id="text-、html-、以及val"><a href="#text-、html-、以及val" class="headerlink" title="text()、html()、以及val()"></a>text()、html()、以及val()</h5><ul>
<li>text() ：设置或返回所选元素的<font color='#d15252'>文本内容</font></li>
<li>html()：设置或返回所选元素的<font color='#d15252'>内容</font>（包括HTML标记）</li>
<li>val()：设置或返回<font color='#d15252'>表单字段的值</font>(input)</li>
</ul>
<h4 id="7-添加元素和内容"><a href="#7-添加元素和内容" class="headerlink" title="7.添加元素和内容"></a>7.添加元素和内容</h4><ul>
<li>append()：在被选元素的结尾插入内容</li>
<li>prepend()：在被选元素的开头插入内容</li>
<li>after()：在被选元素之后插入内容</li>
<li>before()：在被选元素之前插入内容</li>
</ul>
<h4 id="8-删除元素"><a href="#8-删除元素" class="headerlink" title="8.删除元素"></a>8.删除元素</h4><p><img src="https://i.loli.net/2021/08/27/EOr3U8CKFmbhyIl.png" alt="image-20210827110535989"></p>
<h4 id="9-属性操作"><a href="#9-属性操作" class="headerlink" title="9.属性操作"></a>9.属性操作</h4><ul>
<li>attr：属性值；元素的属性 文档的节点属性<ul>
<li>节点属性：必须存在的属性</li>
</ul>
</li>
<li>prop：属性值；js对象</li>
</ul>
<h3 id="二、AJAX-（体验）"><a href="#二、AJAX-（体验）" class="headerlink" title="二、AJAX （体验）"></a>二、AJAX （体验）</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h4><ul>
<li>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术</li>
<li>AJAX = 异步 JavaScript 和 XML</li>
<li>AJAX 是一种用于创建快速动态网页的技术</li>
<li><strong>XMLHttpRequest</strong> 是AJAX的基础<ul>
<li>XMLHttpRequest 用于在后台与服务器交换数据</li>
</ul>
</li>
</ul>
<h4 id="2-创建XMLHttpRequest-对象"><a href="#2-创建XMLHttpRequest-对象" class="headerlink" title="2.创建XMLHttpRequest 对象"></a>2.创建XMLHttpRequest 对象</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">variable=<span class="keyword">new</span> XMLHttpRequest();</span><br></pre></td></tr></table></figure>

<ul>
<li><p>老版本的 Internet Explorer （IE5 和 IE6）使用 ActiveX 对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">variable=<span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>为了应对<font color='#d15252'>所有的</font>现代浏览器，可以通过以下方式创建对象</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xmlhttp;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</span><br><span class="line">  &#123;<span class="comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span></span><br><span class="line">  xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  &#123;<span class="comment">// code for IE6, IE5</span></span><br><span class="line">  xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-XMLHttpRequest-请求（发送）"><a href="#3-XMLHttpRequest-请求（发送）" class="headerlink" title="3.XMLHttpRequest 请求（发送）"></a>3.XMLHttpRequest 请求（发送）</h4><h5 id="Ⅰ-发送数据"><a href="#Ⅰ-发送数据" class="headerlink" title="Ⅰ.发送数据"></a>Ⅰ.发送数据</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xmlhttp.open(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;test1.txt&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/08/27/EXparGfyxARhlHm.png" alt="image-20210827135601437"></p>
<h5 id="Ⅱ-Get和Post的区别"><a href="#Ⅱ-Get和Post的区别" class="headerlink" title="Ⅱ. Get和Post的区别"></a>Ⅱ. Get和Post的区别</h5><ul>
<li>与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用</li>
<li>在以下情况中，请使用 POST 请求：<ul>
<li>无法使用缓存文件（更新服务器上的文件或数据库）</li>
<li>向服务器发送大量数据（POST 没有数据量限制）</li>
<li>发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/08/27/45JFsoLlPeXxkiC.png" alt="image-20210827135702792"></p>
<h4 id="4-服务器响应"><a href="#4-服务器响应" class="headerlink" title="4.服务器响应"></a>4.服务器响应</h4><ul>
<li>如需获得来自服务器的响应，请使用 XMLHttpRequest 对象的 responseText 或 responseXML 属性。</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>responseText</td>
<td>获得字符串形式的响应数据。</td>
</tr>
<tr>
<td>responseXML</td>
<td>获得 XML 形式的响应数据。</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</span><br><span class="line">    &#123;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;myDiv&quot;</span>).innerHTML=xmlhttp.responseText;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h5 id=""><a href="#" class="headerlink" title=""></a></h5><h3 id="三、JSON"><a href="#三、JSON" class="headerlink" title="三、JSON"></a>三、JSON</h3><h4 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1.概述"></a>1.概述</h4><ul>
<li><strong>JavaScript 对象表示法（JavaScript Object Notation）。</strong></li>
<li>JSON 是存储和交换文本信息的语法。类似 XML</li>
<li>JSON 比 XML 更小、更快，更易解析</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;employees&quot;</span>: [</span><br><span class="line">&#123; <span class="attr">&quot;firstName&quot;</span>:<span class="string">&quot;Bill&quot;</span> , <span class="attr">&quot;lastName&quot;</span>:<span class="string">&quot;Gates&quot;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">&quot;firstName&quot;</span>:<span class="string">&quot;George&quot;</span> , <span class="attr">&quot;lastName&quot;</span>:<span class="string">&quot;Bush&quot;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">&quot;firstName&quot;</span>:<span class="string">&quot;Thomas&quot;</span> , <span class="attr">&quot;lastName&quot;</span>:<span class="string">&quot;Carter&quot;</span> &#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-JSON语法规范"><a href="#2-JSON语法规范" class="headerlink" title="2.JSON语法规范"></a>2.JSON语法规范</h4><ul>
<li><p>JSON 语法是 JavaScript 对象表示法语法的子集</p>
<ul>
<li>数据在名称/值对中</li>
<li>数据由<font color='#d15252'>逗号</font>分隔</li>
<li>花括号保存对象</li>
<li>方括号保存数组</li>
</ul>
</li>
<li><p>JSON<font color='#d15252'><strong>数据</strong>的书写格式</font>是：键值对</p>
<ul>
<li>名称/值对包括字段名称（在双引号中），后面写一个冒号，然后是值：</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;firstName&quot;</span> : <span class="string">&quot;John&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>JSON 值可以是：</p>
<ul>
<li>数字（整数或浮点数）</li>
<li>字符串（在双引号中）</li>
<li>逻辑值（true 或 false）</li>
<li>数组（在方括号中）</li>
<li>对象（在花括号中）</li>
<li>null</li>
</ul>
</li>
</ul>
<h4 id="3-赋值取值"><a href="#3-赋值取值" class="headerlink" title="3.赋值取值"></a>3.赋值取值</h4><ul>
<li>赋值</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">var j = &#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;Liyukai&quot;</span>,</span><br><span class="line">    age : <span class="number">12</span>,</span><br><span class="line">    <span class="attr">&quot;sex&quot;</span> : <span class="string">&quot;nan&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>取值</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">alert(j.name);</span><br><span class="line">alert(j[<span class="string">&quot;name&quot;</span>]);</span><br></pre></td></tr></table></figure>

<ul>
<li>嵌套赋值取值</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">var j = &#123;</span><br><span class="line">    <span class="attr">&quot;j1&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;Liyukai&quot;</span>,</span><br><span class="line">        age : <span class="number">12</span>,</span><br><span class="line">        <span class="attr">&quot;sex&quot;</span> : <span class="string">&quot;nan&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;j2&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;Gaoyuhang&quot;</span>,</span><br><span class="line">        age : <span class="number">21</span>,</span><br><span class="line">        <span class="attr">&quot;sex&quot;</span> : <span class="string">&quot;nan&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var j1 = j[<span class="string">&quot;j1&quot;</span>];</span><br><span class="line">alert(j1[<span class="string">&quot;name&quot;</span>]);</span><br></pre></td></tr></table></figure>

<ul>
<li>forin方法嵌套取值</li>
</ul>
<h4 id="4-JSON解析"><a href="#4-JSON解析" class="headerlink" title="4.JSON解析"></a>4.JSON解析</h4><ul>
<li><p>第一步：创建XMLHTTP对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xmlhttp;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</span><br><span class="line">      &#123;<span class="comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span></span><br><span class="line">          xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;<span class="comment">// code for IE6, IE5</span></span><br><span class="line">          xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>第二步：发送请求到服务器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//发送请求</span></span><br><span class="line">xmlhttp.open(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;s.json&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure></li>
<li><p>第三步：接收服务器响应</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接收响应</span></span><br><span class="line">  </span><br><span class="line">      xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">var</span> rt = xmlhttp.responseText;</span><br><span class="line">              <span class="keyword">var</span> jso = <span class="built_in">JSON</span>.parse(rt);</span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;jso.length;i++)&#123;</span><br><span class="line">                  <span class="comment">// alert(jso[i].name);</span></span><br><span class="line">                  <span class="comment">// var name = jso[i].name;</span></span><br><span class="line">                  <span class="comment">// alert(jso[i].age);</span></span><br><span class="line">                  $(<span class="string">&quot;#mes&quot;</span>).append(<span class="string">&quot;&lt;tr&gt;&lt;td&gt;&quot;</span>+jso[i].id+<span class="string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span>+jso[i].name+<span class="string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span>+jso[i].age+<span class="string">&quot;&lt;/td&gt;&lt;/tr&gt;&quot;</span>);</span><br><span class="line">                  <span class="comment">// $(&quot;#mes&quot;).append(&quot;&lt;td&gt;&quot;+jso[i].age+&quot;&lt;/td&gt;&lt;/tr&gt;&quot;);</span></span><br><span class="line">                  <span class="comment">// $(&quot;#name&quot;).append(&quot;&lt;td&gt;&quot;+jso[i].age+&quot;&lt;/td&gt;&quot;);</span></span><br><span class="line">                  <span class="comment">// $(&quot;#age&quot;).append(&quot;&lt;td&gt;&quot;+age+&quot;&lt;/td&gt;&quot;);</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>xmlhttp.responseText获取到服务器响应的数据</li>
</ul>
</li>
<li><p>第四步：解析数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.parse解析服务器响应的数据</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
        <tag>AJAX</tag>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title>private关键字和get/set方法</title>
    <url>/2021/08/25/private%E5%85%B3%E9%94%AE%E5%AD%97%E5%92%8Cget-set%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h3 id="一、权限修饰符—Private"><a href="#一、权限修饰符—Private" class="headerlink" title="一、权限修饰符—Private"></a>一、权限修饰符—<font color='#d15252'>Private</font></h3><h4 id="1-作用："><a href="#1-作用：" class="headerlink" title="1.作用："></a>1.作用：</h4><ul>
<li><p>private所修饰的内容，使用的时候，只能在本类中使用</p>
</li>
<li><p>private：私有的</p>
<ul>
<li><p>只能在本类中，操作private修饰的内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Demo1.java:7: 错误: id 在 stu 中是 private 访问控制</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="2-开发中，所有的成员变量都要加private"><a href="#2-开发中，所有的成员变量都要加private" class="headerlink" title="2.开发中，所有的成员变量都要加private"></a>2.开发中，所有的成员变量都要加private</h4><ul>
<li><font color='#d15252'><strong>逻辑使用</strong></font>比较灵活</li>
</ul>
<h5 id="衍生问题：set-get方法"><a href="#衍生问题：set-get方法" class="headerlink" title="衍生问题：set/get方法"></a>衍生问题：set/get方法</h5><h3 id="二、get-set-方法"><a href="#二、get-set-方法" class="headerlink" title="二、get / set 方法"></a>二、get / set 方法</h3><ul>
<li><p><font color='orange'><strong>赋值</strong></font>(set方法)：成员变量加上private后，其他方法（比如main方法）不能给成员变量赋值</p>
<ul>
<li>但是自己的方法能访问自己的私有成员变量，其他类可以访问本类的成员方法<ul>
<li>所以用其他类访问成员方法，成员方法给成员变量修改值</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="comment">//定义一个由private修饰的成员变量</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">	<span class="comment">//完成给age的赋值功能</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.age=age;</span><br><span class="line">	&#125;</span><br><span class="line">======================================</span><br><span class="line">    <span class="comment">//在主方法中创建相应对象，调用赋值方法即可</span></span><br><span class="line">    	<span class="comment">//赋值</span></span><br><span class="line">		s.m(<span class="number">20</span>);</span><br></pre></td></tr></table></figure></li>
<li><p><strong><font color='orange'>取值</font></strong>(get方法)：创建成员方法，通过return带回返回值给调用方法</p>
<ul>
<li>使用return原因：更加灵活，数据可以重复利用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//完成取值功能</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//使用return取值更加灵活</span></span><br><span class="line">	<span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="3-private修饰成员变量细节优化"><a href="#3-private修饰成员变量细节优化" class="headerlink" title="3.private修饰成员变量细节优化"></a>3.private修饰成员变量<font color='cornflowerblue'>细节优化</font></h4><ul>
<li>如果没有特殊的需求，在给成员变量赋值的时候，直接赋值即可</li>
<li>给访问private修饰的成员方法<font color='#d15252'>命名规范</font><ul>
<li>set变量名<ul>
<li>变量名首字母大写</li>
</ul>
</li>
<li>get变量名<ul>
<li>变量名首字母大写</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="作业："><a href="#作业：" class="headerlink" title="作业："></a>作业：</h5><ul>
<li>定义学生类<ul>
<li>有参和空参构造</li>
<li>private</li>
<li>学号</li>
<li>姓名</li>
</ul>
</li>
<li>添加到数组中，并做打印</li>
</ul>
<h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><ul>
<li><p>创建项目并进行测试</p>
</li>
<li><p>需求分析</p>
</li>
<li><p>创建自定义的学生类</p>
<ul>
<li><p>class Student</p>
</li>
<li><p>属性 = 成员变量 </p>
<ul>
<li>定义成员变量<ul>
<li>private int id;</li>
<li>private String name;</li>
</ul>
</li>
</ul>
</li>
<li><p>定义无参、有参构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义无参构造</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//定义带参构造</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> id,String name)</span></span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.id = id;</span><br><span class="line">	<span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>定义相应的get/set方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义相应的get/set方法	=== 学号</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>创建存储学生的数组方法</p>
<ul>
<li>public static Student[] init(){}</li>
<li>return返回创建的数组</li>
</ul>
<p><img src="https://i.loli.net/2021/07/28/r1f3Z2gm9Odok7I.png" alt="image-20210728103752639"></p>
</li>
<li><p>创建遍历数组学生对象的方法</p>
<p><img src="https://i.loli.net/2021/07/28/PaCGI3pbHENkK8x.png" alt="image-20210728103827836"></p>
<ul>
<li>用到get方法，取出学生对象的属性</li>
</ul>
</li>
<li><p>在main方法中</p>
<ul>
<li><p>第一步：调用init获取创建的数组</p>
</li>
<li><p>第二步：创建Student的无参对象，带参对象</p>
<ul>
<li>无参：通过.set()方法给属性赋值</li>
<li>带参：直接在初始化值时赋值</li>
</ul>
</li>
<li><p>第三步：将创建的学生对象存入数组</p>
</li>
<li><p>第四步：调用遍历数组学生对象的方法</p>
<p><img src="https://i.loli.net/2021/07/28/EIKidPcfUSOTqtr.png" alt="image-20210728104038704"></p>
</li>
</ul>
</li>
</ul>
<h3 id="三、Java的编程规范"><a href="#三、Java的编程规范" class="headerlink" title="三、Java的编程规范"></a>三、Java的编程规范</h3><ul>
<li>见名知意</li>
<li>确保功能的唯一性</li>
<li>确保逻辑的灵活性</li>
<li>规则和代码没有关系。规则语法</li>
</ul>
<h3 id="四、main方法和可变参"><a href="#四、main方法和可变参" class="headerlink" title="四、main方法和可变参"></a>四、main方法和可变参</h3><h4 id="1-main方法"><a href="#1-main方法" class="headerlink" title="1.main方法"></a>1.main方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-可变参"><a href="#2-可变参" class="headerlink" title="2.可变参"></a>2.可变参</h4><ul>
<li>格式：<code>数据类型 ... 变量名</code> </li>
<li>参数最终会变为数组</li>
<li>固定参和可变参在一起时，可变参必须写在末尾</li>
</ul>
<h3 id="五、方法的重载"><a href="#五、方法的重载" class="headerlink" title="五、方法的重载"></a>五、方法的重载</h3><h4 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h4><ul>
<li><font color='#d15252'>在同一个类中</font>，方法名相同<ul>
<li>与返回值无关，只看方法名和参数列表</li>
<li>参数<ul>
<li>参数个数    </li>
<li>参数类型</li>
</ul>
</li>
<li>修饰符同级</li>
</ul>
</li>
<li>在调用时，Jvm通过区别参数列表的不同，调用相应的方法</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>成员方法</tag>
        <tag>private</tag>
        <tag>get/set</tag>
        <tag>修饰符</tag>
      </tags>
  </entry>
  <entry>
    <title>匿名对象、内部类、代码块、和修饰符等</title>
    <url>/2021/08/25/%E5%8C%BF%E5%90%8D%E5%AF%B9%E8%B1%A1%E3%80%81%E5%86%85%E9%83%A8%E7%B1%BB%E3%80%81%E4%BB%A3%E7%A0%81%E5%9D%97%E3%80%81%E5%92%8C%E4%BF%AE%E9%A5%B0%E7%AC%A6%E7%AD%89/</url>
    <content><![CDATA[<h3 id="一、匿名对象"><a href="#一、匿名对象" class="headerlink" title="一、匿名对象"></a>一、匿名对象</h3><h4 id="1-什么是匿名对象"><a href="#1-什么是匿名对象" class="headerlink" title="1.什么是匿名对象"></a>1.什么是匿名对象</h4><ul>
<li>​    没有名字的对象<ul>
<li>即堆区的地址值，没有用变量来保存</li>
</ul>
</li>
</ul>
<h4 id="2-匿名对象的使用"><a href="#2-匿名对象的使用" class="headerlink" title="2.匿名对象的使用"></a>2.匿名对象的使用</h4><ul>
<li><p>快速访问（测试用）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个匿名对象，快速访问类中的值，用完即释放</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> A().a);</span><br></pre></td></tr></table></figure></li>
<li><p>传参</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建匿名对象传给方法</span></span><br><span class="line">m(<span class="keyword">new</span> A());</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">(A a)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="二、内部类"><a href="#二、内部类" class="headerlink" title="二、内部类"></a>二、内部类</h3><h4 id="1-什么是内部类"><a href="#1-什么是内部类" class="headerlink" title="1.什么是内部类"></a>1.什么是内部类</h4><ul>
<li>在类中定义类<ul>
<li>通过实验，发现Java语法允许在类的内部定义类</li>
</ul>
</li>
<li>生成Class文件格式 ：  外部类$内部类</li>
</ul>
<h4 id="2-内部类区别"><a href="#2-内部类区别" class="headerlink" title="2.内部类区别"></a>2.内部类区别</h4><ul>
<li><p>成员内部类：类中方法外</p>
<ul>
<li>访问格式：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">外部类.内部类 变量名 = <span class="keyword">new</span> 外部类().new 内部类();</span><br></pre></td></tr></table></figure></li>
<li><p>局部内部类：类中方法中</p>
<ul>
<li>访问：<ul>
<li>在方法中，内部类并列的地方，创建内部类的对象，通过对象调用内部类中的成员</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">	<span class="comment">//成员方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="comment">//局部内部类</span></span><br><span class="line">		<span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">			<span class="comment">//内部类中的方法</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span></span>&#123;</span><br><span class="line">				System.out.println(<span class="number">111111</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//创建内部类的对象，调用其中的成员</span></span><br><span class="line">		<span class="keyword">new</span> C().m2();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;</span><br><span class="line">		<span class="comment">//创建A类对象，调用m2方法</span></span><br><span class="line">		A a = <span class="keyword">new</span> A();</span><br><span class="line">		a.m();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="3-内部类访问特点"><a href="#3-内部类访问特点" class="headerlink" title="3.内部类访问特点"></a>3.内部类访问特点</h4><ul>
<li>内部类可以直接访问外部类的成员，包括私有</li>
<li>外部类要访问内部类的成员，必须创建对象</li>
</ul>
<h4 id="4-匿名内部类"><a href="#4-匿名内部类" class="headerlink" title="4.匿名内部类"></a>4.<font color='#d15252'>匿名内部类</font></h4><ul>
<li><p>快速的实例化接口或者抽象类</p>
<ul>
<li><p>一般采用多态的手法去实例化（用变量来保存该匿名内部类的实体）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//直接输出匿名内部类</span></span><br><span class="line"><span class="comment">//System.out.println(new ....);</span></span><br><span class="line"><span class="comment">//得到一个地址值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">在&#123;&#125;后直接加调用方法 </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="三、代码块"><a href="#三、代码块" class="headerlink" title="三、代码块"></a>三、代码块</h3><ul>
<li><p>{ }</p>
</li>
<li><p>位置区别</p>
<ul>
<li><p>构造代码块（类中方法外）</p>
<ul>
<li>在创建对象时调用</li>
<li>优先于构造方法执行</li>
</ul>
</li>
<li><p>局部代码块（方法内）</p>
<ul>
<li>限定变量生命周期，提高内存利用率</li>
</ul>
</li>
<li><p><font color='#d15252'>静态</font>代码块，在代码块前加static</p>
<ul>
<li>在创建对象时调用</li>
<li>优先与构造代码块（<font color='orange'>优先级最高</font>）</li>
<li><font color='#d15252'>只执行一次</font></li>
</ul>
<blockquote>
<p>比较常用，加载数据，加载驱动</p>
<p>媒介：系统软件和硬件的连接者</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="四、包"><a href="#四、包" class="headerlink" title="四、包"></a>四、包</h3><h4 id="1-什么是包"><a href="#1-什么是包" class="headerlink" title="1.什么是包"></a>1.什么是包</h4><ul>
<li>文件夹<ul>
<li>多个class文件进行管理</li>
<li>增加文件夹</li>
</ul>
</li>
<li>命名<ul>
<li>公司域名倒写<ul>
<li>baidu.com</li>
<li>包名：com.baidu.add</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="2-Java实现自动打包"><a href="#2-Java实现自动打包" class="headerlink" title="2.Java实现自动打包"></a>2.Java实现自动打包</h4><ul>
<li><p>先定义包</p>
<ul>
<li>package com.a；(代码第一行)</li>
</ul>
</li>
<li><p>在当前java文件目录打开cmd命令行</p>
<ul>
<li><p>输入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javac -d . 类名.java</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="五、修饰符"><a href="#五、修饰符" class="headerlink" title="五、修饰符"></a>五、修饰符</h3><table>
<thead>
<tr>
<th>修饰符访问权限</th>
<th>类</th>
<th>包</th>
<th>子类</th>
<th>其他包</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>public</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>对任何人都是可用的</td>
</tr>
<tr>
<td>protected</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>×</td>
<td>继承的类可以访问以及和private一样的权限</td>
</tr>
<tr>
<td>default(默认)</td>
<td>√</td>
<td>√</td>
<td>×</td>
<td>×</td>
<td>包访问权限，即在整个包内均可被访问</td>
</tr>
<tr>
<td>private</td>
<td>√</td>
<td>×</td>
<td>×</td>
<td>×</td>
<td>除类型创建者和类型的内部方法之外的任何人都不能访问的元素</td>
</tr>
</tbody></table>
<h3 id="六、增强for循环"><a href="#六、增强for循环" class="headerlink" title="六、增强for循环"></a>六、增强for循环</h3><ul>
<li><p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(变量:遍历对象)&#123;	</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//例如</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i ; arr)&#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>弊端：没有索引，不能修改，不能操作s</li>
<li>优点：取值更加方便</li>
</ul>
</li>
</ul>
<ul>
<li>静态绑定：final static private</li>
<li>动态绑定：方法</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>匿名对象</tag>
        <tag>内部类</tag>
        <tag>代码块</tag>
        <tag>包</tag>
        <tag>四种权限修饰符</tag>
      </tags>
  </entry>
  <entry>
    <title>反射</title>
    <url>/2021/08/23/%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h3 id="一、反射"><a href="#一、反射" class="headerlink" title="一、反射"></a>一、反射</h3><h4 id="什么是反射？"><a href="#什么是反射？" class="headerlink" title="什么是反射？"></a>什么是反射？</h4><ul>
<li><p>利用代码区中的数据（.class文件），去创建对象；<font color='#d15252'>省略new</font></p>
<ul>
<li>构造方法</li>
<li>成员变量</li>
<li>成员方法</li>
</ul>
</li>
<li><p>在代码区中存储的class并不是真正的class文件(物理)，而是一个虚拟的对象</p>
<ul>
<li><strong><font color='#d15252'>Class类</font></strong></li>
</ul>
</li>
</ul>
<h3 id="二、Class"><a href="#二、Class" class="headerlink" title="二、Class"></a>二、Class</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h4><ul>
<li>泛型<ul>
<li>class类型很多，不固定</li>
</ul>
</li>
<li>修饰符：final <ul>
<li>不能被继承</li>
</ul>
</li>
<li>Class的实例表示正在运行的类和接口</li>
<li>管理class文件对象</li>
</ul>
<h4 id="2-构造方法"><a href="#2-构造方法" class="headerlink" title="2.构造方法"></a>2.构造方法</h4><p>无</p>
<h4 id="3-成员方法"><a href="#3-成员方法" class="headerlink" title="3.成员方法"></a>3.成员方法</h4><ul>
<li><p>获取class文件对象的三种方式</p>
<ul>
<li><p>```java<br>方式一：通过Object类中的getClass()方法</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  ![image-<span class="number">20210817110933068</span>](https:<span class="regexp">//i</span>.loli.net<span class="regexp">/2021/</span><span class="number">08</span><span class="regexp">/17/m</span>1nypAo43bJFBIC.png)</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  方式二：类名.class获取到字节码文件对象(任意数据类型都具有静态的class属性)</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/08/17/23EShKfXxMYZW5y.png" alt="image-20210817111023597"></p>
</li>
<li><p>```java<br>方式三：forName(“String s”)</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    - <span class="string">&quot; s &quot;</span> : 类的全路径</span><br><span class="line"></span><br><span class="line">    ![image-<span class="number">20210817111128606</span>](https:<span class="regexp">//i</span>.loli.net<span class="regexp">/2021/</span><span class="number">08</span><span class="regexp">/17/</span>M2Be6PaLC7wJEpH.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##### Ⅰ.forName()</span></span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">static Class&lt;?&gt; forName(String className) </span><br><span class="line"><span class="regexp">//</span>返回与给定字符串名称的类或接口相关联的 Class对象。  </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>className : 类的全路径</p>
</li>
<li><p>static 静态的，可以通过类名调用</p>
</li>
<li><p>Class&lt;?&gt;泛型</p>
</li>
</ul>
<h4 id="4-Class文件的内部成员"><a href="#4-Class文件的内部成员" class="headerlink" title="4.Class文件的内部成员"></a>4.<font color='#d15252'>Class文件</font>的内部成员</h4><ul>
<li>构造方法：Constructor</li>
<li>成员方法：Method</li>
<li>成员变量：Filed</li>
</ul>
<hr>
<h3 id="三、Constructor"><a href="#三、Constructor" class="headerlink" title="三、Constructor"></a>三、Constructor</h3><h4 id="1-获取Class构造方法"><a href="#1-获取Class构造方法" class="headerlink" title="1.获取Class构造方法"></a>1.获取Class构造方法</h4><h5 id="Ⅰ-getConstructors"><a href="#Ⅰ-getConstructors" class="headerlink" title="Ⅰ.getConstructors()"></a>Ⅰ.getConstructors()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Constructor&lt;?&gt;[] getConstructors() </span><br><span class="line"><span class="comment">//返回一个包含 Constructor对象的数组， Constructor对象反映了由该 Class对象表示的类的所有公共构造函数。  </span></span><br></pre></td></tr></table></figure>

<ul>
<li>返回值类型Constructor</li>
<li>只能获取到<font color='#d15252'>public修饰</font>的的构造方法</li>
</ul>
<p><img src="https://i.loli.net/2021/08/17/w7yi4ZhWfLXmFd9.png" alt="image-20210817135511279"></p>
<h5 id="Ⅱ-getDeclaredConstructors"><a href="#Ⅱ-getDeclaredConstructors" class="headerlink" title="Ⅱ.getDeclaredConstructors()"></a>Ⅱ.getDeclaredConstructors()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Constructor&lt;?&gt;[] getDeclaredConstructors() </span><br><span class="line"><span class="comment">//返回反映由该 Class对象表示的类声明的所有构造函数的 Constructor对象的数组。  </span></span><br></pre></td></tr></table></figure>

<ul>
<li>获取<font color='#d15252'>所有的</font>构造方法</li>
</ul>
<p><img src="https://i.loli.net/2021/08/17/u6dkrP9piQjFRSE.png" alt="image-20210817135520975"></p>
<h5 id="Ⅲ-getConstructor"><a href="#Ⅲ-getConstructor" class="headerlink" title="Ⅲ.getConstructor()"></a>Ⅲ.getConstructor()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Constructor&lt;T&gt; <span class="title">getConstructor</span><span class="params">(Class&lt;?&gt;... parameterTypes)</span> </span></span><br><span class="line"><span class="function"><span class="comment">//返回一个 Constructor对象，该对象反映由该 Class对象表示的类的指定公共构造函数。  </span></span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>返回指定的构造方法（获取不到private修饰的）</p>
<p><img src="https://i.loli.net/2021/08/17/srX71Oml6BIaCoH.png" alt="image-20210817140725698"></p>
</li>
</ul>
<h5 id="Ⅳ-getDeclaredConstructor"><a href="#Ⅳ-getDeclaredConstructor" class="headerlink" title="Ⅳ. getDeclaredConstructor()"></a>Ⅳ. getDeclaredConstructor()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Constructor&lt;T&gt; getDeclaredConstructor​*(Class&lt;?&gt;... parameterTypes) </span><br><span class="line"><span class="comment">//返回一个 Constructor对象，该对象反映由此 Class对象表示的类或接口的指定构造函数。  </span></span><br></pre></td></tr></table></figure>

<ul>
<li>获取指定的构造方法，private修饰的也可以获取</li>
</ul>
<p><img src="https://i.loli.net/2021/08/17/ERUN6MXepbT4OfQ.png" alt="image-20210817140901110"></p>
<h4 id="2-利用构造方法创建Class实例"><a href="#2-利用构造方法创建Class实例" class="headerlink" title="2.利用构造方法创建Class实例"></a>2.利用构造方法<font color='#d15252'>创建Class实例</font></h4><h5 id="Ⅰ-newInstance-Object…-initargs"><a href="#Ⅰ-newInstance-Object…-initargs" class="headerlink" title="Ⅰ.newInstance(Object… initargs)"></a>Ⅰ.newInstance(Object… initargs)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">T <span class="title">newInstance</span><span class="params">(Object... initargs)</span></span></span><br><span class="line"><span class="function"><span class="comment">//使用由此 Constructor对象表示的构造函数，使用指定的初始化参数来创建和初始化构造函数的声明类的新实例。  </span></span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/08/17/MVLpE5fQs8InJxm.png" alt="image-20210817204522820"></p>
<ul>
<li><p>带参传递一要取出的构造方法的参数类型，根据方法的重载，选择对应的构造方法</p>
</li>
<li><p>使用newInstance方法时，根据使用的构造方法进行传值</p>
</li>
<li><p>如果不重写toString()方法，则创建的实例化对象直接输出是一个地址值</p>
</li>
</ul>
<h3 id="四、Field"><a href="#四、Field" class="headerlink" title="四、Field"></a>四、Field</h3><h4 id="1-获取Class成员变量"><a href="#1-获取Class成员变量" class="headerlink" title="1.获取Class成员变量"></a>1.获取Class<font color='#d15252'>成员变量</font></h4><h5 id="Ⅰ-getFields"><a href="#Ⅰ-getFields" class="headerlink" title="Ⅰ.getFields()"></a>Ⅰ.getFields()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Field[] getFields() </span><br><span class="line"><span class="comment">//返回包含一个数组 Field对象反射由此表示的类或接口的所有可访问的公共字段 类对象。  </span></span><br></pre></td></tr></table></figure>

<ul>
<li>取出所有Public修饰的成员变量</li>
</ul>
<h5 id="Ⅱ-getDeclaredFields"><a href="#Ⅱ-getDeclaredFields" class="headerlink" title="Ⅱ.getDeclaredFields()"></a>Ⅱ.getDeclaredFields()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Field[] getDeclaredFields() </span><br><span class="line"><span class="comment">//返回的数组 Field对象反映此表示的类或接口声明的所有字段 类对象 </span></span><br></pre></td></tr></table></figure>

<ul>
<li>取出所有成员变量，包括private修饰的</li>
</ul>
<h5 id="Ⅲ-getField-String-name"><a href="#Ⅲ-getField-String-name" class="headerlink" title="Ⅲ.getField(String name)"></a>Ⅲ.getField(String name)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Field <span class="title">getField</span><span class="params">(String name)</span> </span></span><br><span class="line"><span class="function"><span class="comment">//返回一个 Field对象，它反映此表示的类或接口的指定公共成员字段类对象 </span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>取出指定的public修饰的成员变量</li>
</ul>
<h5 id="Ⅳ-getDeclaredField-String-name"><a href="#Ⅳ-getDeclaredField-String-name" class="headerlink" title="Ⅳ.getDeclaredField(String name)"></a>Ⅳ.getDeclaredField(String name)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Field <span class="title">getDeclaredField</span><span class="params">(String name)</span> </span></span><br><span class="line"><span class="function"><span class="comment">//返回一个 Field对象，它反映此表示的类或接口的指定已声明字段类对象。  </span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>获取指定的成员变量，private也可以取出</li>
</ul>
<h4 id="4-给Class成员变量赋值"><a href="#4-给Class成员变量赋值" class="headerlink" title="4.给Class成员变量赋值"></a>4.给Class成员变量<font color='#d15252'>赋值</font></h4><h5 id="Ⅰ-set-Object-obj-Object-value"><a href="#Ⅰ-set-Object-obj-Object-value" class="headerlink" title="Ⅰ.set(Object obj, Object value)"></a>Ⅰ.set(Object obj, Object value)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(Object obj, Object value)</span> </span></span><br><span class="line"><span class="function"><span class="comment">//将指定的对象参数中由此 Field对象表示的字段设置为指定的新值。  </span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>获取公共的成员变量</li>
</ul>
<p><img src="https://i.loli.net/2021/08/17/eo1Hp9LraVjMuOP.png" alt="image-20210817153600751"></p>
<ul>
<li>获取私有的成员变量</li>
</ul>
<p><img src="https://i.loli.net/2021/08/17/Hk8viMBxhaSXRAE.png" alt="image-20210817181152287"></p>
<ul>
<li>私有的成员变量赋值时需要暴力破解</li>
</ul>
<hr>
<h3 id="五、Method"><a href="#五、Method" class="headerlink" title="五、Method"></a>五、Method</h3><h4 id="1-获取Class成员方法"><a href="#1-获取Class成员方法" class="headerlink" title="1.获取Class成员方法"></a>1.获取Class成员方法</h4><h5 id="Ⅰ-getMethods"><a href="#Ⅰ-getMethods" class="headerlink" title="Ⅰ.getMethods()"></a>Ⅰ.getMethods()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Method[] getMethods() </span><br><span class="line"><span class="comment">//返回一个包含 方法对象的数组， 方法对象反映由该 Class对象表示的类或接口的所有公共方法，包括由类或接口声明的对象以及从超类和超级接口继承的类。  </span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>取出class中的所有<font color='#d15252'>Public修饰的</font>成员方法</p>
</li>
<li><p>会取出包括父类中继承的方法</p>
</li>
</ul>
<p><img src="https://i.loli.net/2021/08/17/oniWLADSya2NE4e.png" alt="image-20210817155232292"></p>
<h5 id="Ⅱ-getDeclaredMethods"><a href="#Ⅱ-getDeclaredMethods" class="headerlink" title="Ⅱ.getDeclaredMethods()"></a>Ⅱ.getDeclaredMethods()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Methods[] getDeclaredMethods() </span><br><span class="line"><span class="comment">//返回一个包含 方法对象的数组， 方法对象反映由 Class对象表示的类或接口的所有声明方法，包括public，protected，default（package）访问和私有方法，但不包括继承方法。 </span></span><br></pre></td></tr></table></figure>

<ul>
<li>取出class中的所有成员方法，包括private修饰的</li>
</ul>
<p><img src="https://i.loli.net/2021/08/17/8GmaHKep6rk35Bn.png" alt="image-20210817155435479"></p>
<h5 id="Ⅲ-getMethod-String-name-Class-lt-gt-…-parameterTypes"><a href="#Ⅲ-getMethod-String-name-Class-lt-gt-…-parameterTypes" class="headerlink" title="Ⅲ.getMethod(String name, Class&lt;?&gt;… parameterTypes)"></a>Ⅲ.getMethod(String name, Class&lt;?&gt;… parameterTypes)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Methods <span class="title">getMethod</span><span class="params">(String name, Class&lt;?&gt;... parameterTypes)</span> </span></span><br><span class="line"><span class="function"><span class="comment">//返回一个 方法对象，该对象反映由该 Class对象表示的类或接口的指定公共成员方法。 </span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>取出class中的指定的Public修饰的成员方法</li>
</ul>
<p><img src="https://i.loli.net/2021/08/17/T5awcy9gsUKBGt2.png" alt="image-20210817155835845"></p>
<h5 id="Ⅳ-getDeclaredMethod-String-name-Class-lt-gt-…-parameterTypes"><a href="#Ⅳ-getDeclaredMethod-String-name-Class-lt-gt-…-parameterTypes" class="headerlink" title="Ⅳ.getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes)"></a>Ⅳ.getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Methods <span class="title">getDeclaredMethod</span><span class="params">(String name, Class&lt;?&gt;... parameterTypes)</span> <span class="comment">//返回一个 方法对象，它反映此表示的类或接口的指定声明的方法 Class对象。  </span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>取出指定的成员方法</li>
</ul>
<p><img src="https://i.loli.net/2021/08/17/Rs8FvogtaNVdhib.png" alt="image-20210817160013845"></p>
<h4 id="2-使用成员方法"><a href="#2-使用成员方法" class="headerlink" title="2.使用成员方法"></a>2.使用成员方法</h4><h5 id="Ⅰ-invoke-Object-obj-Object…-args"><a href="#Ⅰ-invoke-Object-obj-Object…-args" class="headerlink" title="Ⅰ.invoke(Object obj, Object… args)"></a>Ⅰ.invoke(Object obj, Object… args)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Object <span class="title">invoke</span><span class="params">(Object obj, Object... args)</span> </span></span><br><span class="line"><span class="function"><span class="comment">//在具有指定参数的指定对象上调用此 方法对象表示的基础方法。  </span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>将取出的<font color='#d15252'><strong>方法和对象绑定</strong></font></li>
</ul>
<p><img src="https://i.loli.net/2021/08/17/bv7ZaMqpmjufntk.png" alt="image-20210817212251329"></p>
<hr>
<h3 id="六、AccessibleObject"><a href="#六、AccessibleObject" class="headerlink" title="六、AccessibleObject"></a>六、AccessibleObject</h3><h4 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1.概述"></a>1.概述</h4><ul>
<li>AccessibleObject是 Field、Constructor、Method的父类</li>
<li>作用：看你是否除了public修饰 （安全检查机制）</li>
</ul>
<h4 id="2-成员方法"><a href="#2-成员方法" class="headerlink" title="2.成员方法"></a>2.成员方法</h4><h5 id="Ⅰ-setAccessible-boolean-f-暴力破解"><a href="#Ⅰ-setAccessible-boolean-f-暴力破解" class="headerlink" title="Ⅰ.setAccessible(boolean f) 暴力破解"></a>Ⅰ.setAccessible(boolean f) 暴力破解</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAccessible</span><span class="params">(<span class="keyword">boolean</span> flag)</span> </span></span><br><span class="line"><span class="function">    <span class="comment">//将此反射对象的 accessible标志设置为指示的布尔值。  </span></span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/08/17/foUpWaY9lqKbHv1.png" alt="image-20210817143740180"></p>
<h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><h4 id="1-泛型擦除"><a href="#1-泛型擦除" class="headerlink" title="1.泛型擦除"></a>1.泛型擦除</h4><ul>
<li><img src="https://i.loli.net/2021/08/17/3xXvCpmNDtfj4F2.png" alt="image-20210817171924074"></li>
</ul>
<h4 id="2-获取当前src目录"><a href="#2-获取当前src目录" class="headerlink" title="2.获取当前src目录"></a>2.获取当前src目录<img src="https://i.loli.net/2021/08/18/FBsTqWeIxmafXlR.png" alt="image-20210818093158387"></h4><ul>
<li><p>获取当前src目录</p>
</li>
<li><p>会出现取出字符串带双引号，forName无法识别的问题</p>
</li>
</ul>
<p><img src="C:\Users\GikH\AppData\Roaming\Typora\typora-user-images\image-20210818104512010.png" alt="image-20210818104512010"></p>
<p><img src="https://i.loli.net/2021/08/18/ToLq5lAhDfyrCRY.png" alt="image-20210818104515650"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>外键约束，多表查询，三范式</title>
    <url>/2021/09/17/%E5%A4%96%E9%94%AE%E7%BA%A6%E6%9D%9F%EF%BC%8C%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%8C%E4%B8%89%E8%8C%83%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="一、外键约束"><a href="#一、外键约束" class="headerlink" title="一、外键约束"></a>一、外键约束</h3><h4 id="1-引入"><a href="#1-引入" class="headerlink" title="1.引入"></a>1.引入</h4><ul>
<li><p>员工表查询</p>
<ul>
<li>新建员工表</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp(</span><br><span class="line">  eid <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">  ename <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">  age <span class="type">INT</span>,</span><br><span class="line">  depname <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">  deplocation <span class="type">VARCHAR</span>(<span class="number">10</span>) </span><br><span class="line"> </span><br><span class="line">)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;孙悟空&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;研发部&#x27;</span>,<span class="string">&#x27;北京&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;猪八戒&#x27;</span>,<span class="number">21</span>,<span class="string">&#x27;研发部&#x27;</span>,<span class="string">&#x27;北京&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;老三&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;研发部&#x27;</span>,<span class="string">&#x27;北京&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;唐僧&#x27;</span>,<span class="number">40</span>,<span class="string">&#x27;销售部&#x27;</span>,<span class="string">&#x27;天津&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;白龙马&#x27;</span>,<span class="number">21</span>,<span class="string">&#x27;销售部&#x27;</span>,<span class="string">&#x27;天津&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;白骨精&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;产品部&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/09/16/LroGUs6ZnyEMvaX.png" alt="image-20210916092411529"></p>
<ul>
<li><p>单表的缺点    </p>
<ul>
<li>数据有冗余</li>
</ul>
</li>
<li><p>所以可以建立多张表</p>
<p><img src="https://i.loli.net/2021/09/16/Clw7Ietdp2yYXZJ.png" alt="image-20210916093924804"></p>
</li>
<li><p>两张表只是在查询的时候，能够关联（sql）</p>
<ul>
<li>但在做其他操作时，多表查询就不够严谨</li>
<li>所以我们可以设置主表和从表</li>
</ul>
</li>
</ul>
</li>
<li><p>解决传统多表设计的缺点</p>
<ul>
<li>需要给从表相关的字段加<strong>约束</strong></li>
<li>该约束就被称为<font color='#d15252'>外键约束</font></li>
</ul>
</li>
</ul>
<h4 id="2-添加外键约束"><a href="#2-添加外键约束" class="headerlink" title="2.添加外键约束"></a>2.添加外键约束</h4><ul>
<li><p>给从表添加外键约束</p>
</li>
<li><p>创建表的时候添加外键约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CONSTRAINT</span> [emp_dept_fk两张表关系描述] <span class="keyword">FOREIGN</span> KEY(外键id) <span class="keyword">REFERENCES</span> 主表(主键id)</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 外键约束员工表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employee(</span><br><span class="line">	eid <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">	ename <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">	eage <span class="type">INT</span>,</span><br><span class="line">	depid <span class="type">INT</span>, </span><br><span class="line">	<span class="keyword">CONSTRAINT</span> emp_dept_fk <span class="keyword">FOREIGN</span> KEY(depid) <span class="keyword">REFERENCES</span> department(did)	 </span><br><span class="line">) </span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CONSTRAINT</span> emp_dept_fk <span class="keyword">FOREIGN</span> KEY(depid) <span class="keyword">REFERENCES</span> department(did)	 </span><br><span class="line">) </span><br></pre></td></tr></table></figure>

<ul>
<li><code>CONSTRAINT emp_dept_fk</code> ：两张表的关系描述</li>
<li><code>FOREIGN KEY(depid) </code> ：从表字段（外键id）</li>
<li><code>REFERENCES department(did)</code> ：主表字段</li>
</ul>
<p><img src="https://i.loli.net/2021/09/16/QI9gYspK4v1aHu5.png" alt="image-20210916100119556"></p>
</li>
<li><p>建表后的外键添加</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建表后的外键添加</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> employee <span class="keyword">ADD</span></span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (depid)</span><br><span class="line"> <span class="keyword">REFERENCES</span> department(did)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="3-删除外键约束"><a href="#3-删除外键约束" class="headerlink" title="3.删除外键约束"></a>3.删除外键约束</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除外键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> employee <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY emp_dept_fk</span><br></pre></td></tr></table></figure>

<h4 id="4-外键约束的注意事项"><a href="#4-外键约束的注意事项" class="headerlink" title="4.外键约束的注意事项"></a>4.外键约束的注意事项</h4><ul>
<li>从表的外键字段数据类型一定要和主表的主键字段<font color='#d15252'>数据类型</font>保持一致</li>
<li>添加数据，主表先添加，从表后添加</li>
<li>删除数据，应该先删从表中的数据</li>
</ul>
<h3 id="二、级联更新"><a href="#二、级联更新" class="headerlink" title="二、级联更新"></a>二、级联更新</h3><ul>
<li><p>实现删除主表数据的时候，把从表数据也删除掉</p>
</li>
<li><p>使用关键字 <strong><font color='#d15252'>on delete cascade</font></strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> <span class="comment">-- 外键约束+级联更新员工表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employee(</span><br><span class="line">	eid <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">	ename <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">	eage <span class="type">INT</span>,</span><br><span class="line">	depid <span class="type">INT</span>, </span><br><span class="line">	<span class="keyword">CONSTRAINT</span> emp_dept_fk <span class="keyword">FOREIGN</span> KEY(depid) <span class="keyword">REFERENCES</span> department(did)</span><br><span class="line">	<span class="comment">-- 级联更新</span></span><br><span class="line">	<span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li>注意，添加级联更新不需要有逗号分开</li>
</ul>
</li>
</ul>
<h3 id="三、多表的设计"><a href="#三、多表的设计" class="headerlink" title="三、多表的设计"></a>三、多表的设计</h3><ul>
<li>一个项目，以电商为例 <ul>
<li>用户 商品表 商品分类等，就需要用到多个表</li>
</ul>
</li>
<li>设计多个表之间的关系</li>
</ul>
<table>
<thead>
<tr>
<th>关系</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>一对一</td>
<td>比如身份证 person ：主从关系无所谓</td>
</tr>
<tr>
<td>一对多</td>
<td>比如一个部门多个人，：字段多（数据多）当从表，字段少的主表</td>
</tr>
<tr>
<td>多对多</td>
<td>比如学生选择课程：设计一个中间表作为主表，其他多表是从表</td>
</tr>
</tbody></table>
<h3 id="四、多表查询"><a href="#四、多表查询" class="headerlink" title="四、多表查询"></a>四、多表查询</h3><ul>
<li>多表查询的问题<ul>
<li>笛卡尔积</li>
</ul>
</li>
</ul>
<h4 id="1-内连接查询"><a href="#1-内连接查询" class="headerlink" title="1.内连接查询"></a>1.内连接查询</h4><ul>
<li><p>通过指定的条件取匹配指定的数据</p>
<ul>
<li><p>匹配上就显示，匹配不上就不再显示</p>
<ul>
<li>从表的外键 = 主表的主键</li>
</ul>
</li>
<li><p>隐式内连接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span>字句 后面直接写多个表名，使用<span class="keyword">where</span>指定的连接条件，具备该特点的方式就被称为隐式内连接查询</span><br></pre></td></tr></table></figure>

<ul>
<li>注意：where 条件进行无用数据的过滤</li>
<li>语法格式：select 字段 from 左表,右表 where 连接条件 </li>
</ul>
</li>
<li><p>显示内连接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 左表 [<span class="keyword">inner</span>] <span class="keyword">join</span> 右表 <span class="keyword">on</span> 过滤条件</span><br></pre></td></tr></table></figure>

<ul>
<li>[inner] ：可以省略</li>
<li></li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="2-外连接查询"><a href="#2-外连接查询" class="headerlink" title="2.外连接查询"></a>2.外连接查询</h4><ul>
<li><p>左外连接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">left</span> [<span class="keyword">outer</span>] <span class="keyword">join</span> <span class="keyword">on</span></span><br></pre></td></tr></table></figure>

<ul>
<li>以左表为基准，匹配右表中的数据<ul>
<li>如果匹配就显示</li>
<li>匹配不上，左表数据正常显示，右表显示NULL</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 左表 <span class="keyword">left</span> [<span class="keyword">outer</span>] <span class="keyword">join</span> 右表 <span class="keyword">on</span> 过滤的条件</span><br></pre></td></tr></table></figure>

</li>
<li><p>右外连接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">right</span> [<span class="keyword">outer</span>] <span class="keyword">join</span> <span class="keyword">on</span></span><br></pre></td></tr></table></figure>

<ul>
<li>以右表为基准，匹配左表中的数据<ul>
<li>匹配九显示</li>
<li>匹配不上，右表数据正常显示，左边为NULL</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 左表 <span class="keyword">right</span> [<span class="keyword">outer</span>] <span class="keyword">join</span> 右表 <span class="keyword">on</span> 过滤的条件</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="3-内外连接总结"><a href="#3-内外连接总结" class="headerlink" title="3.内外连接总结"></a>3.内外连接总结<img src="https://i.loli.net/2021/09/17/TYUoAE7nt6vXpmW.png" alt="image-20210917193620134"></h4><ul>
<li>内连接：只获取两张表的交集部分数据</li>
<li>左外连接：以左表为基准，查询左表的所有数据和右表的交集数据</li>
<li>右外连接：以右表为基准，查询右表的所有数据和左表的交集数据</li>
</ul>
<h3 id="五、子查询"><a href="#五、子查询" class="headerlink" title="五、子查询"></a>五、子查询</h3><h4 id="1-子查询的概念"><a href="#1-子查询的概念" class="headerlink" title="1.子查询的概念"></a>1.子查询的概念</h4><ul>
<li>一条select查询语句的结果，作为另外一条select语句的一部分</li>
</ul>
<h4 id="2-子查询的特点"><a href="#2-子查询的特点" class="headerlink" title="2.子查询的特点"></a>2.子查询的特点</h4><ul>
<li>子查询必须在小括号中</li>
<li>子查询一般作为父查询的条件去使用</li>
</ul>
<h4 id="3-子查询常见的分类"><a href="#3-子查询常见的分类" class="headerlink" title="3.子查询常见的分类"></a>3.子查询常见的分类</h4><h5 id="Ⅰ-where型子查询"><a href="#Ⅰ-where型子查询" class="headerlink" title="Ⅰ. where型子查询"></a>Ⅰ. where型子查询</h5><ul>
<li>将子查询的结果，作为父查询的比较条件</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名称 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 字段 <span class="operator">=</span> (子查询)</span><br></pre></td></tr></table></figure>



<p><img src="https://i.loli.net/2021/09/17/E6Skaj3q1BFPJXm.png" alt="image-20210917195728062"></p>
<p><img src="https://i.loli.net/2021/09/17/CnGiHLuVSkOozmN.png" alt="image-20210917195803440"></p>
<p><img src="https://i.loli.net/2021/09/17/pB9UOezxRDuE4LI.png" alt="image-20210917195818203"></p>
<h5 id="Ⅱ-from型子查询"><a href="#Ⅱ-from型子查询" class="headerlink" title="Ⅱ. from型子查询"></a>Ⅱ. from型子查询</h5><ul>
<li>将子查询的结果，作为一张表，提供给父层查询使用</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名称 <span class="keyword">from</span> 表名(子查询) 别名 <span class="keyword">where</span> 条件</span><br></pre></td></tr></table></figure>

<ul>
<li><font color='#d15252'>必须起别名</font></li>
</ul>
<p><img src="https://i.loli.net/2021/09/17/5lYOxTiXs92rcIv.png" alt="image-20210917200718488"></p>
<h5 id="Ⅲ-exists型子查询"><a href="#Ⅲ-exists型子查询" class="headerlink" title="Ⅲ. exists型子查询"></a>Ⅲ. exists型子查询</h5><ul>
<li>子查询的结果是单列多行的，<font color='#d15252'>类似于一个数组</font>，给父层使用<ul>
<li>父层查询采用in函数，包含子查询结果</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名称 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件 <span class="keyword">in</span> (子查询)</span><br></pre></td></tr></table></figure>



<h3 id="六、三范式和反三范式"><a href="#六、三范式和反三范式" class="headerlink" title="六、三范式和反三范式"></a>六、三范式和反三范式</h3><h4 id="1-三范式"><a href="#1-三范式" class="headerlink" title="1.三范式"></a>1.三范式</h4><ul>
<li><p>第一规范 1NF</p>
<ul>
<li><font color='#d15252'>原子性</font>，做到列不可再拆分</li>
<li>第一范式也是最基本的范式，数据库中表字段都是单一属性，不可拆分</li>
</ul>
</li>
<li><p>第二范式 2NF</p>
<ul>
<li>在第一范式的基础上更进一步，目标是确保表中的每列和主键相关</li>
<li>一张表只能够描述一件事情</li>
</ul>
</li>
<li><p>第三范式 3NF</p>
<ul>
<li>消除传递依赖<ul>
<li>表的信息如果可以被推导出来，就不应该再单独的去设计一个字段来存放</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="2-反三范式"><a href="#2-反三范式" class="headerlink" title="2.反三范式"></a>2.反三范式</h4><ul>
<li>反三范式指<ul>
<li>通过增加冗余和重复的数据来提高数据的读性能</li>
<li>浪费存储空间，节省了查询时间（以空间换时间）</li>
</ul>
</li>
<li>冗余字段<ul>
<li>设计数据库的时候，某一个字段属于一张表，当他同时出现在另一个表或多个表中，并且完全等同于原来的所属表一样，那么这个字段就被称为冗余字段</li>
</ul>
</li>
</ul>
<h3 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h3><ul>
<li>当创建一个关系型数据库设计是，我们有两种选择<ul>
<li>尽量遵循范式理论的规则，尽可能的减少冗余字段，让数据库设计看起来精致优雅，让人赏心悦目</li>
<li>合理的加入冗余字段作为润滑剂，减少join（连接查询） ，让数据库的执行效率更高</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Mysql</tag>
        <tag>多表联查</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程</title>
    <url>/2021/08/25/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<p><strong>清楚三个概念</strong></p>
<ul>
<li>进程</li>
<li>线程</li>
<li>在同一个时间点，一个cpu只能支持一个线程</li>
</ul>
<h3 id="一、进程"><a href="#一、进程" class="headerlink" title="一、进程"></a>一、进程</h3><h4 id="1-什么是进程"><a href="#1-什么是进程" class="headerlink" title="1.什么是进程"></a>1.什么是进程</h4><ul>
<li>程，只是一个静态的概念（内存）</li>
<li>程，就是一个app，exe（应用角度）</li>
<li>进程只是一个静态概念，对于java来说就是机器上的一个.class文件，机器上的.exe文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1:程序代码加载到代码区</span><br><span class="line">2:没有立刻执行，为进程开始做准本</span><br><span class="line">3:当jvm调用main方法时，进程开始执行</span><br><span class="line">4:真正执行的并不是进程，而是main方法</span><br></pre></td></tr></table></figure>



<h3 id="二、线程"><a href="#二、线程" class="headerlink" title="二、线程"></a>二、线程</h3><h4 id="1-什么是线程"><a href="#1-什么是线程" class="headerlink" title="1.什么是线程"></a>1.什么是线程</h4><ul>
<li><p>一个进程可以有很多个分支，每一个分支就被称为线程</p>
<ul>
<li>Java程序，默认就有一个线程，就是main方法，也被称为main线程</li>
</ul>
</li>
<li><p><strong>在同一个时间点上，一个CPU只能支持一个线程在执行</strong></p>
<ul>
<li>双CPU或双核，是确确实实的多线程</li>
</ul>
</li>
<li><p>Java如何实现多线程(类)</p>
<ul>
<li><strong><font color='#d15252'>Thread类</font></strong></li>
<li>Runnable接口</li>
</ul>
</li>
</ul>
<h3 id="三、Thread"><a href="#三、Thread" class="headerlink" title="三、Thread"></a>三、<font color='#d15252'>Thread</font></h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h4><ul>
<li>包：java.lang.Thread<ul>
<li>不需要导包</li>
</ul>
</li>
<li>实现Runnable接口</li>
<li>修饰符：public </li>
<li>概述：管理Java中的线程</li>
</ul>
<h4 id="2-实现线程的步骤"><a href="#2-实现线程的步骤" class="headerlink" title="2.实现线程的步骤"></a>2.实现线程的步骤</h4><h5 id="Ⅰ-继承"><a href="#Ⅰ-继承" class="headerlink" title="Ⅰ.继承"></a>Ⅰ.继承</h5><ul>
<li>第一步：将一个类声明为Thread的子类</li>
<li>第二步：这个子类应该<font color='#d15252'>重写</font>Thread类的<font color='#d15252'>run方法</font></li>
<li>第三步：创建子类实例，调用star方法启动线程</li>
</ul>
<h5 id="Ⅱ-实现接口"><a href="#Ⅱ-实现接口" class="headerlink" title="Ⅱ.实现接口"></a>Ⅱ.实现接口</h5><ul>
<li>第一步：声明一个实现Runnable接口的类</li>
<li>第二步：实现run方法</li>
<li>第三步：创建实例</li>
</ul>
<h4 id="3-构造方法"><a href="#3-构造方法" class="headerlink" title="3.构造方法"></a>3.构造方法</h4><p><img src="https://i.loli.net/2021/08/12/D2KWuoqdQsXFCpH.png" alt="image-20210812095659082"></p>
<h5 id="①-Thread-String-name"><a href="#①-Thread-String-name" class="headerlink" title="① Thread(String name)"></a>① Thread(String name)</h5><ul>
<li>创建线程实例时，给线程名称赋值</li>
</ul>
<p><img src="https://i.loli.net/2021/08/12/7AS92gG3pNuYynq.png" alt="image-20210812172035560"></p>
<h4 id="4-成员方法"><a href="#4-成员方法" class="headerlink" title="4.成员方法"></a>4.成员方法</h4><h5 id="Ⅰ-run"><a href="#Ⅰ-run" class="headerlink" title="Ⅰ. run()"></a>Ⅰ.<font color='#d15252'> run()</font></h5><ul>
<li><p>核心</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>线程相关的代码写在该方法中，一般需要重写</li>
</ul>
</li>
</ul>
<h5 id="Ⅱ-start"><a href="#Ⅱ-start" class="headerlink" title="Ⅱ. start()"></a>Ⅱ. start()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>启动线程</li>
</ul>
<h5 id="Ⅲ-sleep"><a href="#Ⅲ-sleep" class="headerlink" title="Ⅲ. sleep()"></a>Ⅲ. sleep()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">long</span> m)</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>让线程休眠x毫秒</li>
</ul>
<h5 id="Ⅳ-join"><a href="#Ⅳ-join" class="headerlink" title="Ⅳ. join()"></a>Ⅳ. join()</h5><ul>
<li><pre><code class="java">优先执行调用jion方法的线程
</code></pre>
</li>
</ul>
<h5 id="Ⅴ-其他方法"><a href="#Ⅴ-其他方法" class="headerlink" title="Ⅴ.其他方法"></a>Ⅴ.其他方法</h5><ul>
<li>getName（）获取名</li>
<li>currentThread（）返回正在执行的对象</li>
</ul>
<h4 id="5-Thread实现多线程细节问题-名字"><a href="#5-Thread实现多线程细节问题-名字" class="headerlink" title="5.Thread实现多线程细节问题(名字)"></a>5.Thread实现多线程<font color='#d15252'>细节问题</font>(名字)</h4><ul>
<li><p>同一个Thread实例对象，不能重复的调用start()方法</p>
<ul>
<li>重复开启线程，栈帧名一样，Jvm报异常</li>
</ul>
<p><img src="https://i.loli.net/2021/08/12/asy7Dlo3ICtPqEF.png" alt=" "></p>
</li>
<li><p><font color='#d15252'>获取</font>当前线程<font color='#d15252'>名称</font></p>
<ul>
<li><p>getName()方法</p>
<p><img src="https://i.loli.net/2021/08/12/3cdECOtSqeuy1vb.png" alt="image-20210812111038274"></p>
</li>
<li><p>currentThread()方法</p>
<ul>
<li>返回对当前正在执行的对象的引用</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/08/12/lQSzR98PrCTkAm1.png" alt="image-20210812110957410"></p>
</li>
</ul>
<ul>
<li><p>给线程<font color='#d15252'>起名字</font></p>
<ul>
<li><p>setName()方法</p>
<p><img src="https://i.loli.net/2021/08/12/C2i9ojrGXBcALJe.png" alt="image-20210812112815580"></p>
</li>
<li><p>带参构造</p>
<p><img src="https://i.loli.net/2021/08/12/hI6PnxSC3L1bior.png" alt="image-20210812113153552"></p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p><font color='#d15252'>匿名内部类</font>的方式实现Thread多线程</p>
<ul>
<li><p>自定义类</p>
<ul>
<li>当run方法中的线程业务复杂，或者需要多次使用该线程类时</li>
</ul>
</li>
<li><p>匿名内部类</p>
<ul>
<li>当run方法中的线程业务只需要使用一次时</li>
</ul>
<p><img src="https://i.loli.net/2021/08/12/2ZDSdaAEcXPyCOL.png" alt="image-20210812113425179"></p>
</li>
</ul>
</li>
</ul>
<h3 id="四、Runnable接口"><a href="#四、Runnable接口" class="headerlink" title="四、Runnable接口"></a>四、Runnable接口</h3><ul>
<li>实现多线程的第二种方法</li>
</ul>
<h4 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1.概述"></a>1.概述</h4><ul>
<li><p>接口不能直接使用，需要通过子类实现</p>
</li>
<li><p>必须重写run方法</p>
<ul>
<li>run方法 — &gt; 线程业务</li>
</ul>
</li>
<li><p>通过查API可知，Thread是Runnable接口的已知实现类</p>
<ul>
<li>Thread类的带参构造方法中，可以传递一个实现Runnable接口对象参数</li>
</ul>
<p><img src="https://i.loli.net/2021/08/12/wheKM691QbXLU3Y.png" alt="image-20210812135021782"></p>
</li>
<li><p>因为不支持多继承，所以如果我们定义的类要继承其他类的功能时，又需要具备多线程的功能</p>
<ul>
<li>这时就不能用继承了，可以用Runnable接口</li>
</ul>
</li>
<li><p>包：java.lang包下</p>
<ul>
<li>不用导包就能使用 </li>
</ul>
</li>
</ul>
<h4 id="2-构造方法"><a href="#2-构造方法" class="headerlink" title="2.构造方法"></a>2.构造方法</h4><ul>
<li>接口无构造方法</li>
</ul>
<h4 id="3-成员方法"><a href="#3-成员方法" class="headerlink" title="3.成员方法"></a>3.成员方法</h4><ul>
<li>run()方法 —-&gt; 实现类重写</li>
</ul>
<h4 id="4-使用"><a href="#4-使用" class="headerlink" title="4.使用"></a>4.使用</h4><ul>
<li><p>创建自定义类，实现接口Runnable</p>
</li>
<li><p>重写run()方法</p>
<p><img src="https://i.loli.net/2021/08/12/rRNX34PlcbgZK2F.png" alt="image-20210812135657924"></p>
</li>
<li><p>创建自定义类对象</p>
</li>
<li><p>调用Thread的构造方法（参数为Runnable）创建对象</p>
</li>
<li><p>start方法启动流</p>
<ul>
<li><img src="https://i.loli.net/2021/08/12/xejV7gKSTIidDah.png" alt="image-20210812135754014"></li>
</ul>
</li>
</ul>
<h4 id="5-Thread和Runnable的区别"><a href="#5-Thread和Runnable的区别" class="headerlink" title="5.Thread和Runnable的区别"></a>5.Thread和Runnable的区别</h4><ul>
<li>实现了数据的共享</li>
<li>避免了单继承的局限性</li>
</ul>
<h4 id="6-起名和获取名字"><a href="#6-起名和获取名字" class="headerlink" title="6.起名和获取名字"></a>6.起名和获取名字</h4><ul>
<li>和Thread基本一样<ul>
<li>SetName()设置名字</li>
</ul>
</li>
</ul>
<hr>
<h3 id="五、线程的特性"><a href="#五、线程的特性" class="headerlink" title="五、线程的特性"></a>五、线程的特性</h3><h4 id="1-线程的状态"><a href="#1-线程的状态" class="headerlink" title="1.线程的状态"></a>1.线程的<font color='#d15252'>状态</font></h4><h5 id="Ⅰ-新建-new"><a href="#Ⅰ-新建-new" class="headerlink" title="Ⅰ.新建(new)"></a>Ⅰ.新建(new)</h5><ul>
<li>创建对象时，线程处于new状态</li>
</ul>
<h5 id="Ⅱ-可运行-Runnable"><a href="#Ⅱ-可运行-Runnable" class="headerlink" title="Ⅱ.可运行(Runnable)"></a>Ⅱ.可运行(Runnable)</h5><ul>
<li>当调用start()方法时，进入Runnable状态<ul>
<li>（正在执行）</li>
</ul>
</li>
</ul>
<h5 id="Ⅲ-阻塞-Blocked"><a href="#Ⅲ-阻塞-Blocked" class="headerlink" title="Ⅲ.阻塞(Blocked)"></a>Ⅲ.阻塞(Blocked)</h5><ul>
<li><p>线程暂时停下就是 Blocaked状态</p>
<ul>
<li><p>可能造成线程堵塞状态</p>
<ul>
<li><p>IO流</p>
<ul>
<li>read()方法</li>
</ul>
</li>
<li><p>Scanner</p>
<p><img src="https://i.loli.net/2021/08/12/3zqxRUYo9Sj4Esd.png" alt="image-20210812154345259"></p>
</li>
</ul>
</li>
<li><p>提供造成阻塞状态的方法</p>
<ul>
<li>join()</li>
<li>wait()<ul>
<li>需要用try-catch处理异常</li>
<li>父类没有声明式抛出异常，子类就不能抛</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>notify()和notifyall()可以从阻塞状态返回正在执行Runnable状态</p>
</li>
</ul>
<h5 id="Ⅳ-等待-Waiting"><a href="#Ⅳ-等待-Waiting" class="headerlink" title="Ⅳ.等待(Waiting)"></a>Ⅳ.<font color='#d15252'>等待</font>(Waiting)</h5><ul>
<li><p>没有时间限制的等待</p>
</li>
<li><p>等另一个线程执行完后再执行</p>
</li>
</ul>
<h5 id="Ⅴ-休眠状态-Timed-Waiting"><a href="#Ⅴ-休眠状态-Timed-Waiting" class="headerlink" title="Ⅴ.休眠状态(Timed_Waiting)"></a>Ⅴ.<font color='#d15252'>休眠状态</font>(Timed_Waiting)</h5><ul>
<li>休眠状态<ul>
<li>sleep()</li>
</ul>
</li>
<li>达到指定时间线程再进行运行</li>
</ul>
<h5 id="Ⅵ-终止-Dead"><a href="#Ⅵ-终止-Dead" class="headerlink" title="Ⅵ.终止(Dead)"></a>Ⅵ.终止(Dead)</h5><ul>
<li>当线程运行完后自动结束<ul>
<li>Thread提供了stop()方法，但是已经<font color='#d15252'>弃用</font>了</li>
</ul>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>什么是多线程？<ul>
<li>程序的除了main方法外，还有很多个分支</li>
</ul>
</li>
<li>实现多线程的两种方式？<ul>
<li>Thread/Runable  </li>
<li>区别：数据共享</li>
</ul>
</li>
<li>生命周期<ul>
<li>等待 wait join    </li>
<li>休眠 sleep join()</li>
<li>通过API提供的方法让线程声明周期的某个阶段，达到可控状态</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义数据类型和学生管理系统</title>
    <url>/2021/08/25/%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h3 id="一、面向对象思想"><a href="#一、面向对象思想" class="headerlink" title="一、面向对象思想"></a>一、面向对象思想</h3><ul>
<li>暂且不提</li>
</ul>
<h3 id="二、数据类型"><a href="#二、数据类型" class="headerlink" title="二、数据类型"></a>二、数据类型</h3><ul>
<li>Java提供的数据类型有很多种，但是Java只提供了最基础的</li>
<li>当需要使用自定义的数据类型时，Java提供了方法自行创建</li>
</ul>
<h4 id="1-自定义数据类型-定义类"><a href="#1-自定义数据类型-定义类" class="headerlink" title="1.自定义数据类型(定义类)"></a>1.<font color='#d15252'>自定义数据类型(定义类)</font></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名 </span>&#123; &#125;	</span><br><span class="line"></span><br><span class="line"><span class="comment">//class只能是并列关系</span></span><br></pre></td></tr></table></figure>

<ul>
<li>通常叫做<font color='#d15252'>定义一个类</font><ul>
<li>实际上可以理解为自定义了一个数据类型</li>
</ul>
</li>
</ul>
<h4 id="2-如何存储内部数据"><a href="#2-如何存储内部数据" class="headerlink" title="2.如何存储内部数据"></a>2.如何存储内部数据</h4><ul>
<li>用定义变量的方式</li>
</ul>
<h4 id="3-自定义数据类型的使用"><a href="#3-自定义数据类型的使用" class="headerlink" title="3.自定义数据类型的使用"></a>3.自定义数据类型的使用</h4><ul>
<li><p>使用思路</p>
<ul>
<li>通过内存图发现，我们需要用到自定义数据类型的内部数据</li>
<li>而内部数据要存储数据就必须开辟内存空间</li>
<li>遇到复杂类型的数据类型，需要在堆区中开辟内存空间</li>
<li>将CPU执行权有栈区交到堆区<font color='#d15252'>new</font></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="comment">//定义变量s  存储 堆区定义的Student()里的值</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="4-自定义数据类型的思路"><a href="#4-自定义数据类型的思路" class="headerlink" title="4.自定义数据类型的思路"></a>4.自定义数据类型的思路</h4><ul>
<li>第一步：创建项目，测试环境</li>
<li>Java没有自带学生数据，需要我们<font color='cornflowerblue'>自定义一个数据类型</font></li>
<li>自定义数据类型的格式<ul>
<li>位置：class之间并列关系</li>
<li>内容：用变量存储数据</li>
<li>格式：<code>class 数据类型 &#123;&#125;</code></li>
</ul>
</li>
<li>在定义的数据类型中存储内部数据<ul>
<li>和之间定义变量、数组、集合等一样</li>
</ul>
</li>
<li>创建自定义的数据类型的变量，存储new Student()的地址值。<ul>
<li>因为Student内有许多变量，<font color='cornflowerblue'>遇到复杂数据类型，在堆区中开辟内存空间</font>所以 <code>Student s = new Student();</code></li>
</ul>
</li>
<li>调用对应数据<ul>
<li>赋值<ul>
<li>变量名.内部变量名 = 数值；</li>
</ul>
</li>
<li>取值<ul>
<li>输出取值<ul>
<li>System.out.println(s.id);</li>
</ul>
</li>
<li>赋值取值<ul>
<li>String a =  System.out.println(t.name);</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="5-内存图"><a href="#5-内存图" class="headerlink" title="5.内存图"></a>5.内存图</h4><p><img src="https://i.loli.net/2021/07/26/lw4KUF27ArbqiDV.png" alt="image-20210726103528357"></p>
<h4 id="6-注意事项"><a href="#6-注意事项" class="headerlink" title="6.注意事项"></a>6.注意事项</h4><ul>
<li>从作用的角度判断Java中类的分类<ul>
<li><font color='orange'>测试类</font>：包含main方法的类（程序入口）<ul>
<li>也是一种自定义的数据类型，不过不用来做存储，而是做Java程序的测试</li>
</ul>
</li>
<li>基础类</li>
</ul>
</li>
<li>内部变量：属性</li>
<li>自定义数据类型：先将小的数据进行封装</li>
</ul>
<h4 id="7-作业"><a href="#7-作业" class="headerlink" title="7.作业"></a>7.作业</h4><h5 id="Ⅰ-需求"><a href="#Ⅰ-需求" class="headerlink" title="Ⅰ.需求:"></a>Ⅰ.需求:</h5><ul>
<li>定义一个学生类<ul>
<li>年龄</li>
<li>姓名</li>
<li>学号</li>
</ul>
</li>
<li>定义一个数组<ul>
<li>在数组中存三个学生</li>
<li>将三个学生信息输出到控制台</li>
</ul>
</li>
</ul>
<h5 id="Ⅱ-思路："><a href="#Ⅱ-思路：" class="headerlink" title="Ⅱ.思路："></a>Ⅱ.思路：</h5><ul>
<li><p>创建项目、测试环境</p>
<ul>
<li><img src="https://i.loli.net/2021/07/26/ns6IQq32bGaXVEu.png" alt="image-20210726115908543"></li>
</ul>
</li>
<li><p>需求分析</p>
<ul>
<li>Java没有自带的学生类，需要自定义数据类型</li>
</ul>
</li>
<li><p>自定义数据类型的格式</p>
<ul>
<li>位置：并列</li>
<li>格式：class Student{}</li>
<li><img src="https://i.loli.net/2021/07/26/MqUEif5PvB1LwTY.png" alt="image-20210726115922736"></li>
</ul>
</li>
<li><p>在定义的数据类型中存储内部数据</p>
<ul>
<li>将属性复制进去，并定义相应的变量</li>
</ul>
</li>
<li><p>创建三个学生类型的变量，存储new Student() 的地址值，分别保存到变量s1，s2，s3</p>
<ul>
<li><img src="https://i.loli.net/2021/07/26/dcjbCovmaFA4M3I.png" alt="image-20210726115942137"></li>
</ul>
</li>
<li><p>定义一个数组，存储三个学生变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义数组</span></span><br><span class="line">		Student[] arr = <span class="keyword">new</span> Student[<span class="number">3</span>];</span><br><span class="line">		arr[<span class="number">0</span>]=s1;</span><br><span class="line">		arr[<span class="number">1</span>]=s2;</span><br><span class="line">		arr[<span class="number">2</span>]=s3;</span><br></pre></td></tr></table></figure></li>
<li><p>初始化学生变量的具体内部数据</p>
<ul>
<li><img src="https://i.loli.net/2021/07/26/MgtkvVeWhuS2ab4.png" alt="image-20210726120053345"></li>
</ul>
</li>
</ul>
<h5 id="Ⅲ-内存图："><a href="#Ⅲ-内存图：" class="headerlink" title="Ⅲ.内存图："></a>Ⅲ.内存图：</h5><p><img src="https://i.loli.net/2021/07/26/B4dFKjpRXLwnErS.png" alt="image-20210726115815170"></p>
<h5 id="Ⅳ-所有代码："><a href="#Ⅳ-所有代码：" class="headerlink" title="Ⅳ.所有代码："></a>Ⅳ.所有代码：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建项目、测试环境</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo4</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//创建存储变量</span></span><br><span class="line">		Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">		Student s2 = <span class="keyword">new</span> Student();</span><br><span class="line">		Student s3 = <span class="keyword">new</span> Student();</span><br><span class="line">		<span class="comment">//定义数组</span></span><br><span class="line">		Student[] arr = <span class="keyword">new</span> Student[<span class="number">3</span>];</span><br><span class="line">		<span class="comment">//初始化学生</span></span><br><span class="line">		s1.id = <span class="number">1</span>;</span><br><span class="line">		s1.name = <span class="string">&quot;李玉楷&quot;</span>;</span><br><span class="line">		s1.age = <span class="number">20</span>;</span><br><span class="line">		s2.id = <span class="number">2</span>;</span><br><span class="line">		s2.name = <span class="string">&quot;王俊&quot;</span>;</span><br><span class="line">		s2.age = <span class="number">2</span>;</span><br><span class="line">		s3.id = <span class="number">3</span>;</span><br><span class="line">		s3.name = <span class="string">&quot;谭宇&quot;</span>;</span><br><span class="line">		s3.age = <span class="number">200</span>;</span><br><span class="line">		arr[<span class="number">0</span>]=s1;</span><br><span class="line">		arr[<span class="number">1</span>]=s2;</span><br><span class="line">		arr[<span class="number">2</span>]=s3;</span><br><span class="line">		<span class="comment">//for循环遍历数组输出</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//输出学生信息</span></span><br><span class="line">			System.out.println(<span class="string">&quot;ID:&quot;</span>+arr[i].id+<span class="string">&quot;\t姓名：&quot;</span>+arr[i].name+<span class="string">&quot;\t年龄&quot;</span>+arr[i].age);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//自定义学生数据类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class"></span>&#123;<span class="comment">/*</span></span><br><span class="line"><span class="comment">- 年龄</span></span><br><span class="line"><span class="comment">- 姓名</span></span><br><span class="line"><span class="comment">- 学号</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">	String name;</span><br><span class="line">	<span class="keyword">int</span> id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="三、综合案例-学生管理系统"><a href="#三、综合案例-学生管理系统" class="headerlink" title="三、综合案例-学生管理系统"></a>三、综合案例-学生管理系统</h3><h4 id="1-需求："><a href="#1-需求：" class="headerlink" title="1.需求："></a>1.需求：</h4><ul>
<li>用集合或数组，定义方法，自定义数据类型的方式，完成学生管理系统</li>
</ul>
<h4 id="2-思路："><a href="#2-思路：" class="headerlink" title="2.思路："></a>2.思路：</h4><h5 id="第一步：创建项目，测试环境"><a href="#第一步：创建项目，测试环境" class="headerlink" title="第一步：创建项目，测试环境"></a>第一步：创建项目，测试环境</h5><p><img src="https://i.loli.net/2021/07/26/J8CrIsnU3MyPztV.png" alt="image-20210726120705033"></p>
<h5 id="第二步：需求分析"><a href="#第二步：需求分析" class="headerlink" title="第二步：需求分析"></a>第二步：需求分析</h5><ul>
<li><p>首先，实现显示菜单的方法</p>
</li>
<li><p>方法定义：</p>
<ul>
<li>位置：并列</li>
<li>格式：修饰符 返回值类型 方法名（参数列表）{}</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/07/26/ZS5kgzCvJshxTW8.png" alt="image-20210726123428476"></p>
<ul>
<li><p>实现选择功能的方法</p>
<ul>
<li><p>Scanner键盘录入三个步骤</p>
<ul>
<li>导包</li>
<li>加载Scanner进内存</li>
<li>保存键盘录入的数据</li>
</ul>
<p><img src="https://i.loli.net/2021/07/26/7BwJIEDLaXU8YlA.png" alt="image-20210726123658745"></p>
</li>
<li><p>在死循环前，调用init()初始化数据方法，获取init初始化的数据,并命名为stu</p>
<p><img src="https://i.loli.net/2021/07/26/cySsguVFIEa4Ur3.png" alt="image-20210726131619353"></p>
</li>
<li><p>在if判断前，调用menu()菜单方法，让每次选择前先显示一下菜单</p>
<p><img src="https://i.loli.net/2021/07/26/FlLhsdwkrIgHMQc.png" alt="image-20210726131635716"></p>
</li>
<li><p>if条件判断录入的值，进行相应的操作</p>
<p><img src="https://i.loli.net/2021/07/26/vsqYjcwyCLlbhn1.png" alt="image-20210726123830612"></p>
</li>
<li><p>设置while(true)死循环，使菜单可以重复选择</p>
<p><code>while(true)&#123; &#125;</code></p>
<p>当键盘录入数据a==5时，退出系统，添加break语句，跳出循环</p>
<p><code>break;</code></p>
</li>
<li></li>
</ul>
</li>
<li><p>实现加载数据的方法</p>
<ul>
<li><p>定义一个加载数据的方法</p>
<ul>
<li>由需求可知要用自定义数据类型的方式完成题目，所以，要加载数据，首先需要创建一个名为Student的自定义数据类型</li>
</ul>
</li>
<li><p>创建三个学生对象</p>
<ul>
<li><code>Student s1 = new Student();</code></li>
</ul>
</li>
<li><p>创建集合</p>
<p><img src="https://i.loli.net/2021/07/26/azQEj27RwLoyH3N.png" alt="image-20210726130119065"></p>
</li>
<li><p>初始化学生数据</p>
<p><img src="https://i.loli.net/2021/07/26/Jt6eLrVfOmvCMKb.png" alt="image-20210726130400721"></p>
</li>
<li><p>将学生存入集合</p>
<p><img src="https://i.loli.net/2021/07/26/SM7Yx2NoWdeAKya.png" alt="image-20210726130612856"></p>
</li>
<li><p>return带回创建好的集合数据</p>
<p><code>return stu;</code></p>
<p>将方法定义上的参数类型，修改为ArrayList</p>
</li>
</ul>
</li>
</ul>
<h5 id="第三步：创建名为Student的自定义数据类型"><a href="#第三步：创建名为Student的自定义数据类型" class="headerlink" title="第三步：创建名为Student的自定义数据类型"></a>第三步：创建名为Student的自定义数据类型</h5><ul>
<li><p>创建：</p>
<ul>
<li>位置：并列</li>
<li>格式：class 名 { }</li>
</ul>
</li>
<li><p>学生属性有 学号、性别 、姓名、年龄</p>
<ul>
<li><p>将这些属性存入自定义数据类型的内部</p>
<p><img src="https://i.loli.net/2021/07/26/OWSqzFtNdQ2m1Yu.png" alt="image-20210726124455231"></p>
</li>
</ul>
<h5 id="第四步：实现具体的显示功能"><a href="#第四步：实现具体的显示功能" class="headerlink" title="第四步：实现具体的显示功能"></a>第四步：实现具体的显示功能</h5></li>
<li><p>定义具体显示功能的方法</p>
<ul>
<li><p>位置：并列</p>
</li>
<li><p>格式：修饰符 返回值类型 方法名（参数列表）{ }</p>
<p><img src="https://i.loli.net/2021/07/26/FC7VOWXM1Da6kNs.png" alt="image-20210726130923154"></p>
</li>
</ul>
</li>
<li><p>分析：要显示数据，首先需要接收到数据</p>
<ul>
<li><p>所以在choose选择方法中，判断当键盘录入数据a==1时，实现选择功能，调用选择方法，同时传递学生信息的集合参数</p>
<p><img src="https://i.loli.net/2021/07/26/cCjdKuEaibROkwy.png" alt="image-20210726131814216"></p>
</li>
<li><p>show()显示方法定义中，添加 ArrayList 数据类型，接收choose()传递的参数</p>
<p><img src="https://i.loli.net/2021/07/26/DxR1W6SutswQ2CV.png" alt="image-20210726132509229"></p>
</li>
<li><p>定义for循环输出数据</p>
<p><img src="https://i.loli.net/2021/07/26/y9c7AYBqwjP5oax.png" alt="image-20210726133552249"></p>
<blockquote>
<p>stu.get(i).id    ：  stu.get(i)取出stu集合中第i个索引的数据</p>
<p>“.”    ： 调用</p>
</blockquote>
</li>
</ul>
<h5 id="第五步：实现具体的修改功能"><a href="#第五步：实现具体的修改功能" class="headerlink" title="第五步：实现具体的修改功能"></a>第五步：实现具体的修改功能</h5></li>
<li><p>创建修改功能的方法</p>
<ul>
<li><p>位置：并列</p>
</li>
<li><p>格式：修饰符 返回值类型 方法名(参数列表) {  }</p>
<p><img src="https://i.loli.net/2021/07/26/ToYWk1iFXUnh5rq.png" alt="image-20210726135243939"></p>
</li>
<li><p>定义参数，接收数据</p>
</li>
</ul>
</li>
<li><p>键盘录入数据，输入要修改的id</p>
</li>
<li><p>if条件判断是否有匹配的Id</p>
<p><img src="https://i.loli.net/2021/07/26/Wl9iKTPS82tsw6Z.png" alt="image-20210726135555188"></p>
<ul>
<li><p>当有匹配的值时，提示输入修改后的数据，用集合中的学生对象调用对应数据，直接修改</p>
<p><img src="https://i.loli.net/2021/07/26/J4rDF6O9T8hvygK.png" alt="image-20210726140056112"></p>
</li>
</ul>
</li>
</ul>
<h5 id="第六步：实现增加功能"><a href="#第六步：实现增加功能" class="headerlink" title="第六步：实现增加功能"></a>第六步：实现增加功能</h5><ul>
<li><p>定义增加功能的方法</p>
<ul>
<li>位置：并列</li>
<li>格式：修饰符 返回值类型 方法名（参数列表） {   }</li>
</ul>
<p><img src="https://i.loli.net/2021/07/26/AGJI23yYp59ofmd.png" alt="image-20210726140259481"></p>
</li>
<li><p>键盘录入要添加的数据</p>
</li>
<li><p>创建一个新的学生对象，键盘录入新的学生对象的数据，将对象添加到集合</p>
<p><img src="https://i.loli.net/2021/07/26/4GZeMKYPXcwUQtN.png" alt="image-20210726141051550"></p>
</li>
</ul>
<h5 id="第七步：实现删除功能"><a href="#第七步：实现删除功能" class="headerlink" title="第七步：实现删除功能"></a>第七步：实现删除功能</h5><ul>
<li><p>定义实现删除功能的方法</p>
<ul>
<li>位置：并列</li>
<li>格式：修饰符 返回值类型 方法名（参数列表） {  }</li>
</ul>
<p><img src="https://i.loli.net/2021/07/26/5MjKvp2xhF6wPfr.png" alt="image-20210726141310390"></p>
</li>
<li><p>键盘录入要删除的学生ID</p>
</li>
<li><p>删除对应id上一位的索引数据</p>
<p><img src="https://i.loli.net/2021/08/25/FY9JXHZSIWp3zlU.png" alt="image-20210726141653906"></p>
</li>
</ul>
<h5 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导包</span></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">//创建项目、测试环境</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo5</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">	</span>&#123;	<span class="comment">//实现学生管理系统</span></span><br><span class="line">		choose();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//实现显示菜单的方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">menu</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;==================================&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;||\t1.显示学生信息  \t||&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;||\t2.修改学生信息  \t||&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;||\t3.增加学生信息  \t||&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;||\t4.删除学生信息  \t||&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;||\t 5.退出 系统    \t||&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;==================================&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//实现选择功能的方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">choose</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="comment">//键盘录入	</span></span><br><span class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="comment">//初始化数据</span></span><br><span class="line">		ArrayList stu =init();</span><br><span class="line">		<span class="comment">//死循环实现菜单重复选择</span></span><br><span class="line">		<span class="keyword">while</span> (<span class="keyword">true</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//每次选择前显示菜单</span></span><br><span class="line">		menu();</span><br><span class="line">		<span class="comment">//保存键盘录入数据</span></span><br><span class="line">		<span class="keyword">int</span> a = sc.nextInt();</span><br><span class="line">		<span class="keyword">if</span> (a==<span class="number">1</span>)</span><br><span class="line">		&#123;	<span class="comment">//实现菜单的显示功能</span></span><br><span class="line">			<span class="comment">//调用方法，传递参数</span></span><br><span class="line">			show(stu);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (a==<span class="number">2</span>)</span><br><span class="line">		&#123;	<span class="comment">//实现数据的修改功能</span></span><br><span class="line">			<span class="comment">//调用修改方法，传递数据</span></span><br><span class="line">			update(stu);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (a==<span class="number">3</span>)</span><br><span class="line">		&#123;	<span class="comment">//实现增加的功能</span></span><br><span class="line">			<span class="comment">//调用增加方法,传递集合参数</span></span><br><span class="line">			add(stu);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (a==<span class="number">4</span>)</span><br><span class="line">		&#123;	<span class="comment">//实现删除的功能</span></span><br><span class="line">			<span class="comment">//调用删除方法,传递集合参数</span></span><br><span class="line">			del(stu);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (a==<span class="number">5</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;===退出成功===&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//实现加载数据的方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="comment">//创建三个学生对象</span></span><br><span class="line">		Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">		Student s2 = <span class="keyword">new</span> Student();</span><br><span class="line">		Student s3 = <span class="keyword">new</span> Student();</span><br><span class="line">		<span class="comment">//创建一个集合，存储这些学生</span></span><br><span class="line">		ArrayList&lt;Student&gt; stu = <span class="keyword">new</span> ArrayList();</span><br><span class="line">		s1.id = <span class="number">1</span>;</span><br><span class="line">		s1.name = <span class="string">&quot;宋世杰&quot;</span>;</span><br><span class="line">		s1.sex = <span class="string">&quot;男&quot;</span>;</span><br><span class="line">		s1.age = <span class="number">18</span>;</span><br><span class="line">		s2.id = <span class="number">2</span>;</span><br><span class="line">		s2.name = <span class="string">&quot;李玉楷&quot;</span>;</span><br><span class="line">		s2.sex = <span class="string">&quot;女&quot;</span>;</span><br><span class="line">		s2.age = <span class="number">17</span>;</span><br><span class="line">		s3.id = <span class="number">3</span>;</span><br><span class="line">		s3.name = <span class="string">&quot;王俊&quot;</span>;</span><br><span class="line">		s3.sex = <span class="string">&quot;男&quot;</span>;</span><br><span class="line">		s3.age = <span class="number">28</span>;</span><br><span class="line">		stu.add(s1);</span><br><span class="line">		stu.add(s2);</span><br><span class="line">		stu.add(s3);</span><br><span class="line">		<span class="comment">//由return带回创建的集合数据</span></span><br><span class="line">		<span class="keyword">return</span> stu;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//定义实现显示的方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(ArrayList&lt;Student&gt; stu)</span></span>&#123;</span><br><span class="line">		<span class="comment">//要显示数据，首先需要获取数据，定义参数ArrayList 接收集合参数</span></span><br><span class="line">		<span class="comment">//定义for循环输出数据</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;stu.size();i++)</span><br><span class="line">		&#123;			<span class="comment">//.size()集合长度</span></span><br><span class="line">			System.out.println(<span class="string">&quot;ID:&quot;</span>+stu.get(i).id+<span class="string">&quot;\t姓名:&quot;</span>+stu.get(i).name+<span class="string">&quot;\t性别:&quot;</span>+stu.get(i).sex+<span class="string">&quot;\t年龄:&quot;</span>+stu.get(i).age);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;===显示完成，返回主菜单===&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//定义实现修改的方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ArrayList&lt;Student&gt; stu)</span></span>&#123;</span><br><span class="line">		<span class="comment">//同样如果要修改，需要先拿到数据，所以定义参数ArrayList&lt;Student&gt;接收数据</span></span><br><span class="line">		<span class="comment">//键盘录入数据，输入要修改的Id</span></span><br><span class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		System.out.println(<span class="string">&quot;请输入要修改的学生Id:&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> oid = sc.nextInt();</span><br><span class="line">		<span class="comment">//for+if判断是否有匹配的Id</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;stu.size();i++)</span><br><span class="line">		&#123;	<span class="comment">//循环查找</span></span><br><span class="line">			<span class="keyword">if</span> (stu.get(i).id==oid)</span><br><span class="line">			&#123;	<span class="comment">//如果数据匹配时，提示修改</span></span><br><span class="line">				System.out.println(<span class="string">&quot;请输入修改后的学生姓名:&quot;</span>) </span><br><span class="line">				stu.get(i).name = sc.next();</span><br><span class="line">				System.out.println(<span class="string">&quot;请输入修改后的学生性别:&quot;</span>);</span><br><span class="line">				stu.get(i).sex = sc.next();</span><br><span class="line">				System.out.println(<span class="string">&quot;请输入修改后的学生年龄:&quot;</span>);</span><br><span class="line">				stu.get(i).age = sc.nextInt();</span><br><span class="line">				<span class="comment">//修改成功</span></span><br><span class="line">				System.out.println(<span class="string">&quot;===修改成功，返回主菜单===&quot;</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//定义实现增加的方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(ArrayList&lt;Student&gt; stu)</span></span>&#123;</span><br><span class="line">		<span class="comment">//因为要添加数据到集合，所以首先要接收集合，往内添加</span></span><br><span class="line">		<span class="comment">//加载Scanner进内存，从键盘录入数据</span></span><br><span class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="comment">//添加一个学生对象到集合中</span></span><br><span class="line">		Student s = <span class="keyword">new</span> Student();</span><br><span class="line">		System.out.println(<span class="string">&quot;请输入要添加的学生id：&quot;</span>);</span><br><span class="line">		s.id=sc.nextInt();</span><br><span class="line">		System.out.println(<span class="string">&quot;请输入要添加的学生姓名：&quot;</span>);</span><br><span class="line">		s.name=sc.next();</span><br><span class="line">		System.out.println(<span class="string">&quot;请输入要添加的学生性别：&quot;</span>);</span><br><span class="line">		s.sex=sc.next();</span><br><span class="line">		System.out.println(<span class="string">&quot;请输入要添加的学生年龄：&quot;</span>);</span><br><span class="line">		s.age=sc.nextInt();</span><br><span class="line">		<span class="comment">//添加到集合</span></span><br><span class="line">		stu.add(s);</span><br><span class="line">		System.out.println(<span class="string">&quot;===添加成功，返回主菜单===&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//定义实现删除的方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(ArrayList&lt;Student&gt; stu)</span></span>&#123;</span><br><span class="line">		<span class="comment">//同理，如果要删除集合中的一个数据，首先要拿到集合，方法参数接收集合数据</span></span><br><span class="line">		<span class="comment">//键盘录入要删除的id</span></span><br><span class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		System.out.println(<span class="string">&quot;请输入要删除的学生id:&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> del = sc.nextInt();</span><br><span class="line">		<span class="comment">//删除对应的Id</span></span><br><span class="line">		stu.remove(del-<span class="number">1</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;===删除成功，返回主菜单===&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建student自定义数据类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="comment">//学号、姓名、性别、年龄!.</span></span><br><span class="line">	<span class="keyword">int</span> id ;</span><br><span class="line">	String name;</span><br><span class="line">	String sex;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><ul>
<li>方法运行完结束后弹栈，释放内存。</li>
<li>所有字符串类型的数据类型，系统默认值都是null，（包括地址值）</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>class</tag>
        <tag>学生管理系统</tag>
      </tags>
  </entry>
  <entry>
    <title>实现前端-Web-数据库</title>
    <url>/2021/08/25/%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%AB%AF-Web-%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h3 id="获取前端数据"><a href="#获取前端数据" class="headerlink" title="获取前端数据"></a>获取前端数据</h3><ul>
<li><p>创建一个JavaWeb程序，用作链接前端、链接数据库</p>
<p><img src="https://i.loli.net/2021/07/12/zVu7OEIBXJn6Mtd.png" alt="image-20210712161124635"></p>
<ul>
<li><p>继承HttpServlet类，调用doGet方法，起名</p>
<p><img src="https://i.loli.net/2021/07/12/1F4kqTlvxRB5Ynd.png" alt="image-20210712161304640"></p>
</li>
<li><p>从数据库获取数据（暂时用数组定义）</p>
</li>
</ul>
<p><img src="https://i.loli.net/2021/07/12/XZSKOrTsQtMIRBh.png" alt="image-20210712162838029"></p>
<p>并创建web程序和需要获取数据的前端网页的链接通道</p>
<p><img src="https://i.loli.net/2021/07/12/ewBrSXd9Ijv2sNF.png" alt="image-20210712162849088"></p>
<ul>
<li><p>req调用getRequestDispatcher()方法，返回前端页面</p>
<p><img src="https://i.loli.net/2021/07/12/EhKWv1iCNS42d9X.png"></p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>创建index.jsp文件，是前端访问后端的入口</p>
<ul>
<li><p><img src="https://i.loli.net/2021/07/12/nYDjNOe7TJlawCo.png" alt="image-20210712161631994"></p>
</li>
<li><p>跳转到web程序，获取数据，并返回前端页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/web&quot;</span>&gt;</span>显示数据<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<ul>
<li><p>创建Demo.jsp文件，获取数据，返回前端页面</p>
<ul>
<li><img src="https://i.loli.net/2021/07/12/8IeLMxifDCVcnP7.png" alt="image-20210712161750078"></li>
<li>通过request.getAttribute()通道，获取web程序发送的数据</li>
</ul>
<p><img src="https://i.loli.net/2021/07/12/gTBDefpUuxYHn8K.png" alt="image-20210712163113274"></p>
<p>由于自动保存是Object类型，强制转换为int[]类型，并保存到变量</p>
<p><img src="https://i.loli.net/2021/07/12/qOAWJZLxC5bKHh8.png" alt="image-20210712163232172"></p>
<ul>
<li>创建表格，for循环，输出前端页面</li>
</ul>
<p><img src="https://i.loli.net/2021/07/12/SW4TfJRLKYqOIPH.png" alt="image-20210712164329135"></p>
</li>
</ul>
<p><img src="https://i.loli.net/2021/07/12/fC7dFLh2HkmaPYI.png" alt="image-20210712221449519"></p>
<ul>
<li><p>前端页面使用Form表单获取并发送数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    表单--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;02.html&quot;</span>&gt;</span></span><br><span class="line">        用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pass&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>action：发送到xxx</p>
<p>submit：提交按钮</p>
<p>name ：保存数据名称用来接收    </p>
</blockquote>
</li>
<li><p>web程序中用req调用getParameter方法接收数据</p>
<ul>
<li><img src="https://i.loli.net/2021/07/13/MypWvdFclrfzj74.png" alt="image-20210713101204523"></li>
</ul>
</li>
</ul>
<h3 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h3><h4 id="一、创建项目并测试环境"><a href="#一、创建项目并测试环境" class="headerlink" title="一、创建项目并测试环境"></a>一、创建项目并测试环境</h4><h4 id="二、需求分析"><a href="#二、需求分析" class="headerlink" title="二、需求分析"></a>二、需求分析</h4><h5 id="1-显示商品编号"><a href="#1-显示商品编号" class="headerlink" title="1.显示商品编号"></a>1.显示商品编号</h5><ul>
<li><p>index.jsp中创建超链接，跳转display程序</p>
<ul>
<li><img src="https://i.loli.net/2021/07/13/eX8ESPiNIZmfkrH.png" alt="image-20210713110739311"></li>
<li><img src="https://i.loli.net/2021/07/13/S1gC9lzp8FJrNti.png" alt="image-20210713110746819"></li>
<li>发送数据到display.jsp页面，用于显示</li>
</ul>
</li>
<li><p>display负责链接前端页面，链接数据库，从数据库中获取数据并存入数组</p>
<ul>
<li><img src="https://i.loli.net/2021/07/13/e7cY8M2DjmHURkC.png" alt="image-20210713110709710"></li>
</ul>
</li>
<li><p>创建display.jsp，接收web程序发送的数据，并显示在页面</p>
<ul>
<li><img src="https://i.loli.net/2021/07/13/x7Sk5zpFVK8QnIb.png" alt="image-20210713110859014"></li>
</ul>
</li>
</ul>
<h5 id="2-修改商品编号"><a href="#2-修改商品编号" class="headerlink" title="2.修改商品编号"></a>2.修改商品编号</h5><ul>
<li><p>创建update.jsp、updateWEB程序</p>
<p>index.jsp中超链接跳转update.jsp</p>
<p><img src="https://i.loli.net/2021/07/13/Ot94cLZMfCeDK7l.png" alt="image-20210713121412256"></p>
</li>
<li><p>update.jsp</p>
<ul>
<li><p>获创建表单，获取数据</p>
</li>
<li><p>由web程序update接收数据</p>
<p><img src="https://i.loli.net/2021/07/13/Bgr5VD9fvLCwP2m.png" alt="image-20210713121547204"></p>
</li>
</ul>
</li>
<li><p>update JavaWeb程序</p>
<ul>
<li>链接数据库，接收前端输入数据</li>
<li>打包sql语句，发送sql语句，执行sql语句</li>
<li>跳转回主页面</li>
</ul>
<p><img src="https://i.loli.net/2021/07/13/pqMDV6YPC2NUeTa.png" alt="image-20210713121645948"></p>
</li>
</ul>
<h5 id="3-增加商品编号"><a href="#3-增加商品编号" class="headerlink" title="3.增加商品编号"></a>3.增加商品编号</h5><ul>
<li><p>创建add.jsp、addWeb程序</p>
<p>index.jsp中跳转到add.jsp中</p>
</li>
<li><p>add.jsp创建表单，录入数据，发送到add程序</p>
<ul>
<li><img src="https://i.loli.net/2021/07/13/bgYxj3e1vXfzVDN.png" alt="image-20210713121825966"></li>
</ul>
</li>
<li><p>add JavaWeb程序</p>
<ul>
<li><p>链接数据库，打包sql语句，发送，执行，返回首页</p>
<p><img src="https://i.loli.net/2021/07/13/7vGfYXLIwKnt8zr.png" alt="image-20210713121946605"></p>
</li>
</ul>
</li>
</ul>
<h5 id="4-删除商品编号"><a href="#4-删除商品编号" class="headerlink" title="4.删除商品编号"></a>4.删除商品编号</h5><ul>
<li><p>创建delete.jsp、delete Web程序</p>
<p>index.jsp中跳转到delete.jsp中</p>
</li>
<li><p>delete.jsp创建表单，录入数据，发送到add程序</p>
<p><img src="https://i.loli.net/2021/07/13/YFehBzTCfHp2tSm.png" alt="image-20210713122104396"></p>
</li>
<li><p>delete JavaWeb程序</p>
<ul>
<li><img src="https://i.loli.net/2021/07/13/piRLJI4vy1lKNoA.png" alt="image-20210713122155096"></li>
</ul>
</li>
</ul>
<blockquote>
<p>解决向mysql插入中文数据乱码问题</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">?<span class="attribute">useUnicode</span>=<span class="literal">true</span>&amp;characterEncoding=utf8</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li><p>跳转页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">req.getRequestDispatcher(<span class="string">&quot;show.jsp&quot;</span>).forward(req,resp);</span><br></pre></td></tr></table></figure></li>
<li><p>跳转程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resp.sendRedirect(<span class="string">&quot;show&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>增查删改</tag>
        <tag>案例</tag>
        <tag>数据库</tag>
        <tag>Mysql</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>序列化和反序列化\Properties类\瞬态关键字\打印流</title>
    <url>/2021/08/25/%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-Properties%E7%B1%BB-%E7%9E%AC%E6%80%81%E5%85%B3%E9%94%AE%E5%AD%97-%E6%89%93%E5%8D%B0%E6%B5%81/</url>
    <content><![CDATA[<h3 id="一、Properties类"><a href="#一、Properties类" class="headerlink" title="一、Properties类"></a>一、Properties类</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h4><ul>
<li><p>修饰符：public 可以直接使用</p>
</li>
<li><p>已知直接子类：Provider</p>
</li>
<li><p>包：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.Object </span><br><span class="line">java.util.Dictionary&lt;K,V&gt; </span><br><span class="line">java.util.Hashtable&lt;Object,Object&gt; </span><br><span class="line">java.util.Properties </span><br></pre></td></tr></table></figure>

<ul>
<li>需要导包使用</li>
</ul>
</li>
<li><p>常量：defaults</p>
<ul>
<li>属性列表，其中包含此属性列表中未找到的任何键的默认值</li>
</ul>
</li>
<li><p>继承关系</p>
<ul>
<li>Map：双列集合<ul>
<li>HashTable<ul>
<li>Properties（可以看作一个双列集合）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p><font color='#d15252'>可以和IO流结合，可以保存到流中或从流中加载</font></p>
<ul>
<li>实现本地化的存储<ul>
<li>之前的集合都是存放在内存中的，本地化存储可以实现存储到硬盘中</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="2-构造方法"><a href="#2-构造方法" class="headerlink" title="2.构造方法"></a>2.构造方法</h4><h5 id="Ⅰ-无参构造"><a href="#Ⅰ-无参构造" class="headerlink" title="Ⅰ.无参构造"></a>Ⅰ.无参构造</h5><ul>
<li><code>Properties()</code><ul>
<li>创建一个没有默认值的空属性列表</li>
</ul>
</li>
</ul>
<h5 id="Ⅱ-带参构造-用的不多"><a href="#Ⅱ-带参构造-用的不多" class="headerlink" title="Ⅱ.带参构造(用的不多)"></a>Ⅱ.带参构造(用的不多)</h5><ul>
<li><code>Properties(Properties defaults)</code><ul>
<li>创建具有指定默认值的空属性列表</li>
<li>传递一个Properties对象</li>
</ul>
</li>
</ul>
<h4 id="3-成员方法"><a href="#3-成员方法" class="headerlink" title="3.成员方法"></a>3.成员方法</h4><h5 id="Ⅰ-setProperty-String-key-String-value"><a href="#Ⅰ-setProperty-String-key-String-value" class="headerlink" title="Ⅰ. setProperty(String key,String value)"></a>Ⅰ. setProperty(String key,String value)</h5><ul>
<li><p>实现添加功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">setProperty</span> <span class="params">(String key,String value)</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>调用<code>Hashtable</code>方法<code>put</code> <ul>
<li>直接使用父类put方法也可以，但是<font color='orange'>不推荐</font></li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/08/11/63xLY4tgTPRQ1iF.png" alt="image-20210811104815624"></p>
<h5 id="Ⅱ-stringPropertyNames（）"><a href="#Ⅱ-stringPropertyNames（）" class="headerlink" title="Ⅱ. stringPropertyNames（）"></a>Ⅱ. stringPropertyNames（）</h5><ul>
<li><p>获取所有的键</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">stringPropertyNames</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>返回值类型：Set<String> 集合</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/08/11/qVI75zYovs8dhUl.png" alt="image-20210811104848133"></p>
<h5 id="Ⅲ-getProperty"><a href="#Ⅲ-getProperty" class="headerlink" title="Ⅲ. getProperty"></a>Ⅲ. getProperty</h5><ul>
<li><p>通过键找值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getProperty</span><span class="params">(String key)</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>了解即可，用的不多</li>
</ul>
</li>
<li><p>如果找不到，则返回null</p>
</li>
</ul>
<h5 id="Ⅳ-字节-store-OutputStream-out-String-comments"><a href="#Ⅳ-字节-store-OutputStream-out-String-comments" class="headerlink" title="Ⅳ.字节 store(OutputStream out, String comments)"></a>Ⅳ.字节 store(OutputStream out, String comments)</h5><ul>
<li><p>写入输出流  — 字节流方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">store</span><span class="params">(OutputStream out, String comments)</span><span class="keyword">throws</span> IOException</span></span><br></pre></td></tr></table></figure>

<ul>
<li>out ：输出流</li>
<li>comments：属性列表的<font color='#d15252'>描述</font></li>
</ul>
</li>
<li><p>传递OutputStream的对象，文件名必须是.properties</p>
</li>
<li><p>异常：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">IOException - 如果将此属性列表写入指定的输出流</span><br><span class="line">ClassCastException - 如果此 Properties对象包含任何不是 Strings键或值。 </span><br><span class="line">NullPointerException - 如果 out为空。 </span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://i.loli.net/2021/08/11/SrARVdKQJ34Wso5.png" alt="image-20210811112535575"></p>
<ul>
<li>需要关流</li>
</ul>
<p><img src="https://i.loli.net/2021/08/11/WJrjwEZVoz3D4Ty.png" alt="image-20210811113043771"></p>
<h5 id="Ⅴ-字符store-Writer-w-String-comments"><a href="#Ⅴ-字符store-Writer-w-String-comments" class="headerlink" title="Ⅴ. 字符store(Writer w, String comments)"></a>Ⅴ. 字符store(Writer w, String comments)</h5><ul>
<li>写入输出流中（方法重载） — 字符流方式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">store</span><span class="params">(Writer w,String comments)</span><span class="keyword">throws</span> IOException</span></span><br></pre></td></tr></table></figure>

<ul>
<li>comments：描述</li>
</ul>
<h5 id="Ⅵ-字节-load-InputStream-is"><a href="#Ⅵ-字节-load-InputStream-is" class="headerlink" title="Ⅵ. 字节 load(InputStream is)"></a>Ⅵ. 字节 load(InputStream is)</h5><ul>
<li><p>从输入字节流中读取键值对 —- 字节</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(InputStream is)</span><span class="keyword">throws</span> IOException</span></span><br></pre></td></tr></table></figure>

<ul>
<li>is- 输入流</li>
</ul>
</li>
</ul>
<h5 id="Ⅶ-字符-load-Reader-r"><a href="#Ⅶ-字符-load-Reader-r" class="headerlink" title="Ⅶ.字符 load(Reader r)"></a>Ⅶ.字符 load(Reader r)</h5><ul>
<li><p>从输入字符流读取属性列表（关键字和元素对）—- 字符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(Reader reader)</span><span class="keyword">throws</span> IOException</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="二、序列化流和反序列化流（对象流）"><a href="#二、序列化流和反序列化流（对象流）" class="headerlink" title="二、序列化流和反序列化流（对象流）"></a>二、序列化流和反序列化流（对象流）</h3><ul>
<li>学框架有用</li>
</ul>
<h4 id="1-ObjectOutputStream序列化"><a href="#1-ObjectOutputStream序列化" class="headerlink" title="1.ObjectOutputStream序列化"></a>1.ObjectOutputStream序列化</h4><ul>
<li><p>序列化：<font color='#d15252'>将对象写入到文件</font>，这个过程被称为序列化 </p>
</li>
<li><p>使用</p>
<ul>
<li>构造方法</li>
<li>成员方法</li>
</ul>
</li>
<li><p>关流操作，先开后关</p>
</li>
</ul>
<h5 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h5><ul>
<li><p>无参构造有protected修饰，不能使用</p>
</li>
<li><p>使用带参构造</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectOutputStream(OutputStream out)</span><br><span class="line"><span class="comment">//创建一个写入指定的OutputStream的ObjectOutputStream。  </span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/08/11/GIWT6MraYnL4hH2.png" alt="image-20210811134915997"></p>
</li>
</ul>
<h5 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h5><ul>
<li><p>writeObject() 将指定对象<font color='#d15252'>写入到流中</font></p>
<p><img src="https://i.loli.net/2021/08/11/XOl8Ck2VJKHEz9a.png" alt="image-20210811135654947"></p>
<p>对象类需实现Serializable具备实例化功能接口</p>
</li>
</ul>
<ul>
<li>Serializable：标志；如果实现了该接口，就意味子类具备了序列化</li>
</ul>
<h4 id="2-ObjectInpuStream反序列化"><a href="#2-ObjectInpuStream反序列化" class="headerlink" title="2.ObjectInpuStream反序列化"></a>2.ObjectInpuStream反序列化</h4><ul>
<li><p>反序列化：<font color='#d15252'>将文件中的对象读出</font>，这个过程被称为反序列化</p>
</li>
<li><p>构造方法</p>
<ul>
<li>同样，无参构造由Protected修饰，无法使用</li>
<li>带参构造，传递一个inputStream对象<ul>
<li>通过FileinputStream子类实例化</li>
</ul>
</li>
</ul>
</li>
<li><p>成员方法</p>
<p><img src="https://i.loli.net/2021/08/11/JBxWApyLTmX2ZR7.png" alt="image-20210811140646610"></p>
</li>
<li><p>关流</p>
</li>
</ul>
<h4 id="3-补充知识点"><a href="#3-补充知识点" class="headerlink" title="3.补充知识点"></a>3.补充知识点</h4><ul>
<li>序列化和反序列化找的是.class文件 //getClass()</li>
<li>类的串行版本：可以看作类的唯一的Id<ul>
<li>固定类uid：public static final long serialVersionUID = xxxL;</li>
<li>如果不固定uid ，每次更新类中数据，都会默认编译，产生新的uid<ul>
<li>如果要反序列化就需要重新先序列化</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="三、瞬态关键字transient"><a href="#三、瞬态关键字transient" class="headerlink" title="三、瞬态关键字transient"></a>三、瞬态关键字transient</h3><h4 id="1-作用"><a href="#1-作用" class="headerlink" title="1.作用"></a>1.作用</h4><ul>
<li>在序列化时，如果有某个对象不想使用，可以加transient关键字修饰<ul>
<li>变成默认值</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/08/11/RC2PDV7LKdsXv19.png" alt="image-20210811150114172"></p>
<p><img src="https://i.loli.net/2021/08/11/495wxoltLkTqMJB.png" alt="image-20210811150129064"></p>
<h3 id="四、打印流"><a href="#四、打印流" class="headerlink" title="四、打印流"></a>四、打印流</h3><ul>
<li>更加方便的输出各种形式的数据</li>
</ul>
<h4 id="字节打印流PrintStream"><a href="#字节打印流PrintStream" class="headerlink" title="字节打印流PrintStream"></a>字节打印流PrintStream</h4><h5 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h5><p><img src="https://i.loli.net/2021/08/11/gxY7Rv591rDzqtH.png" alt="image-20210811154349545"></p>
<h5 id="成员方法-1"><a href="#成员方法-1" class="headerlink" title="成员方法"></a>成员方法</h5><ul>
<li>println()</li>
</ul>
<h4 id="字符打印流PrintWriter"><a href="#字符打印流PrintWriter" class="headerlink" title="字符打印流PrintWriter"></a>字符打印流PrintWriter</h4><h5 id="构造方法-2"><a href="#构造方法-2" class="headerlink" title="构造方法"></a>构造方法</h5><p><img src="https://i.loli.net/2021/08/11/ZJfk9pGoFAsLvX6.png" alt="image-20210811153208397"></p>
<ul>
<li>带参传递一个File类型或OutputStream类型的参数</li>
</ul>
<p><img src="https://i.loli.net/2021/08/11/wrVdKyFi1S2xJkQ.png" alt="image-20210811153358399"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>序列化</tag>
        <tag>反序列化</tag>
        <tag>Properties</tag>
        <tag>瞬态关键字</tag>
        <tag>打印流</tag>
      </tags>
  </entry>
  <entry>
    <title>异常和迭代器</title>
    <url>/2021/08/25/%E5%BC%82%E5%B8%B8%E5%92%8C%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
    <content><![CDATA[<h3 id="一、迭代器"><a href="#一、迭代器" class="headerlink" title="一、迭代器"></a>一、迭代器</h3><h4 id="1-next"><a href="#1-next" class="headerlink" title="1.next()"></a>1.next()</h4><ul>
<li>取数</li>
<li>先下一个</li>
<li>一次性</li>
</ul>
<h4 id="2-并发修改异常ConcurrentModificationException"><a href="#2-并发修改异常ConcurrentModificationException" class="headerlink" title="2.并发修改异常ConcurrentModificationException"></a>2.并发修改异常ConcurrentModificationException</h4><ul>
<li>当我们使用迭代器做遍历的时候，不能破坏集合的内部结构<ul>
<li>一旦有<font color='#d15252'>破坏集合内部结构的操作就会报错</font></li>
</ul>
</li>
</ul>
<h4 id="3-练习题：斗地主"><a href="#3-练习题：斗地主" class="headerlink" title="3.练习题：斗地主"></a>3.练习题：斗地主</h4><ul>
<li>做四个容器<ul>
<li>分别存玩家和底牌</li>
</ul>
</li>
<li>再做一个容器，存所有扑克牌</li>
</ul>
<h4 id="3-静态导入"><a href="#3-静态导入" class="headerlink" title="3.静态导入"></a>3.静态导入</h4><ul>
<li>在导包过程中，我们可以直接导入静态部分，这样的话某个类的静态成员就可以直接使用了<ul>
<li>看别人的源码时用的比较多</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/08/05/TdlWUHFeZVRAPLj.png" alt="image-20210805135205026"></p>
<h3 id="二、异常"><a href="#二、异常" class="headerlink" title="二、异常"></a>二、<font color='#d15252'>异常</font></h3><h4 id="1-什么是异常"><a href="#1-什么是异常" class="headerlink" title="1.什么是异常"></a>1.什么是异常</h4><ul>
<li>异常就是程序出现了不正常的现象</li>
</ul>
<h4 id="2-Java如何形容异常？"><a href="#2-Java如何形容异常？" class="headerlink" title="2.Java如何形容异常？"></a>2.Java如何形容异常？</h4><p>但凡涉及到Java内的内容，都要用类来处理，所以异常最顶层的类</p>
<ul>
<li><font color='#d15252'><strong>Throwable</strong></font>类<ul>
<li>是Java语言中所有错误和异常的超类</li>
</ul>
</li>
</ul>
<h4 id="3-Throwable类"><a href="#3-Throwable类" class="headerlink" title="3.Throwable类"></a>3.Throwable类</h4><ul>
<li><p><font color='#d15252'>Throwable</font></p>
<ul>
<li>error（错误）一般不会遇到，因为它表示严重的问题</li>
<li>exception（异常）<ul>
<li>编译时异常<ul>
<li>其他类都是编译时异常</li>
</ul>
</li>
<li>运行时异常<ul>
<li>RuntimeException在运行时</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/08/05/1BUKNkQWzOFSgA7.png" alt="image-20210805141331385"></p>
</li>
<li><p><code>RuntimeException</code>是在Java虚拟机的正常操作期间可以抛出的异常的超类。 </p>
</li>
</ul>
<h4 id="4-编译时异常和运行时异常"><a href="#4-编译时异常和运行时异常" class="headerlink" title="4.编译时异常和运行时异常"></a>4.编译时异常和运行时异常</h4><h5 id="Ⅰ-编译时异常"><a href="#Ⅰ-编译时异常" class="headerlink" title="Ⅰ.编译时异常"></a>Ⅰ.编译时异常</h5><ul>
<li>编译时异常都是Exception的子类，程序卡在编译阶段</li>
<li>出现这类的异常，必须<font color='#d15252'>显示处理</font>（调试代码），否则程序就会出现问题，无法编译</li>
</ul>
<h5 id="Ⅱ-运行时异常"><a href="#Ⅱ-运行时异常" class="headerlink" title="Ⅱ.运行时异常"></a>Ⅱ.运行时异常</h5><ul>
<li>都是RuntimeException的子类，卡在了程序的运行时</li>
<li>必须得修改代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="comment">//运行时异常</span></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">System.out.println(arr[<span class="number">100</span>]);</span><br><span class="line"><span class="comment">//以上代码可知，编译时是没有错误的</span></span><br><span class="line"><span class="comment">//但运行时报错 : java.lang.ArrayIndexOutOfBoundsException:</span></span><br><span class="line"><span class="comment">//由查看API可知，则异常是RuntimeException下的异常，所以确定它是运行时异常</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//编译时异常演示</span></span><br><span class="line">      SimpleDateFormat sim = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy年MM月dd日&quot;</span>);</span><br><span class="line">      Date date = sim.parse(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="comment">//由以上代码可知，在编译时期就会抛出异常</span></span><br><span class="line"><span class="comment">//Demo2.java:16: 错误: 未报告的异常错误ParseException; 必须对其进行捕获或声明以便抛出</span></span><br><span class="line"><span class="comment">//并且此异常在Throwable 包下，与runtimeException无关。所以时运行时异常</span></span><br></pre></td></tr></table></figure>

<h4 id="5-异常的处理机制"><a href="#5-异常的处理机制" class="headerlink" title="5.异常的处理机制"></a>5.异常的处理机制</h4><h5 id="Ⅰ-默认处理机制（面试问）"><a href="#Ⅰ-默认处理机制（面试问）" class="headerlink" title="Ⅰ.默认处理机制（面试问）"></a>Ⅰ.<font color='#d15252'>默认处理机制</font>（面试问）</h5><ul>
<li>当程序遇到异常时<ul>
<li>将异常抛给调用者（jvm)<ul>
<li>一层一层的抛，最后抛给jvm</li>
</ul>
</li>
<li>jvm会默认的去做相应的处理<ul>
<li><font color='#d15252'>new 异常对象</font> ，产生异常名称、原因，以及出现的位置等信息输出在控制台</li>
<li>停掉程序</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="Ⅱ-throws-声明式-方式处理异常"><a href="#Ⅱ-throws-声明式-方式处理异常" class="headerlink" title="Ⅱ.throws(声明式)方式处理异常"></a>Ⅱ.throws(声明式)方式处理异常</h5><ul>
<li><p>写在方法的声明部分()</p>
<ul>
<li><p>```java<br>public void method()throws 异常类名</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">-</span> 给开发者看的，一般也不用</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 特点</span><br><span class="line"></span><br><span class="line"><span class="bullet">  -</span> 处理机制（还是默认的处理机制）</span><br><span class="line"><span class="bullet">  -</span> 为了给以后的调用者看（开发角度）</span><br><span class="line"><span class="bullet">  -</span> <span class="strong">**<span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&#x27;#d15252&#x27;</span>&gt;</span></span>运行时异常可以不用声明，编译时异常必须写<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span>**</span>（面试）</span><br><span class="line"></span><br><span class="line"><span class="section">##### Ⅲ.throw抛异常</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> throw new 异常类 ：方法内</span><br><span class="line"><span class="bullet">  -</span> 如果是运行时异常，不用在方法上去声明异常</span><br><span class="line"><span class="bullet">  -</span> 如果是编译时异常，必须要在方法上声明</span><br><span class="line"><span class="bullet">  -</span> 从结果上看，和默认机制是一样的，原理是不一样的，throw是自己将异常抛出(直接到控制台上)</span><br><span class="line"><span class="bullet">  -</span> 没有交给jvm，直接自己就抛出异常</span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; Ⅱ.throws声明式异常和Ⅲ.throw抛异常	适用于开发者的角度</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt; throw</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt; - 编译时：有声明不一定有抛出，但是有抛出必须有声明</span></span><br><span class="line"><span class="quote">&gt; - 运行时：声明，抛出</span></span><br><span class="line"></span><br><span class="line">![<span class="string">image-20210805170703594</span>](<span class="link">https://i.loli.net/2021/08/05/smAEunHvaFqhJkS.png</span>)</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 格式： throw new 异常类型（）；</span><br><span class="line"></span><br><span class="line"><span class="section">##### Ⅳ.try...catch处理异常机制</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 格式</span><br><span class="line"></span><br><span class="line">  <span class="code">```java</span></span><br><span class="line"><span class="code">  try&#123;</span></span><br><span class="line"><span class="code">  	可能出现异常的语句</span></span><br><span class="line"><span class="code">  &#125;catch(异常类类型 变量名)&#123;</span></span><br><span class="line"><span class="code">      异常的处理</span></span><br><span class="line"><span class="code">  &#125;</span></span><br></pre></td></tr></table></figure></li>
<li><p>以后做开发使用或测试的时候，有异常建议使用(throw/throws)</p>
</li>
<li><p>在调用方法时遇到异常，建议使用try catch</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">       <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">       <span class="keyword">int</span> b =i/<span class="number">0</span>;</span><br><span class="line">        System.out.println(<span class="number">111</span>);	<span class="comment">//没有执行，异常跳入catch执行完，结束</span></span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;除数为0了&quot;</span>);</span><br><span class="line">        <span class="comment">//输出异常信息</span></span><br><span class="line">        System.out.println(e.getMessage());</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        一定会执行的代码</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>当一个程序有多个错误时</p>
<ul>
<li>catch可以写多个，但要注意异常类型，小的放上面的catch，大的放在下面</li>
</ul>
</li>
<li><p>运行步骤：</p>
<ul>
<li>当进入try..catch中，先执行try()中有可能出现异常的问题</li>
<li>如果遇到异常语句<ul>
<li>跳入catch执行处理异常语句</li>
<li>catch语句执行完后，执行finally内的语句</li>
<li>结束try..catch</li>
</ul>
</li>
<li>执行之后的代码</li>
</ul>
</li>
</ul>
<h5 id="Ⅴ-细节问题"><a href="#Ⅴ-细节问题" class="headerlink" title="Ⅴ.细节问题"></a>Ⅴ.细节问题</h5><ul>
<li>可以多层catch，但是大的类型一定要在最底层</li>
<li>采用try chach，异常代码处理完成后，不影响其他代码的执行</li>
<li>如果有finally，不管异常是否触发，一定会走（IO）</li>
</ul>
<h4 id="6-查看异常信息"><a href="#6-查看异常信息" class="headerlink" title="6.查看异常信息"></a>6.查看异常信息</h4><p><img src="https://i.loli.net/2021/08/05/yh1b53ZoBeH7dmE.png" alt="image-20210805144413257"></p>
<ul>
<li>第一行是异常的类名<ul>
<li>第一行<code>：</code>后的信息是异常产生的原因</li>
</ul>
</li>
<li>第二行是异常产生的原始位置</li>
<li>第三行是异常产生的位置</li>
</ul>
<h4 id="7-Throwable的成员方法"><a href="#7-Throwable的成员方法" class="headerlink" title="7.Throwable的成员方法"></a>7.Throwable的成员方法</h4><table>
<thead>
<tr>
<th>成员方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><font color='#d15252'>printStackTrace()</font></td>
<td>将此throwable和其追溯打印到标准错误流</td>
</tr>
<tr>
<td>getMessage()</td>
<td>返回此throwable的详细消息字符串</td>
</tr>
<tr>
<td>toString()</td>
<td>简短的描述信息</td>
</tr>
</tbody></table>
<ul>
<li>printStackTrace() 开发中用的比较多，因为他会对异常信息进行溯源，比较详细</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">    System.out.println(e.getMessage());</span><br><span class="line">    System.out.println(e.toString());</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="number">123</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/ by zero	<span class="comment">//getMessage</span></span><br><span class="line">java.lang.ArithmeticException: / by zero	<span class="comment">//toString</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line">java.lang.ArithmeticException: / by zero	</span><br><span class="line">	at 异常.Demo7.main(Demo7.java:<span class="number">6</span>)<span class="comment">//printStackTrace</span></span><br></pre></td></tr></table></figure>



<h4 id="8-自定义异常信息"><a href="#8-自定义异常信息" class="headerlink" title="8.自定义异常信息"></a>8.自定义异常信息</h4><ul>
<li><p>步骤：</p>
<ul>
<li><p>在有可能出现异常的方法中，实现判断，如果触发异常，就使用throw new 异常类型（） 触发异常</p>
<p><img src="https://i.loli.net/2021/08/05/3LZyG78TbpfcEth.png" alt="image-20210805171208739"></p>
</li>
<li><p>异常类型需要自己自定义一个类，通过继承，实现处理异常的能力</p>
<p><img src="https://i.loli.net/2021/08/05/RgbNl7y8MALHWZX.png" alt="image-20210805171219308"></p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>异常</tag>
        <tag>迭代器</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库知识补充，事务</title>
    <url>/2021/09/17/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9F%A5%E8%AF%86%E8%A1%A5%E5%85%85%EF%BC%8C%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<h3 id="一、Mysql知识点补充"><a href="#一、Mysql知识点补充" class="headerlink" title="一、Mysql知识点补充"></a>一、Mysql知识点补充</h3><h4 id="1-查询某一列的数量"><a href="#1-查询某一列的数量" class="headerlink" title="1. 查询某一列的数量"></a>1. 查询某一列的数量</h4><ul>
<li>对数据进行纵向的操作</li>
</ul>
<p><img src="https://i.loli.net/2021/09/14/YSgdP13anu6mzWL.png" alt="image-20210914092804332"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询所有的列的行数count（*/1）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> emp</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询员工的总数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(ename) <span class="string">&#x27;员工总数&#x27;</span> <span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(eid) <span class="string">&#x27;员工总数&#x27;</span> <span class="keyword">FROM</span> emp</span><br><span class="line"><span class="comment">-- 查询员工的总薪资，最高 最低 平均</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">	<span class="built_in">SUM</span>(salary) &quot;总薪资&quot;,</span><br><span class="line">	<span class="built_in">MAX</span>(salary) &quot;最高&quot;,</span><br><span class="line">	<span class="built_in">MIN</span>(salary) &quot;最低&quot;,</span><br><span class="line">	<span class="built_in">AVG</span>(salary) &quot;平均&quot;</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="comment">-- 查询员工薪资大于500的个数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)<span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> salary<span class="operator">&gt;</span><span class="number">500</span></span><br><span class="line"><span class="comment">-- 查询&quot;大唐&quot;部门员工的总数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(ename) <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> edpt<span class="operator">=</span>&quot;大唐&quot;</span><br><span class="line"><span class="comment">-- 查询“大唐”部门员工的平均薪资</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> edpt <span class="operator">=</span> <span class="string">&#x27;大唐&#x27;</span></span><br></pre></td></tr></table></figure>



<h4 id="2-DQL分组查询"><a href="#2-DQL分组查询" class="headerlink" title="2.DQL分组查询"></a>2.DQL分组查询</h4><ul>
<li><p>格式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> 字段</span><br></pre></td></tr></table></figure></li>
<li><p>分组，只能对显示集合中的第一条数据，因此单纯的使用分组查询是没有意义的</p>
<ul>
<li>所以，经常使用聚合函数和分组结合使用</li>
</ul>
</li>
<li><p>通过性别字段进行分组，求每组的平均薪资</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 聚合函数 <span class="keyword">FROM</span> 表名 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 字段</span><br></pre></td></tr></table></figure>

<ul>
<li>根据某一个字段进行分组，并用聚合函数操作</li>
</ul>
</li>
</ul>
<h4 id="3-练习"><a href="#3-练习" class="headerlink" title="3.练习"></a>3.练习</h4><ul>
<li><p>查询有几个部门</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> edpt <span class="keyword">FROM</span> emp <span class="keyword">Group</span> <span class="keyword">BY</span> edpt</span><br></pre></td></tr></table></figure></li>
<li><p>查询每个部门的平均薪资</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> edpt,<span class="built_in">AVG</span>(salary) <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> edpt</span><br></pre></td></tr></table></figure></li>
<li><p>查询每个部门的平均薪资，部门名称不能为null</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> edpt,<span class="built_in">AVG</span>(salary) <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> edpt <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> edpt;</span><br></pre></td></tr></table></figure></li>
<li><p>查询平均薪资大于600的部门</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li>DESC 表名 查看表结构</li>
</ul>
<h4 id="4-查询条件"><a href="#4-查询条件" class="headerlink" title="4.查询条件"></a>4.查询条件</h4><ul>
<li>WHERE<ul>
<li>进行条件判断，后面不能跟聚合函数</li>
</ul>
</li>
<li>HAVING<ul>
<li>进行条件判断，后面可以跟聚合函数</li>
</ul>
</li>
</ul>
<h4 id="5-limite关键字"><a href="#5-limite关键字" class="headerlink" title="5.limite关键字"></a>5.limite关键字</h4><ul>
<li><p>是Mysql的方言</p>
</li>
<li><p>格式</p>
<ul>
<li> limit offset,length</li>
<li> 起始索引 = （当前页-1）* 每页数量</li>
</ul>
<p><img src="https://i.loli.net/2021/09/14/YKWT7yhouUEZk2R.png" alt="image-20210914110446034"></p>
<ul>
<li>0-3  4-6 7-9</li>
</ul>
</li>
</ul>
<h4 id="6-SQL约束"><a href="#6-SQL约束" class="headerlink" title="6.SQL约束"></a>6.SQL约束</h4><ul>
<li>什么是约束？<ul>
<li>对表中的数据进行进一步的限制，用来保证数据的正确性，有效性，完整性</li>
</ul>
</li>
<li>常见的约束</li>
</ul>
<table>
<thead>
<tr>
<th>约束</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>主键</td>
<td>primary key</td>
</tr>
<tr>
<td>唯一</td>
<td>unique</td>
</tr>
<tr>
<td>非空</td>
<td>not null</td>
</tr>
<tr>
<td>外键</td>
<td>foreign key</td>
</tr>
</tbody></table>
<h5 id="Ⅰ-主键"><a href="#Ⅰ-主键" class="headerlink" title="Ⅰ.主键"></a>Ⅰ.主键</h5><ul>
<li><p>特点</p>
<ul>
<li>不可重复，唯一，非空</li>
</ul>
</li>
<li><p>作用：修饰字段</p>
</li>
<li><p>语法格式</p>
<ul>
<li>创建同时指定</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> s(</span><br><span class="line">	sid <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">	sname <span class="type">VARCHAR</span>(<span class="number">10</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li>创建时单独指定</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> s(</span><br><span class="line">	sid <span class="type">INT</span>,</span><br><span class="line">	sname <span class="type">VARCHAR</span>(<span class="number">10</span>)</span><br><span class="line">	<span class="comment">-- 单独指定</span></span><br><span class="line">	<span class="keyword">PRIMARY</span> KEY(sid)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li>创建时不指定，使用DDL设置主键</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> s <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY(sid)</span><br></pre></td></tr></table></figure></li>
<li><p>删除主键</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> s <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY</span><br></pre></td></tr></table></figure>

<ul>
<li><p>自动增长</p>
<p><img src="https://i.loli.net/2021/09/14/Hcq9pnlhLB1sjbS.png" alt="image-20210914113151269"></p>
<ul>
<li>设置自动增长的起始数</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> s1(</span><br><span class="line">	sid <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">	sanme <span class="type">VARCHAR</span>(<span class="number">10</span>)</span><br><span class="line">)AUTO_INCREMENT<span class="operator">=</span><span class="number">100</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>删除操作对主键的影响</p>
<ul>
<li>删除表中所有数据，包括主键等操作</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> s1</span><br></pre></td></tr></table></figure>



<h5 id="Ⅱ-非空约束"><a href="#Ⅱ-非空约束" class="headerlink" title="Ⅱ.非空约束"></a>Ⅱ.非空约束</h5><ul>
<li>该字段不能为空</li>
<li>非空和主键的区别<ul>
<li>非空约束可以重复</li>
<li>主键约束不能重复，是唯一的</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure>



<h5 id="Ⅲ-唯一约束"><a href="#Ⅲ-唯一约束" class="headerlink" title="Ⅲ.唯一约束"></a>Ⅲ.唯一约束</h5><ul>
<li>使用UNIQUE</li>
</ul>
<p><img src="https://i.loli.net/2021/09/14/5Wk3zTbPetBDVQ1.png" alt="image-20210914134717277"></p>
<h5 id="Ⅳ-设置默认值"><a href="#Ⅳ-设置默认值" class="headerlink" title="Ⅳ. 设置默认值"></a>Ⅳ. 设置默认值</h5><ul>
<li>使用DEFAULT+值</li>
</ul>
<p><img src="https://i.loli.net/2021/09/14/8fOZjVeYpm5DgJU.png" alt="image-20210914135408534"></p>
<ul>
<li>插入数据时，也可以使用default，使用默认值</li>
</ul>
<h3 id="二、事务"><a href="#二、事务" class="headerlink" title="二、事务"></a>二、事务</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h4><ul>
<li>是由一条或多条sql语句组成<ul>
<li>要么全部成功，要么全部失败（但是可以执行回滚）</li>
</ul>
</li>
</ul>
<h4 id="2-回滚"><a href="#2-回滚" class="headerlink" title="2.回滚"></a>2.回滚</h4><ul>
<li>在事务运行的过程中发生了某个故障，事务便不再执行下去，系统对事物中数据所有已经完成的操作全家不撤销<ul>
<li>滚回到<font color='#d15252'>开始时</font>的状态</li>
</ul>
</li>
</ul>
<h4 id="3-事务的操作"><a href="#3-事务的操作" class="headerlink" title="3.事务的操作"></a>3.事务的操作</h4><ul>
<li><p>手动提交事务</p>
<ul>
<li><p>格式：</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>语句</th>
</tr>
</thead>
<tbody><tr>
<td>开启事务</td>
<td>start transation ； BEGIN</td>
</tr>
<tr>
<td>提交事务</td>
<td>commit</td>
</tr>
<tr>
<td>回滚事务</td>
<td>rollback</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p>自动提交事务</p>
<ul>
<li>默认自动提交事务</li>
</ul>
</li>
</ul>
<h4 id="4-取消自动提交"><a href="#4-取消自动提交" class="headerlink" title="4.取消自动提交"></a>4.取消自动提交</h4><ul>
<li>查看当前的提交方式<ul>
<li>SHOW VARIABLES LIKE ‘autocommit’<ul>
<li>on：自动</li>
<li>off：关闭自动</li>
</ul>
</li>
</ul>
</li>
<li>设置提交方式<ul>
<li>SET @@autocommint = off</li>
</ul>
</li>
</ul>
<h4 id="5-事务的四大特性（面试）"><a href="#5-事务的四大特性（面试）" class="headerlink" title="5.事务的四大特性（面试）"></a>5.事务的<font color='#d15252'>四大特性</font>（面试）</h4><table>
<thead>
<tr>
<th>特性</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>原子性</td>
<td>每一个事物都是一个整体，不可以再拆分，事务中的sql要么全部成功，要么全部失败</td>
</tr>
<tr>
<td>一致性</td>
<td>事务在执行前数据库的状态与执行后数据库的状态保持一致</td>
</tr>
<tr>
<td>隔离性</td>
<td>事务和事务之间不应该相互影响，执行时保持隔离状态</td>
</tr>
<tr>
<td>持久性</td>
<td>一旦事务执行成功，对数据库的修改时永久的。就算关机，数据也会保存下来</td>
</tr>
</tbody></table>
<h4 id="6-Mysql的隔离级别（了解）"><a href="#6-Mysql的隔离级别（了解）" class="headerlink" title="6.Mysql的隔离级别（了解）"></a>6.Mysql的隔离级别（了解）</h4><ul>
<li><p>数据的并发访问</p>
<ul>
<li>一个数据库可能有多个客户端在访问，这些客户端都可以并发方式访问数据库</li>
<li>数据库的相同数据可能被多个事务同时访问</li>
<li>如果不采用隔离，就会发生各种问题，破坏数据的完整性</li>
</ul>
</li>
<li><p>数据并发访问产生的问题</p>
<table>
<thead>
<tr>
<th>产生的问题</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>脏读</td>
<td>一个事务读取到了另一个事务的尚未提交的数据</td>
</tr>
<tr>
<td>不可重复读</td>
<td>一个事务中两次读取的数据内容不一致</td>
</tr>
<tr>
<td>幻读</td>
<td>一个事务中，某一次的Select操作结果所表现的数据状态，无法支撑后续的业务操作（也就是查询到的数据不准确）</td>
</tr>
</tbody></table>
</li>
</ul>
<h5 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h5><ul>
<li>同一个事务中，进行查询操作，每次读取的内容是不一样的</li>
</ul>
<h5 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h5><ul>
<li>Select在查询某条记录时，当记录不存在时，插入数据<ul>
<li>但是执行insert时发现记录已经存在，无法插入</li>
</ul>
</li>
</ul>
<p><strong><font color='#d15252'>四种隔离级别</font></strong></p>
<table>
<thead>
<tr>
<th>级别</th>
<th>名字</th>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>读未提交</td>
<td>read uncommitted</td>
<td>不能</td>
<td>不能</td>
<td>不能</td>
</tr>
<tr>
<td>2</td>
<td>读已提交</td>
<td>read committed</td>
<td>能</td>
<td>不能</td>
<td>不能</td>
</tr>
<tr>
<td>3</td>
<td>可重复读</td>
<td>repeatable read</td>
<td>能</td>
<td>能</td>
<td>不能</td>
</tr>
<tr>
<td>4</td>
<td>串行化</td>
<td>serializable</td>
<td>能</td>
<td>能</td>
<td>能</td>
</tr>
</tbody></table>
<ul>
<li>级别越高，安全性越高，安全性越高，性能越低<ul>
<li>所以，需要根据情况给出相应的隔离级别</li>
</ul>
</li>
</ul>
<h5 id="查看隔离级别"><a href="#查看隔离级别" class="headerlink" title="查看隔离级别"></a>查看隔离级别</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@tx</span>_isolation</span><br></pre></td></tr></table></figure>

<ul>
<li>默认是可重复读状态</li>
</ul>
<h5 id="设置隔离级别"><a href="#设置隔离级别" class="headerlink" title="设置隔离级别"></a>设置隔离级别</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> TRANSACTION ISOLATION LEVEL 隔离级别</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库知识</title>
    <url>/2021/09/17/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h3 id="一、数据库"><a href="#一、数据库" class="headerlink" title="一、数据库"></a>一、数据库</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h4><ul>
<li><p> 对数据进行存储和管理的一个仓库</p>
</li>
<li><p> 本质还是一个文件系统，以文件的形式保存在电脑上</p>
</li>
<li><p> 数据库真正的存储在C盘ProgramData的Mysql文件夹下</p>
</li>
</ul>
<h4 id="2-为什么使用数据库"><a href="#2-为什么使用数据库" class="headerlink" title="2.为什么使用数据库"></a>2.为什么使用数据库</h4><ul>
<li><p>存储数据的方式</p>
<table>
<thead>
<tr>
<th>存储方式</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td>内存</td>
<td>速度快</td>
<td>临时</td>
</tr>
<tr>
<td>文件</td>
<td>数据可以永久存储</td>
<td>IO流，不方便</td>
</tr>
<tr>
<td>数据库</td>
<td>永久存储、方便管理和存储数据、统一的方式操作数据库(sql)</td>
<td>占用资源，收费(Mysql，Oracle)</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="二、Mysql数据库的相关操作"><a href="#二、Mysql数据库的相关操作" class="headerlink" title="二、Mysql数据库的相关操作"></a>二、Mysql数据库的相关操作</h3><h4 id="1-Mysql的卸载"><a href="#1-Mysql的卸载" class="headerlink" title="1.Mysql的卸载"></a>1.Mysql的卸载</h4><ul>
<li>删除C盘ProgramData中的Mysql文件夹即可，不需要删除注册表</li>
</ul>
<h4 id="2-Mysql的安装"><a href="#2-Mysql的安装" class="headerlink" title="2.Mysql的安装"></a>2.Mysql的安装</h4><p><img src="https://i.loli.net/2021/09/13/jMyfToBUIARxV8X.png" alt="image-20210913231734117"></p>
<ul>
<li>第三种第三种<ul>
<li>Client only 客户端</li>
<li>Full 所有</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/09/13/ybFKUXriT1st2ej.png" alt="image-20210913231959241"></p>
<ul>
<li>如果电脑用户名中文，勾选show….</li>
</ul>
<p><img src="https://i.loli.net/2021/09/13/HpBoSRDazQP1MkO.png" alt="image-20210913232058677"></p>
<ul>
<li>如果用户名中文，会出现乱码，在C盘创建一个.log文件，选中即可</li>
</ul>
<h4 id="3-配置Mysql环境变量"><a href="#3-配置Mysql环境变量" class="headerlink" title="3.配置Mysql环境变量"></a>3.配置Mysql环境变量</h4><p>需要注意的是，Mysql安装完成后会出现两个目录</p>
<ul>
<li>安装目录：可执行程序</li>
<li>文件目录：保存sql文件</li>
</ul>
<p><img src="https://i.loli.net/2021/09/13/DWg9xXTYRAScFVq.png" alt="image-20210913232435589"></p>
<ul>
<li>找到Path环境变量，添加路径</li>
</ul>
<h4 id="4-Mysql的启动和关闭"><a href="#4-Mysql的启动和关闭" class="headerlink" title="4.Mysql的启动和关闭"></a>4.Mysql的启动和关闭</h4><ul>
<li>方式一<ul>
<li>win+r打开运行，输入services.msc服务管理</li>
<li>打开Mysql服务，启动即可</li>
</ul>
</li>
<li>方式二（管理员命令行）<ul>
<li>net start 服务的名称 </li>
<li>net stop 服务的名称</li>
</ul>
</li>
</ul>
<h4 id="5-Mysql的登录"><a href="#5-Mysql的登录" class="headerlink" title="5.Mysql的登录"></a>5.Mysql的登录</h4><table>
<thead>
<tr>
<th>mysql -u用户名 -p密码</th>
<th>使用指定账户和密码进行登录（root）</th>
</tr>
</thead>
<tbody><tr>
<td>mysql -h主机ip -u用户名 -p密码</td>
<td>-h 指定ip（远程登录）</td>
</tr>
</tbody></table>
<ul>
<li>Mysql的图形化管理界面<ul>
<li>sqlyog</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/09/13/gx8H5bkco4f3JGD.png" alt="image-20210913233229733"></p>
<h4 id="6-Mysql的目录结构"><a href="#6-Mysql的目录结构" class="headerlink" title="6.Mysql的目录结构"></a>6.Mysql的目录结构</h4><ul>
<li><p>Mysql的安装目录（C:\Program Files\MySQL）</p>
<ul>
<li><table>
<thead>
<tr>
<th>目录</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>bin</td>
<td>可执行文件</td>
</tr>
<tr>
<td>docs</td>
<td>文档</td>
</tr>
<tr>
<td>include</td>
<td>头文件</td>
</tr>
<tr>
<td>lib</td>
<td>依赖</td>
</tr>
<tr>
<td>share</td>
<td>用于存放字符集、语言等信息</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ul>
<ul>
<li>data目录：C:\ProgramData\MySQL\MySQL Server 5.7<ul>
<li>data:存放数据的（文件）</li>
<li>my.ini :mysql的配置文件（建议不要更改配置文件）</li>
</ul>
</li>
</ul>
<ul>
<li>总结<ul>
<li>数据库：文件夹</li>
<li>表：文件</li>
<li>数据：文内内容</li>
</ul>
</li>
</ul>
<h3 id="三、数据库管理系统"><a href="#三、数据库管理系统" class="headerlink" title="三、数据库管理系统"></a>三、数据库管理系统</h3><h4 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1.概念"></a>1.概念</h4><ul>
<li>Database ManageMent System ==&gt; DBMS<ul>
<li>指一种操作维护和管理数据库的一个大型软件</li>
</ul>
</li>
<li>Mysql就是一个数据库管理系统软件，安装了Mysql软件的电脑，这台电脑就被称为数据库服务器</li>
</ul>
<h4 id="2-数据库管理系统的作用"><a href="#2-数据库管理系统的作用" class="headerlink" title="2.数据库管理系统的作用"></a>2.数据库管理系统的作用</h4><ul>
<li>用于建立、使用、和维护数据库，对数据进行统一的管理</li>
</ul>
<h4 id="3-数据库管理系统、数据库、表之间的关系"><a href="#3-数据库管理系统、数据库、表之间的关系" class="headerlink" title="3.数据库管理系统、数据库、表之间的关系"></a>3.数据库管理系统、数据库、表之间的关系</h4><ul>
<li>数据库管理系统：数据库软件</li>
<li>数据库：一个应用</li>
<li>表：不同的服务</li>
</ul>
<h3 id="四、表"><a href="#四、表" class="headerlink" title="四、表"></a>四、表</h3><ul>
<li><p>数据库的基本单位就是表</p>
</li>
<li><p>表和Java的关系</p>
<ul>
<li>表的基本单位是：列<ul>
<li>列名</li>
<li>数据类型</li>
</ul>
</li>
<li>Java的基本单位：类（对象）–&gt; 用成员变量存储数据<ul>
<li>变量名</li>
<li>数据类型</li>
</ul>
</li>
</ul>
<blockquote>
<p>表 ——— 类</p>
<p>行（属性） ——- 一个对象</p>
<p>列 ———– 成员变量</p>
</blockquote>
</li>
</ul>
<h3 id="五、sql"><a href="#五、sql" class="headerlink" title="五、sql"></a>五、sql</h3><h4 id="1-概念-2"><a href="#1-概念-2" class="headerlink" title="1.概念"></a>1.概念</h4><ul>
<li>什么是SQL？<ul>
<li>Structrued query Language ：结构化查询语言，简称SQL</li>
</ul>
</li>
<li>SQL的作用<ul>
<li>所有的关系型数据库统一的操作规范</li>
<li>不同的关系型数据库都支持sql语句</li>
<li>可以看作一种特殊的编程语言</li>
<li>用来<font color='#d15252'>操作数据库</font></li>
</ul>
</li>
</ul>
<h4 id="2-SQL通用语法"><a href="#2-SQL通用语法" class="headerlink" title="2.SQL通用语法"></a>2.SQL通用语法</h4><ul>
<li>sql语句可以写多行，也可以写单行，以 ; 结尾</li>
<li>可以使用空格和缩进来增加语句的可读性</li>
<li>不区分大小写，一般关键字是大写<ul>
<li>数据库名，表名，列名 一般小写</li>
</ul>
</li>
</ul>
<h4 id="3-SQL中的注释"><a href="#3-SQL中的注释" class="headerlink" title="3.SQL中的注释"></a>3.SQL中的注释</h4><table>
<thead>
<tr>
<th>注释语法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>– 空格</td>
<td>单行注释</td>
</tr>
<tr>
<td>/**/</td>
<td>多行注释</td>
</tr>
<tr>
<td>#</td>
<td>Mysql<strong>独有</strong>的注释方式（方言）</td>
</tr>
</tbody></table>
<h4 id="4-SQL语言的分类"><a href="#4-SQL语言的分类" class="headerlink" title="4.SQL语言的分类"></a>4.SQL语言的分类</h4><table>
<thead>
<tr>
<th>分类</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>数据的定义语句（DDL）</td>
<td>用来定义数据库、表和列</td>
</tr>
<tr>
<td>数据操作语句（DML）</td>
<td>用来对数据库中的数据进行 <strong>增删改</strong> 操作</td>
</tr>
<tr>
<td>数据查询语句（DQL）</td>
<td>用来对数据库的数据进行查询</td>
</tr>
<tr>
<td>数据的控制语言（DCL）</td>
<td>用来访问的权限和安全级别</td>
</tr>
</tbody></table>
<h3 id="六-DDL操作数据库"><a href="#六-DDL操作数据库" class="headerlink" title="六.DDL操作数据库"></a>六.DDL操作数据库</h3><h4 id="1-创建作数据库"><a href="#1-创建作数据库" class="headerlink" title="1.创建作数据库"></a>1.创建作数据库</h4><ul>
<li>创建数据库</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database 数据库名</span><br><span class="line"><span class="keyword">create</span> database 数据库名 <span class="type">character</span> <span class="keyword">set</span> 字符集 u</span><br></pre></td></tr></table></figure>

<blockquote>
<p>指定字符集，如果指定UTF-8，只需要写u即可</p>
</blockquote>
<h4 id="2-查看和选择数据库"><a href="#2-查看和选择数据库" class="headerlink" title="2.查看和选择数据库"></a>2.查看和选择数据库</h4><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>use 数据库名</td>
<td>切换数据库</td>
</tr>
<tr>
<td>select database()</td>
<td>查看当前正在使用的数据库</td>
</tr>
<tr>
<td>show databases</td>
<td>查看所有的数据库(DBMS系统中所有的)</td>
</tr>
<tr>
<td>show create database 数据库名</td>
<td>查看数据库的定义信息</td>
</tr>
</tbody></table>
<h4 id="3-修改数据库"><a href="#3-修改数据库" class="headerlink" title="3.修改数据库"></a>3.修改数据库</h4><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>alter database 数据库名称 character set 字符集</td>
<td>修改数据库字符集</td>
</tr>
</tbody></table>
<h4 id="4-删除数据库"><a href="#4-删除数据库" class="headerlink" title="4.删除数据库"></a>4.删除数据库</h4><ul>
<li>drop database 数据库名</li>
</ul>
<h3 id="七、数据类型"><a href="#七、数据类型" class="headerlink" title="七、数据类型"></a>七、数据类型</h3><h4 id="1-常用数据类型"><a href="#1-常用数据类型" class="headerlink" title="1.常用数据类型"></a>1.常用数据类型</h4><table>
<thead>
<tr>
<th>数据类型</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>int</td>
<td>整型</td>
</tr>
<tr>
<td>double</td>
<td>浮点</td>
</tr>
<tr>
<td>varchar</td>
<td>字符串（可变）</td>
</tr>
<tr>
<td>data</td>
<td>日期（只要年月日，没有时分秒）</td>
</tr>
</tbody></table>
<h4 id="2-varchar和char的区别"><a href="#2-varchar和char的区别" class="headerlink" title="2.varchar和char的区别"></a>2.varchar和char的区别</h4><ul>
<li>char：固定的<ul>
<li>相当于Java中的数组<ul>
<li>使用char时也可以（）指定长度，但是一旦指定就是固定的</li>
</ul>
</li>
<li>存账户密码时用的较多</li>
</ul>
</li>
<li>varchar：可变的<ul>
<li>相当于Java中的集合</li>
</ul>
</li>
</ul>
<h3 id="八、DDL操作表"><a href="#八、DDL操作表" class="headerlink" title="八、DDL操作表"></a>八、DDL操作表</h3><h4 id="1-创建表"><a href="#1-创建表" class="headerlink" title="1.创建表"></a>1.创建表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">	字段名 数据类型，</span><br><span class="line">    字段名 数据类型，</span><br><span class="line">    字段名 数据类型</span><br><span class="line">    <span class="comment">-- 最后一条不需要加,</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li>当我们需要复制一个表时，可以使用like关键字</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名 <span class="keyword">like</span> 要复制的表名</span><br></pre></td></tr></table></figure>



<h4 id="2-查看表"><a href="#2-查看表" class="headerlink" title="2.查看表"></a>2.查看表</h4><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>show tables</td>
<td>查看所有的表</td>
</tr>
<tr>
<td>desc 表名</td>
<td>查看表结构</td>
</tr>
</tbody></table>
<h4 id="3-删除表"><a href="#3-删除表" class="headerlink" title="3.删除表"></a>3.删除表</h4><ul>
<li>直接删除</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名</span><br></pre></td></tr></table></figure>

<ul>
<li>先判断存不存在，再删除</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> 表名</span><br></pre></td></tr></table></figure>



<h4 id="4-修改表"><a href="#4-修改表" class="headerlink" title="4.修改表"></a>4.<font color='#d15252'>修改表</font></h4><ul>
<li>修改表名</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">rename <span class="keyword">table</span> 表名 <span class="keyword">TO</span> 新表名</span><br></pre></td></tr></table></figure>

<ul>
<li>修改字符集</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="type">character</span> <span class="keyword">set</span> 字符集</span><br></pre></td></tr></table></figure>

<ul>
<li>添加列</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 列名 数据类型</span><br></pre></td></tr></table></figure>

<ul>
<li> 修改列名</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 change 旧列名 新列名 新数据类型</span><br></pre></td></tr></table></figure>

<ul>
<li>修改数据类型和长度</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 MODIFY 字段名 新数据类型</span><br></pre></td></tr></table></figure>

<ul>
<li>删除字段</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表民 <span class="keyword">DROP</span> 字段名</span><br></pre></td></tr></table></figure>



<h3 id="九、DML操作（SQL语句的更新操作）"><a href="#九、DML操作（SQL语句的更新操作）" class="headerlink" title="九、DML操作（SQL语句的更新操作）"></a>九、DML操作（SQL语句的更新操作）</h3><h4 id="1-添加数据"><a href="#1-添加数据" class="headerlink" title="1.添加数据"></a>1.添加数据</h4><ul>
<li><p>第一种</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(字段名,字段..) <span class="keyword">values</span> (数值，数值,...)</span><br></pre></td></tr></table></figure>

<ul>
<li>如果时字符串类型，需要用 ‘ ‘ 括起来</li>
</ul>
</li>
<li><p>第二种</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">value</span> (数值，数值,...)</span><br></pre></td></tr></table></figure>

<ul>
<li>可以不写字段，但是每一个数值需要对应相应的字段</li>
</ul>
</li>
<li><p>第三种</p>
<ul>
<li>指定列添加</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(字段) <span class="keyword">VALUE</span> (数值)</span><br></pre></td></tr></table></figure>

</li>
<li><p>注意</p>
<ul>
<li>给所有的字段添加时使用VALUES</li>
<li>字段名称和要添加的数据一一对应</li>
<li>字符串必须使用单引号和双引号包裹</li>
<li>不给字段添加数据时，可以不写，也可以写NULL</li>
</ul>
</li>
</ul>
<h4 id="2-修改数据"><a href="#2-修改数据" class="headerlink" title="2.修改数据"></a>2.修改数据</h4><ul>
<li>更改指定列的所有值</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">update 表名 <span class="keyword">SET</span> 字段名 <span class="operator">=</span> 数值</span><br></pre></td></tr></table></figure>

<ul>
<li>指定条件修改</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">update 表名 <span class="keyword">SET</span> 字段名 <span class="operator">=</span> 数值 <span class="keyword">WHERE</span> 指定字段 <span class="operator">=</span> 数值；</span><br></pre></td></tr></table></figure>

<ul>
<li>修改多个字段<ul>
<li>多个 字段名=数值 之间加 ，</li>
</ul>
</li>
</ul>
<h4 id="3-删除数据"><a href="#3-删除数据" class="headerlink" title="3.删除数据"></a>3.删除数据</h4><ul>
<li>删除指定数据</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 指定字段 <span class="operator">=</span> 数值;</span><br></pre></td></tr></table></figure>

<ul>
<li>删除所有（不推荐，效率低）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from 表名 </span><br></pre></td></tr></table></figure>

<ul>
<li>删除所有（推荐，效率高）<ul>
<li>先删除整张表，再新建一个一模一样的表</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> 表名 </span><br></pre></td></tr></table></figure>



<h3 id="十、DQL（查询）"><a href="#十、DQL（查询）" class="headerlink" title="十、DQL（查询）"></a>十、DQL（查询）</h3><h4 id="1-简单查询"><a href="#1-简单查询" class="headerlink" title="1.简单查询"></a>1.简单查询</h4><ul>
<li>显示所有的字段</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名 </span><br></pre></td></tr></table></figure>

<ul>
<li>只显示指定字段</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段名,字段名 <span class="keyword">from</span> 表名</span><br></pre></td></tr></table></figure>

<ul>
<li><font color='#d15252'>起别名AS的用法</font><ul>
<li>表和字段都可以起别名</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段名 <span class="keyword">AS</span> 别名,</span><br><span class="line">		字段名 <span class="keyword">AS</span> 别名</span><br><span class="line">		<span class="keyword">FROM</span> 表名 </span><br></pre></td></tr></table></figure>



<h4 id="2-其他查询"><a href="#2-其他查询" class="headerlink" title="2.其他查询"></a>2.其他查询</h4><ul>
<li>去重<ul>
<li>不显示重复数据</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> 字段名 <span class="keyword">from</span> 表名</span><br></pre></td></tr></table></figure>

<ul>
<li>条件查询</li>
</ul>
<table>
<thead>
<tr>
<th>运算符</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>&gt; , &lt; , = , &gt;= ,&lt; = , !=</td>
<td>大于小于….</td>
</tr>
<tr>
<td>between x and x</td>
<td>在.x…x之间</td>
</tr>
<tr>
<td>IN（集合）</td>
<td>集合表示多个值 in中的每一个数据都会作为一次条件，只要满足该条件就会显示</td>
</tr>
<tr>
<td>like ‘%网%’</td>
<td>模糊查询</td>
</tr>
<tr>
<td>is null</td>
<td>查询某一个列上为 null 的值</td>
</tr>
</tbody></table>
<p><img src="https://i.loli.net/2021/09/17/boVMW71H8rivnzc.png" alt="image-20210917174204954"></p>
<h4 id="3-模糊查询"><a href="#3-模糊查询" class="headerlink" title="3.模糊查询"></a>3.模糊查询</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">通配符</span><br><span class="line"><span class="operator">%</span> : 任意的多个</span><br><span class="line">— ：一个</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/09/17/JSulW96dzwmEj14.png" alt="image-20210917174441435"></p>
<h4 id="4-逻辑运算符"><a href="#4-逻辑运算符" class="headerlink" title="4.逻辑运算符"></a>4.逻辑运算符</h4><table>
<thead>
<tr>
<th>逻辑运算符</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>AND &amp;</td>
<td>与</td>
</tr>
<tr>
<td>OR ||</td>
<td>或</td>
</tr>
<tr>
<td>NOT</td>
<td>取反</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>数组</title>
    <url>/2021/08/25/%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h3 id="一、数组"><a href="#一、数组" class="headerlink" title="一、数组"></a>一、数组</h3><h4 id="1-什么是数组"><a href="#1-什么是数组" class="headerlink" title="1.什么是数组"></a>1.什么是数组</h4><ul>
<li>概念：数组是存储多个变量的容器（数据类型要一致）<ul>
<li>数组可以存储基本数据类型也可以存储引用数据类型</li>
</ul>
</li>
</ul>
<h4 id="2-定义数组"><a href="#2-定义数组" class="headerlink" title="2.定义数组"></a>2.定义数组</h4><ul>
<li><p>第一种格式：</p>
<ul>
<li><p>数据类型 数组名[] ；</p>
<p>例：<code>int arr1[]</code>；</p>
</li>
</ul>
</li>
<li><p>第二种格式：</p>
<ul>
<li><p>数据类型[] 数组名</p>
<p>例：<code>int[] arr2</code>;</p>
</li>
</ul>
</li>
</ul>
<h4 id="3-数组的定义和初始化格式"><a href="#3-数组的定义和初始化格式" class="headerlink" title="3.数组的定义和初始化格式"></a>3.数组的定义和初始化格式</h4><h5 id="①-概念："><a href="#①-概念：" class="headerlink" title="① 概念："></a>① 概念：</h5><ul>
<li>从内存的原来看，数组是一组存储变量的容器<ul>
<li>并且内存中，堆内存是空闲的，所以我们可以在堆内存中定义一个数组存储数据<ul>
<li>要想在堆内存中创建数组，必须要将Cpu的执行权由栈区交给堆区<font color='#d15252'>（new）</font>关键字</li>
</ul>
</li>
<li>在堆区中，开辟内存的目的是数据，而开辟内存空间，就需要用到数组类型</li>
</ul>
</li>
<li>以上两步可知，在堆区创建数组  <code>new int[];</code></li>
<li>创建数组后，需要在栈区创建一个变量，存储堆区数组的地址值，用来使用数组</li>
</ul>
<h5 id="②动态初始化：只指定长度，初始值默认"><a href="#②动态初始化：只指定长度，初始值默认" class="headerlink" title="②动态初始化：只指定长度，初始值默认"></a>②<font color='#d15252'>动态初始化</font>：只指定长度，初始值默认</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据类型[] 数组名 = <span class="keyword">new</span> <span class="keyword">int</span>[数组长度]；</span><br><span class="line"></span><br><span class="line">例：<span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure>

<ul>
<li>系统初始默认值，int是0 ，String是null</li>
</ul>
<h5 id="③静态初始化：指定初始值，系统默认长度"><a href="#③静态初始化：指定初始值，系统默认长度" class="headerlink" title="③静态初始化：指定初始值，系统默认长度"></a>③静态初始化：指定初始值，系统默认长度</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据类型[] 数组名 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br></pre></td></tr></table></figure>



<h4 id="4-数组的数据操作"><a href="#4-数组的数据操作" class="headerlink" title="4.数组的数据操作"></a>4.数组的数据操作</h4><h5 id="Ⅰ-赋值操作"><a href="#Ⅰ-赋值操作" class="headerlink" title="Ⅰ.赋值操作"></a>Ⅰ.赋值操作</h5><ul>
<li><code>数组名[索引] = 数组；</code></li>
</ul>
<h5 id="Ⅱ-取值操作"><a href="#Ⅱ-取值操作" class="headerlink" title="Ⅱ.取值操作"></a>Ⅱ.取值操作</h5><p>通过数组自带的索引取值</p>
<ul>
<li>直接取值<ul>
<li>直接打印到控制台，比较方便，但无法对数据继续进行操作</li>
</ul>
</li>
<li><font color='#d15252'>赋值取值</font><ul>
<li>创建一个变量保存数据<ul>
<li><code>变量名 = 数组名[索引]</code></li>
<li>比较繁琐，但可以对数据进行多次操作</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="Ⅲ-数组的特性"><a href="#Ⅲ-数组的特性" class="headerlink" title="Ⅲ.数组的特性"></a>Ⅲ.数组的特性</h5><ul>
<li>length表示数组的长度<ul>
<li><code>arr.length    </code></li>
</ul>
</li>
</ul>
<h5 id="Ⅳ-练习"><a href="#Ⅳ-练习" class="headerlink" title="Ⅳ.练习"></a>Ⅳ.练习</h5><ul>
<li>数组中存5个整数，求和，以及求平均数</li>
<li>数组中存5个数，找出最大、最小的两个数</li>
<li>冒泡排序：从第一个数开始，依次和后一个数比较，小的放前，大的放后</li>
</ul>
<h5 id="Ⅴ-数组常见异常"><a href="#Ⅴ-数组常见异常" class="headerlink" title="Ⅴ.数组常见异常"></a>Ⅴ.数组常见异常</h5><ul>
<li><p>索引超出范围，索引越界</p>
<ul>
<li><code> java.lang.ArrayIndexOutOfBoundsException:</code></li>
</ul>
</li>
<li><p>空指针异常</p>
<ul>
<li><code>java.lang.NullPointerException</code></li>
</ul>
</li>
</ul>
<h3 id="二、二维数组"><a href="#二、二维数组" class="headerlink" title="二、二维数组"></a>二、二维数组</h3><h4 id="1-二维数组的概念"><a href="#1-二维数组的概念" class="headerlink" title="1.二维数组的概念"></a>1.二维数组的概念</h4><ul>
<li>二维数组就是一个元素为一维数组的数组</li>
</ul>
<h4 id="2-二维数组的定义格式"><a href="#2-二维数组的定义格式" class="headerlink" title="2.二维数组的定义格式"></a>2.二维数组的定义格式</h4><h5 id="①动态初始化"><a href="#①动态初始化" class="headerlink" title="①动态初始化"></a>①动态初始化</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据类型[][] 变量名 = <span class="keyword">new</span> 数据类型[m][n];</span><br></pre></td></tr></table></figure>

<blockquote>
<p>arr[m] [n] 表示第m+1个一维数组的第n+1个数</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据类型[][] 变量名 = <span class="keyword">new</span> 数据类型[m][];</span><br></pre></td></tr></table></figure>

<blockquote>
<p>没有给出一维数组的元素个数，可以动态给出</p>
</blockquote>
<h5 id="②静态初始化"><a href="#②静态初始化" class="headerlink" title="②静态初始化"></a>②静态初始化</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据类型[][] 变量名 = <span class="keyword">new</span> 数据类型[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;......&#125;;</span><br><span class="line"></span><br><span class="line">简化：</span><br><span class="line">    数据类型[][] 变量名 = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;...&#125;;</span><br><span class="line">例如：<span class="keyword">int</span>[][] arr = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">6</span>&#125;&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-二维数组的数据操作"><a href="#3-二维数组的数据操作" class="headerlink" title="3.二维数组的数据操作"></a>3.二维数组的数据操作</h4><h5 id="Ⅰ-取数据"><a href="#Ⅰ-取数据" class="headerlink" title="Ⅰ.取数据"></a>Ⅰ.取数据</h5><ul>
<li><p>直接取出</p>
<ul>
<li>用双层嵌套循环，第一层循环取出一维数组，第二层循环取出一维数组里的数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个二维数组</span></span><br><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line"><span class="comment">//外层循环取出一位数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">    <span class="comment">//内存循环遍历一维数组</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;arr[i].length;j++)&#123;</span><br><span class="line">		System.out.println(arr[i][j]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>赋值取</p>
<ul>
<li><code>int a = arr[0][1];</code>取出第一个一维数组的第二个数</li>
</ul>
</li>
</ul>
<h5 id="②赋值"><a href="#②赋值" class="headerlink" title="②赋值"></a>②赋值</h5><ul>
<li>格式：<code>变量名[索引第几个数组][索引第几个数] = 数据</code></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>二维数组</tag>
      </tags>
  </entry>
  <entry>
    <title>数组实现数据增查删改和数据库操作</title>
    <url>/2021/08/25/%E6%95%B0%E7%BB%84%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E5%A2%9E%E6%9F%A5%E5%88%A0%E6%94%B9%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="一、综合案例：实现商品菜单，数据增查删改"><a href="#一、综合案例：实现商品菜单，数据增查删改" class="headerlink" title="一、综合案例：实现商品菜单，数据增查删改"></a>一、综合案例：实现商品菜单，数据增查删改</h3><h5 id="1-创建工程，测试环境"><a href="#1-创建工程，测试环境" class="headerlink" title="1.创建工程，测试环境"></a>1.创建工程，测试环境</h5><h5 id="2-前奏：实现数据的加载"><a href="#2-前奏：实现数据的加载" class="headerlink" title="2.前奏：实现数据的加载"></a>2.前奏：实现数据的加载</h5><ul>
<li>变量 数组 集合 数据库 （暂时用数组）<ul>
<li>数据类型[] 变量名 = new 数据类型[空间长度]</li>
</ul>
</li>
</ul>
<h5 id="3-需求分析："><a href="#3-需求分析：" class="headerlink" title="3.需求分析："></a>3.需求分析：</h5><ul>
<li><p>菜单：6条输出语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;1.查看商品编号&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;2.修改商品编号&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;3.增加商品编号&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;4.删除商品编号&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;5.退出&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;6.请您选择1---5&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>实现交互：即键盘录入数据，使用Scanner三个步骤</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> a = sc.nextInt();</span><br></pre></td></tr></table></figure></li>
<li><p>实现菜单可以重复选择：利用for或者while死循环</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">for</span><span class="params">(;;)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="title">while</span><span class="params">(true)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>实现菜单的选择：使用if判断语句，判断录入的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(a==<span class="number">1</span>)&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;实现查看功能&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="number">2</span>)&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;实现修改功能&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="number">3</span>)&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;实现增加功能&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="number">4</span>)&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;实现删除功能&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="number">5</span>)&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;退出&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>实现查看功能：for循环实现遍历数组、if判断不是0再输出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;	</span><br><span class="line">	<span class="keyword">if</span> (arr[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;商品的编号:&quot;</span>+arr[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>实现修改功能：用for循环查看数组，if判断选择要修改的数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">	<span class="keyword">if</span> (arr[i]==b)&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;请输入修改后的编号&quot;</span>);</span><br><span class="line">		arr[i]=sc.nextInt();</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>实现增加功能：用for+if，将录入数据增加到0上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;请输入要增加的商品编号&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> x = sc.nextInt();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">	<span class="keyword">if</span> (arr[i]==<span class="number">0</span>)&#123;</span><br><span class="line">		arr[i]=x;</span><br><span class="line">		i = arr.length; <span class="comment">//跳出循环</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>实现删除功能：用for+if，匹配和录入数据相同的索引，更改值为0</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;请输入要删除的商品编号&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> g = sc.nextInt();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span> (arr[i]==g)&#123;</span><br><span class="line">			arr[i]=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h4 id="4-代码："><a href="#4-代码：" class="headerlink" title="4.代码："></a>4.代码：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建工程并测试环境</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">	</span>&#123;	</span><br><span class="line">		<span class="comment">//实现交互效果，需要键盘录入数据</span></span><br><span class="line">		<span class="comment">//键盘录入数据三步，导包，加载进内存，保存录入数据</span></span><br><span class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="comment">//定义布尔类型变量，控制循环结束</span></span><br><span class="line">		<span class="keyword">boolean</span> f =<span class="keyword">true</span>;</span><br><span class="line">		<span class="comment">//数据加载</span></span><br><span class="line">		<span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">		arr[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">		arr[<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line">		arr[<span class="number">2</span>]=<span class="number">3</span>;</span><br><span class="line">		<span class="comment">//实现可以重复选择菜单</span></span><br><span class="line">		<span class="keyword">for</span> (;f; )</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> j =<span class="number">0</span>;</span><br><span class="line">		<span class="comment">//需求分析：菜单页面即输出语句</span></span><br><span class="line">		System.out.println(<span class="string">&quot;====================&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;|| 1.查看商品编号 ||&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;|| 2.修改商品编号 ||&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;|| 3.增加商品编号 ||&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;|| 4.删除商品编号 ||&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;|| 5.退出系统     ||&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;|| (请您选择1-5)  ||&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;====================&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> a = sc.nextInt();</span><br><span class="line">		<span class="comment">//实现菜单的选择</span></span><br><span class="line">		<span class="keyword">if</span> (a==<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="comment">//循环输出遍历数组</span></span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)</span><br><span class="line">				&#123;	<span class="comment">//if语句判断不是0再输出</span></span><br><span class="line">					<span class="keyword">if</span> (arr[i]!=<span class="number">0</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						System.out.println(<span class="string">&quot;商品的编号:&quot;</span>+arr[i]);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				System.out.println(<span class="string">&quot;===查看成功===&quot;</span>);</span><br><span class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="number">2</span>)&#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;请输入要修改的商品编号&quot;</span>);</span><br><span class="line">				<span class="keyword">int</span> b = sc.nextInt();</span><br><span class="line">				<span class="comment">//for+if判断并选择到需要修改的数据</span></span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (arr[i]==b)</span><br><span class="line">					&#123;</span><br><span class="line">						System.out.println(<span class="string">&quot;请输入修改后的编号&quot;</span>);</span><br><span class="line">						arr[i]=sc.nextInt();</span><br><span class="line">						i = arr.length;</span><br><span class="line">					&#125;<span class="keyword">else</span> <span class="keyword">if</span> (arr[i]!=b)</span><br><span class="line">					&#123;</span><br><span class="line">						j++;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (arr.length==j)</span><br><span class="line">					&#123;</span><br><span class="line">						System.out.println(<span class="string">&quot;您要修改的编号不存在&quot;</span>);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="number">3</span>)&#123;</span><br><span class="line">				<span class="comment">//实现增加功能</span></span><br><span class="line">				System.out.println(<span class="string">&quot;请输入要增加的商品编号&quot;</span>);</span><br><span class="line">				<span class="keyword">int</span> x = sc.nextInt();</span><br><span class="line">				<span class="comment">//for+if查询判断，将录入数据加载到0上</span></span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="comment">//判断如果商品编号已存在，提示添加失败，跳出循环</span></span><br><span class="line">					<span class="keyword">if</span> (arr[i]==x)</span><br><span class="line">					&#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;您输入的商品编号已存在&quot;</span>);</span><br><span class="line">					i=arr.length;<span class="comment">//跳出循环</span></span><br><span class="line">					&#125;<span class="keyword">else</span> <span class="keyword">if</span> (arr[i]==<span class="number">0</span>)   <span class="comment">//如果不存在，判断为0的数据，添加</span></span><br><span class="line">						&#123;</span><br><span class="line">							arr[i]=x;</span><br><span class="line">							i = arr.length; <span class="comment">//跳出循环</span></span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="number">4</span>)&#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;请输入要删除的商品编号&quot;</span>);</span><br><span class="line">				<span class="keyword">int</span> g = sc.nextInt();</span><br><span class="line">				<span class="comment">//实现删除功能</span></span><br><span class="line">				<span class="comment">//for+if判断</span></span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (arr[i]==g)</span><br><span class="line">					&#123;</span><br><span class="line">						arr[i]=<span class="number">0</span>;</span><br><span class="line">						System.out.println(<span class="string">&quot;===删除成功===&quot;</span>);</span><br><span class="line">						i =arr.length;<span class="comment">//跳出循环</span></span><br><span class="line">					&#125;<span class="keyword">else</span> <span class="keyword">if</span>(arr[i]!=g)&#123;</span><br><span class="line">						j++;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (arr.length==j)</span><br><span class="line">					&#123;</span><br><span class="line">						System.out.println(<span class="string">&quot;你要删除的商品编号不存在&quot;</span>);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="number">5</span>)&#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;您已成功退出&quot;</span>);</span><br><span class="line">				f = <span class="keyword">false</span>;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;===输入错误，请选择1-5===&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="二、使用数据库-Mysql"><a href="#二、使用数据库-Mysql" class="headerlink" title="二、使用数据库(Mysql)"></a>二、使用数据库(Mysql)</h3><h4 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1. 创建数据库"></a>1. 创建数据库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database 数据库名称</span><br></pre></td></tr></table></figure>


<h4 id="2-创建表格"><a href="#2-创建表格" class="headerlink" title="2. 创建表格"></a>2. 创建表格</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">	列名 数据类型,</span><br><span class="line">	列名 数据类型,</span><br><span class="line">    ....</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="3-插入数据"><a href="#3-插入数据" class="headerlink" title="3. 插入数据"></a>3. 插入数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into 表名 (列名,...) values(数据,数据);</span><br></pre></td></tr></table></figure>

<h4 id="4-更新数据"><a href="#4-更新数据" class="headerlink" title="4.更新数据"></a>4.更新数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">updata 表名 set 字段 = 数值;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update 表名 set 字段 = 数值 WHERE 字段=数值（选择）;</span><br></pre></td></tr></table></figure>

<h4 id="5-删除数据"><a href="#5-删除数据" class="headerlink" title="5.删除数据"></a>5.删除数据</h4><ul>
<li><p>删除全部数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Delete From 表名;</span><br></pre></td></tr></table></figure></li>
<li><p>删除指定数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Delete From 表名 WHERE 字段 = 数值;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="6-查询数据"><a href="#6-查询数据" class="headerlink" title="6.查询数据"></a>6.查询数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM 表名</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>增查删改</tag>
        <tag>案例</tag>
        <tag>数据库</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>整合jpa/Swagger/JDBCTemplate</title>
    <url>/2021/10/26/%E6%95%B4%E5%90%88jpa-Swagger-JDBCTemplate/</url>
    <content><![CDATA[<h2 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h2><h3 id="一、Result风格"><a href="#一、Result风格" class="headerlink" title="一、Result风格"></a>一、Result风格</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h4><ul>
<li> RESTFUL是一种网络应用程序的设计风格和开发方式</li>
<li>它是一组客户端和服务器交互的架构理念和设计原则<ul>
<li>它能基于接口实现简洁有层次的访问</li>
</ul>
</li>
</ul>
<h4 id="2-使用对比"><a href="#2-使用对比" class="headerlink" title="2.使用对比"></a>2.使用对比</h4><ul>
<li><p>以前：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>localhost:<span class="number">8080</span><span class="regexp">/项目名/</span>xxx.action?id=<span class="number">1</span>&amp;age=<span class="number">28</span>&amp;name=小明</span><br></pre></td></tr></table></figure></li>
<li><p>学完rest之后 ：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>localhost:<span class="number">8080</span><span class="regexp">/项目名/</span>xxx.action<span class="regexp">/1/</span><span class="number">28</span>/小明</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="3-SpringBoot开发rest"><a href="#3-SpringBoot开发rest" class="headerlink" title="3.SpringBoot开发rest"></a>3.SpringBoot开发rest</h4><ul>
<li><p>首先要学习注解</p>
<ul>
<li> <font color='#d15252'>@PathVariable </font>可以获取url中的数据,它是rest中最主要的注解         </li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@PostMapping</span>  接收处理post请求</span><br><span class="line"></span><br><span class="line">	 <span class="variable">@DeleteMapping</span> 接收delete请求，可以使用GetMapping注解进行替换</span><br><span class="line">	 </span><br><span class="line">	 <span class="variable">@PutMapping</span>  接收put请求，我们可以使用PostMapping进行替换</span><br><span class="line">	 </span><br><span class="line">	 <span class="variable">@GetMapping</span> 接收get方式的请求</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="4-rest的优势"><a href="#4-rest的优势" class="headerlink" title="4.rest的优势"></a>4.rest的优势</h4><ul>
<li>轻量级的基于http协议的,可以进行 get/post/put/delete 的crud操作</li>
<li>面向资源，一目了然</li>
<li>描述非常简单，可以配合xml和json进行数据传输   </li>
<li>无状态的协议,我们在调用接口.无需要管理状态，降低了复杂度</li>
<li>简单、低耦合</li>
</ul>
<p>2.3 案例操作<br>   参见录像</p>
<h3 id="二、SpringBoot整合jpa"><a href="#二、SpringBoot整合jpa" class="headerlink" title="二、SpringBoot整合jpa"></a>二、SpringBoot整合jpa</h3><h4 id="1-jpa的概念"><a href="#1-jpa的概念" class="headerlink" title="1.jpa的概念"></a>1.jpa的概念</h4><ul>
<li>JPA是Java Persistence API的简称，中文名Java持久层API<ul>
<li>是JDK5.0注解或XML描述对象-关系表的映射关系，并将运行期的实体对象持久化到数据库中</li>
</ul>
</li>
</ul>
<h4 id="2-步骤"><a href="#2-步骤" class="headerlink" title="2.步骤"></a>2.步骤</h4><ul>
<li><p>添加JPA依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        jpa依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在application.properties配置文件中，添加jpa配置属性</p>
<p><img src="https://i.loli.net/2021/10/26/xzY3ZHqXkhiNpeS.png" alt="image-20211026125646091"></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#jpa的配置            </span></span><br><span class="line"><span class="comment">#如果是create，会帮你新建数据库表，每次运行重新新建一个</span></span><br><span class="line"><span class="meta">spring.jpa.hibernate.ddl-auto</span>=<span class="string">update</span></span><br><span class="line"><span class="comment">#显示sql语句</span></span><br><span class="line"><span class="meta">spring.jpa.show-sql</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#格式化sql语句</span></span><br><span class="line"><span class="meta">spring.jpa.properties.hibernate.format_sql</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建entity（JavaBean类），生成数据表</p>
<p><img src="https://i.loli.net/2021/10/26/XOfC759AaqBmKIy.png" alt="image-20211026130251675"></p>
<ul>
<li>使用@Entity注解</li>
<li>使用@Table注解<ul>
<li>生成表，name属性 = 表名</li>
</ul>
</li>
<li>使用@Id注解<ul>
<li>主键</li>
</ul>
</li>
<li>使用GeneratedValue注解<ul>
<li>主键生成的策略（Mysql、Orlce）</li>
</ul>
</li>
</ul>
</li>
<li><p>创建mapper层接口，继承<font color='#d15252'>JpaRepository&lt;Users,Integer&gt;</font></p>
<ul>
<li>有封装好的各种增查删改方法，不需要手动写</li>
</ul>
<p><img src="https://i.loli.net/2021/10/26/W1fO2Dc6QMbKUim.png" alt="image-20211026125347505"></p>
</li>
<li><p>创建Service层，注入一个mapper层接口的成员变量，通过调用方法，实现不同的功能</p>
<ul>
<li>使用@Service注解</li>
</ul>
<p><img src="https://i.loli.net/2021/10/26/dkKgvE9eyRs7oDA.png" alt="image-20211026125443066"></p>
</li>
<li><p>创建Controller层，注入一个usersService层接口对象，调用方法</p>
<ul>
<li>使用@RestController注解</li>
</ul>
<p><img src="https://i.loli.net/2021/10/26/2mRoiCHr6azg7sN.png" alt="image-20211026125557237"></p>
</li>
</ul>
<h3 id="三、SpringBoot整合Swagger"><a href="#三、SpringBoot整合Swagger" class="headerlink" title="三、SpringBoot整合Swagger"></a>三、SpringBoot整合Swagger</h3><h4 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1.概念"></a>1.概念</h4><ul>
<li><p>实现前后端分离</p>
<ul>
<li><p>前端和后端人员沟通的工具</p>
</li>
<li><p>为了节约沟通成本，我们使用swagger</p>
</li>
<li><p>生成各种格式的接口文档</p>
</li>
</ul>
</li>
</ul>
<p><a href="https://blog.csdn.net/u012702547/article/details/88775298">SpringBoot整合Swagger2，再也不用维护接口文档了！_江南一点雨的专栏-CSDN博客</a></p>
<h4 id="2-实现步骤"><a href="#2-实现步骤" class="headerlink" title="2.实现步骤"></a>2.实现步骤</h4><ul>
<li><p>创建springboot项目，添加swagger依赖</p>
<p><img src="https://i.loli.net/2021/10/26/bQBxhMjmcVC8Nsk.png" alt="image-20211026133816296"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置application.properties</p>
<p><img src="https://i.loli.net/2021/10/26/48dypgRaLxQvKZN.png" alt="image-20211026140250726"></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="number">8090</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=/bootandswagger</span><br></pre></td></tr></table></figure></li>
<li><p>配置特殊类</p>
<ul>
<li>首先通过@EnableSwagger2注解启用Swagger2</li>
<li>然后配置一个Docket Bean，这个Bean中，配置映射路径和要扫描的接口的位置</li>
<li>在apiInfo中，主要配置一下Swagger2文档网站的信息，例如网站的title，网站的描述，联系人的信息，使用的协议等等。</li>
</ul>
<p><img src="https://i.loli.net/2021/10/26/IDPnZfXwbcEH9zm.png" alt="image-20211026135256898"></p>
</li>
<li><p>创建entity层</p>
<p><img src="https://i.loli.net/2021/10/26/eJT2k1UZhEoq6fN.png" alt="image-20211026135531688"></p>
</li>
<li><p>创建Controller层</p>
<p><img src="https://i.loli.net/2021/10/26/dsUaHeS2i3LbR6O.png" alt="image-20211026140023937"></p>
<p><img src="https://i.loli.net/2021/10/26/UA2nBbKdjm6etYi.png" alt="image-20211026140144184"></p>
</li>
<li><p>最终访问swagger的地址</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>localhost:端口号<span class="regexp">/项目名/</span>swagger-ui.html</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="3-各种注解的解释"><a href="#3-各种注解的解释" class="headerlink" title="3.各种注解的解释"></a>3.各种注解的解释</h4><p>@Api</p>
<ul>
<li>可以用来标记当前Controller的功能</li>
</ul>
<p>@ApiOperation</p>
<ul>
<li>用来标记一个方法的作用</li>
</ul>
<p>@ApilmplicitParam</p>
<ul>
<li><p>用来描述一个参数，可以配置参数的中文含义，也可以给参数设置默认值，这样可以避免手动输入</p>
</li>
<li><p>如果有多个参数，则需要使用多个@ApiImplicitParam注解来描述，多个@ApiImplicitParam注解需要放在一个@ApiImplicitParams注解中</p>
</li>
</ul>
<h3 id="四、SpringBoot整合持久层-JDBCTemplate"><a href="#四、SpringBoot整合持久层-JDBCTemplate" class="headerlink" title="四、SpringBoot整合持久层 JDBCTemplate"></a>四、SpringBoot整合持久层 JDBCTemplate</h3><ul>
<li>SpringBoot整合持久层 （Mybatis、JPA 、 JDBCTemplate）</li>
</ul>
<h4 id="1-实现步骤"><a href="#1-实现步骤" class="headerlink" title="1.实现步骤"></a>1.实现步骤</h4><ul>
<li><p>添加依赖</p>
<ul>
<li>mysql依赖添加版本号</li>
</ul>
<p><img src="https://i.loli.net/2021/10/26/CUw96Sd4y3cA7Fn.png" alt="image-20211026151152327"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span>        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置application.properties</p>
<p><img src="https://i.loli.net/2021/10/26/ThUNq4fczGtIpnB.png" alt="image-20211026151420837"></p>
</li>
<li><p>创建Dao层</p>
<p><img src="https://i.loli.net/2021/10/26/1wu9B6mYHOEhMZr.png" alt="image-20211026151942245"></p>
<p><img src="https://i.loli.net/2021/10/26/PMzYWLNuAI8EfGb.png" alt="image-20211026152118544"></p>
</li>
<li><p>创建service层</p>
<p><img src="https://i.loli.net/2021/10/26/ig2xKUvc9pCurOs.png" alt="image-20211026165300830"></p>
</li>
<li><p>创建Controller层</p>
<p><img src="https://i.loli.net/2021/10/26/G5LWxkZURbhr2a9.png" alt="image-20211026165310961"></p>
</li>
</ul>
<h4 id="2-配置热部署"><a href="#2-配置热部署" class="headerlink" title="2.配置热部署"></a>2.配置热部署</h4><ul>
<li><p>修改代码不需要重新启动项目</p>
<ul>
<li>项目处于运行状态</li>
</ul>
</li>
<li><p>添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/10/26/trAjWDhle6qNYXP.png" alt="image-20211026161944832"></p>
</li>
<li><p>在application.properties中设置热部署开关</p>
<ul>
<li>也可以不设置</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/10/26/5ygP7qOjwzWom9S.png" alt="image-20211026155811325"></p>
<p><img src="https://i.loli.net/2021/10/26/qAnHlZYIxL5CNB4.png" alt="image-20211026160027063"></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Jpa</tag>
        <tag>Swagger</tag>
        <tag>JDBCTemplate</tag>
      </tags>
  </entry>
  <entry>
    <title>方法</title>
    <url>/2021/08/25/%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h3 id="一、方法-函数"><a href="#一、方法-函数" class="headerlink" title="一、方法(函数)"></a>一、<font color='#d15252'>方法</font>(函数)</h3><h4 id="1-什么是方法"><a href="#1-什么是方法" class="headerlink" title="1.什么是方法"></a>1.什么是方法</h4><ul>
<li>就是对业务的一种封装，完成指定业务功能的代码块<ul>
<li>封装：就是业务的容器</li>
</ul>
</li>
<li>编程理论到实际</li>
</ul>
<h4 id="2-如何定义方法"><a href="#2-如何定义方法" class="headerlink" title="2.如何定义方法"></a>2.如何定义方法</h4><ul>
<li><p>位置：方法与方法之间是一种并列关系</p>
</li>
<li><p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">a:方法名</span><br><span class="line"><span class="keyword">public</span>、<span class="keyword">static</span>：修饰符</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 返回值类型 方法名（参数类型 参数名,...）&#123;</span><br><span class="line">	方法体；</span><br><span class="line">	<span class="keyword">return</span>返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>[^修饰符]: 暂时先用public static </p>
</li>
</ul>
<ul>
<li><p>[^实际参数]: 实际参与运算的</p>
</li>
<li><p>[^形式参数]: 就是方法定义上的，用于接收实际参数</p>
</li>
</ul>
<p>  [^return]: <font color='#d15252'>结束方法，并带回返回值给调用者</font></p>
<ul>
<li><p>参数传递过程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据的角度来看</span><br><span class="line">	-----&gt;方法和方法之间是相互独立的</span><br><span class="line">	A();---B();</span><br><span class="line">	-----&gt;在调用方法时，A方法传递数值,B方法接收数值</span><br><span class="line">	-----&gt;所以在定义B方法时，就需要将内存空间开辟好（参数类型 参数名）</span><br><span class="line">    (参数就是变量)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="3-方法的注意事项"><a href="#3-方法的注意事项" class="headerlink" title="3.方法的注意事项"></a>3.方法的<font color='#d15252'>注意事项</font></h4><ul>
<li>要写一个方法，首先明确返回值类型，参数列表</li>
<li>方法不调用不执行</li>
<li>方法之间是平级关系，不能嵌套</li>
<li>方法定义参数时，用“，”隔开</li>
</ul>
<h4 id="4-方法的调用"><a href="#4-方法的调用" class="headerlink" title="4.方法的调用"></a>4.方法的<font color='#d15252'>调用</font></h4><ul>
<li>直接调用：<code>方法名();</code><ul>
<li>最方便，没有返回值</li>
</ul>
</li>
<li>输出调用：<code>System.out.println(方法名());</code><ul>
<li>想要第一时间看到方法计算结果时(不推荐，因为不一定要将结果输出)<ul>
<li>void方法不能用</li>
</ul>
</li>
</ul>
</li>
<li>赋值调用：<code>int a = add();</code><ul>
<li>void方法不能用</li>
<li>比较繁琐，但是最灵活</li>
</ul>
</li>
</ul>
<h4 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h4><ul>
<li>当我们在定义方法时，如果最终的结果值，是直接输出的，返回值是void </li>
</ul>
<h4 id="6-练习"><a href="#6-练习" class="headerlink" title="6.练习"></a>6.练习</h4><ul>
<li><p>1.计算所有三位数水仙花数</p>
<ul>
<li><p>创建项目，测试环境</p>
</li>
<li><p>需求分析：</p>
<ul>
<li>定义一个方法完成计算水仙花的业务</li>
</ul>
</li>
<li><p>定义方法：</p>
<ul>
<li>方法位置并列</li>
<li>修饰符：public static</li>
<li>返回值类型：由最后代码可知，水仙花数是直接输出的，所以不需要返回值，返回值类型是void</li>
<li>方法名：shui();</li>
</ul>
</li>
<li><p>方法中完成计算水仙花数</p>
<ul>
<li>for循环遍历所有三位数</li>
<li>定义三个变量，分别取模，取出个位十位百位</li>
<li>if循环判断，三个变量的三次方相加是否等于i</li>
<li>如果判断成功，直接输出</li>
</ul>
</li>
<li><p>main方法中，直接调用shui();方法</p>
<ul>
<li><p>输出调用（有返回值时）    </p>
</li>
<li><p>赋值调用（有返回值，需要重复使用时）</p>
<hr>
</li>
</ul>
</li>
</ul>
</li>
<li><p>2.键盘录入3个数，比较大小，输出最大的那个数</p>
<ul>
<li><p>创建项目，测试环境</p>
</li>
<li><p>需求分析</p>
<ul>
<li>定义一个方法，实现业务完成录入数据，比较大小，返回值或直接输出</li>
</ul>
</li>
<li><p>定义方法</p>
<ul>
<li>方法位置并列</li>
<li>修饰符：public static </li>
<li>返回值类型：由最后代码决定<ul>
<li>如果直接输出，则返回值用void</li>
<li>如果return返回值，则在main方法中输出调用，或赋值调用，返回值类型为int</li>
</ul>
</li>
<li>方法名：demo();</li>
</ul>
</li>
<li><p>在方法中完成业务</p>
<ul>
<li><p>Scanner键盘录入三步：</p>
<ul>
<li>导包 <code>import java.util.Scanner;</code></li>
<li>加载Scanner进内存 <code>Scanner sc = new Scanner(System.in);</code></li>
<li>定义变量保存键盘录入数据 <code>int a = sc.nextInt();</code></li>
</ul>
</li>
<li><p>比较键盘录入的三个数的大小</p>
<ul>
<li><p>三目运算符，比较三个数大小</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> max = (a&gt;b)?((a&gt;c)?a:c):((b&gt;c)?b:c);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>最后输出最大值到控制台</p>
<ul>
<li><p>直接调用：不设置返回值，直接在方法中System输出最大值，在main方法中直接调用方法即可</p>
</li>
<li><p>输出调用：设置返回值，在main方法中，System输出调用方法</p>
</li>
<li><p>赋值调用：设置返回值，在main方法中，定义一个变量，保存方法的返回值 <code>int max = demo();</code>，再直接输出max到控制台（数据可以重复利用）</p>
<hr>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>3.键盘录入三个数，求平均数</p>
<ul>
<li>创建工程，测试环境</li>
<li>需求分析<ul>
<li>定义一个方法完成业务</li>
</ul>
</li>
<li>定义方法<ul>
<li>修饰符：public static </li>
<li>返回值类型：<ul>
<li>方法中直接输出平均数，则没有返回值，返回值类型为void</li>
<li>方法中若设置一个变量并return返回，则返回值类型为int</li>
</ul>
</li>
<li>方法名demo();</li>
</ul>
</li>
<li>完成方法中的业务<ul>
<li>Scanner键盘录入三步：导包、加载Scanner进内存，定义变量存储键盘录入数据</li>
<li>定义一个变量，将键盘录入数据相加求平均数并保存<ul>
<li><code>int var = (a+b+c)/3</code></li>
</ul>
</li>
<li>调用<ul>
<li>直接调用：在方法中完成输出，main方法中调用方法即可</li>
<li>输出调用：方法中定义return返回值，main方法中，输出调用方法即可</li>
<li>赋值调用：方法中定义return返回值，main方法中，定义变量存储返回值，（可以重复操作数据)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<p>  4.键盘录入三个数，并保存在数组中</p>
<ul>
<li>创建项目，测试环境</li>
<li>需求分析：<ul>
<li>创建一个方法，完成键盘录入，存入数组，并保存至数组中</li>
</ul>
</li>
<li>创建方法：<ul>
<li>位置：并列关系</li>
<li>修饰符：public static </li>
<li>返回值：int[]数组类型或直接调用void</li>
</ul>
</li>
<li>完成方法中的业务<ul>
<li>创建一个数组</li>
<li>键盘录入三个数据并储存</li>
<li>将键盘录入的数据存入数组中</li>
<li>遍历数组</li>
<li>调用<ul>
<li>直接调用：<code>ar();</code> 返回值void</li>
<li>输出调用：return arr; 返回值int[] ,调用 <code>System.out.println(ar());</code></li>
<li>赋值调用：创建数组类型接收数据 <code>int[] arr = ar();</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="7-方法的传参"><a href="#7-方法的传参" class="headerlink" title="7.方法的传参"></a>7.方法的传参</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 返回值类型 方法名（参数类型<span class="number">1</span> 参数名<span class="number">1</span>,参数类型<span class="number">2</span> 参数名<span class="number">2.</span>...）&#123;</span><br><span class="line">	方法体；</span><br><span class="line">	<span class="keyword">return</span>返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>调用方法时，需要在()中写入对应数据类型的值</p>
</li>
<li><p>创建项目，测试环境</p>
</li>
<li><p>创建方法</p>
<ul>
<li>位置：并列</li>
<li>格式：修饰符 返回值类型 方法名（）{ }</li>
</ul>
</li>
<li><p>需求分析</p>
</li>
<li><p>键盘录入</p>
</li>
<li><p>实现打印</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>方法</tag>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>枚举和注解</title>
    <url>/2021/08/25/%E6%9E%9A%E4%B8%BE%E5%92%8C%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="二、枚举"><a href="#二、枚举" class="headerlink" title="二、枚举"></a>二、枚举</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h4><ul>
<li>发开中，一些固定的值通常用常量存储<ul>
<li>常量书写麻烦</li>
<li>不能对其进行其他操作</li>
</ul>
</li>
<li>为了间接的表示一些固定的值，Java就提供了枚举<ul>
<li>将固定的数据，一 一 列举出来</li>
</ul>
</li>
</ul>
<h4 id="2-定义枚举"><a href="#2-定义枚举" class="headerlink" title="2.定义枚举"></a>2.定义枚举</h4><ul>
<li><p>创建枚举类</p>
<ul>
<li><img src="https://i.loli.net/2021/08/19/okBYMgLDTay69Au.png" alt="image-20210819103354026"></li>
<li>枚举中的数据，通常全部用大写（书写习惯）</li>
</ul>
</li>
<li><p>定义枚举项</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Year</span></span>&#123;</span><br><span class="line">	枚举项一，枚举项二.....;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="3-枚举的特点"><a href="#3-枚举的特点" class="headerlink" title="3.枚举的特点"></a>3.枚举的特点</h4><ul>
<li><p>所有的枚举都是Enum的子类</p>
<p><img src="https://i.loli.net/2021/08/19/dR2IbYeBmw9WLXG.png" alt="image-20210819105029681"></p>
</li>
<li><p>我们可以通过 <font color='#d15252'>“枚举类名.枚举项名称” </font>去访问指定的枚举项</p>
<ul>
<li>枚举项，也是数据本身</li>
</ul>
<p><img src="https://i.loli.net/2021/08/19/XMFPCKsobaDYdyi.png" alt="image-20210819105149041"></p>
</li>
<li><p>每一个枚举项，都是该枚举的一个对象</p>
<ul>
<li>每个枚举项都会默认走一次构造方法</li>
</ul>
</li>
<li><p>枚举本质也是一个类，可以定义成员变量</p>
<ul>
<li>枚举中<font color='#d15252'>第一行</font>必须是<font color='#d15252'>枚举项</font></li>
</ul>
<p><img src="https://i.loli.net/2021/08/19/jXMW1nCaLtHNhsQ.png" alt="image-20210819105310021"></p>
</li>
<li><p>最后一个枚举项后的 <code>; </code>可以省略的，但是建议不要省略</p>
</li>
<li><p>枚举类可以有构造方法，但是修饰符必须是private</p>
<ul>
<li>不写修饰符，默认也是private</li>
</ul>
<p><img src="https://i.loli.net/2021/08/19/wKt6Crc8YbT3f4u.png" alt="image-20210819105350697"></p>
</li>
<li><p>枚举类可以有抽象方法，但是<font color='#d15252'>所有枚举项</font>必须重写该方法</p>
<p><img src="https://i.loli.net/2021/08/19/qB4AlW2tUardCD9.png" alt="image-20210819105431838"></p>
</li>
</ul>
<h4 id="4-枚举中的方法"><a href="#4-枚举中的方法" class="headerlink" title="4.枚举中的方法"></a>4.枚举中的方法</h4><h5 id="Ⅰ-ordinal"><a href="#Ⅰ-ordinal" class="headerlink" title="Ⅰ. ordinal()"></a>Ⅰ. ordinal()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ordinal</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"><span class="comment">//返回此枚举常数的序数（其枚举声明中的位置，其中初始常数的序数为零）。 </span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>获取枚举项的索引值</li>
</ul>
<h5 id="Ⅱ-name"><a href="#Ⅱ-name" class="headerlink" title="Ⅱ. name()"></a>Ⅱ. name()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">String <span class="title">name</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"><span class="comment">//返回此枚举常量的名称，与其枚举声明中声明的完全相同。  </span></span></span><br></pre></td></tr></table></figure>





<h5 id="Ⅲ-compareTo-E-o"><a href="#Ⅲ-compareTo-E-o" class="headerlink" title="Ⅲ. compareTo(E o)"></a>Ⅲ. compareTo(E o)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(E o)</span> </span></span><br><span class="line"><span class="function"><span class="comment">//将此枚举与指定的对象进行比较以进行订购。  </span></span></span><br></pre></td></tr></table></figure>


<ul>
<li>通常用来比较两个枚举项</li>
<li>返回值是索引值的差值</li>
</ul>
<h5 id="Ⅳ-toString"><a href="#Ⅳ-toString" class="headerlink" title="Ⅳ. toString()"></a>Ⅳ. toString()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">String <span class="title">toString</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"><span class="comment">//返回声明中包含的此枚举常量的名称。  </span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>返回对象的内部信息</li>
</ul>
<h5 id="Ⅴ-valueOf"><a href="#Ⅴ-valueOf" class="headerlink" title="Ⅴ. valueOf()"></a>Ⅴ. valueOf()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;T extends Enum&lt;T&gt;&gt;</span><br><span class="line"><span class="function">T <span class="title">valueOf</span><span class="params">(Class&lt;T&gt; enumType, String name)</span> </span></span><br><span class="line"><span class="function"><span class="comment">//返回具有指定名称的指定枚举类型的枚举常量。  </span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>获取枚举类中<font color='#d15252'>指定名称</font>的枚举</li>
</ul>
<h5 id="Ⅵ-values"><a href="#Ⅵ-values" class="headerlink" title="Ⅵ.values()"></a>Ⅵ.values()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">values()</span><br></pre></td></tr></table></figure>

<ul>
<li>获取所有的枚举项</li>
</ul>
<h3 id="三、注解"><a href="#三、注解" class="headerlink" title="三、注解"></a>三、注解</h3><h4 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1.概述"></a>1.概述</h4><ul>
<li><code>@</code><ul>
<li>对我们的程序进行标注和解释</li>
</ul>
</li>
<li>注解和注释的区别：<ul>
<li>注释是给人看的</li>
<li>注解是给编译器看的</li>
</ul>
</li>
<li>注解的优点：<ul>
<li>更加简洁，方便</li>
</ul>
</li>
<li>注解的作用：就是一个标注的作用</li>
</ul>
<h4 id="2-自定义注解"><a href="#2-自定义注解" class="headerlink" title="2.自定义注解"></a>2.自定义注解</h4><ul>
<li><p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> 注解名称 &#123; &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>变量的格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> 属性类型 属性名() <span class="keyword">default</span> 默认值</span><br></pre></td></tr></table></figure></li>
</ul>
<p>  [^属性类型]: 基本数据类型、String类型、Class类型、注解类型、枚举类型、一维数组+以上类型<br>  [^default]: 赋一个默认的初始化值</p>
<p>  <img src="https://i.loli.net/2021/08/19/ZPHFq1m8GnVcoQt.png" alt="image-20210819140308394"></p>
</li>
</ul>
<h4 id="3-练习"><a href="#3-练习" class="headerlink" title="3.练习"></a>3.练习</h4><ul>
<li>自定义一个注解@Test，用于指定类的方法上<ul>
<li>如果某一个类的方法上有该注解时，就执行这个方法</li>
</ul>
</li>
</ul>
<hr>
<h3 id="四、元注解"><a href="#四、元注解" class="headerlink" title="四、元注解"></a>四、元注解</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h4><ul>
<li><p>就是描述注解的注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="meta">@Inherited()</span></span><br></pre></td></tr></table></figure></li>
<li><p>即给注解注解的注解</p>
<p><img src="https://i.loli.net/2021/08/19/px5RjsFJO3Ar8wa.png" alt="image-20210819145603008"></p>
</li>
</ul>
<h4 id="2-三种元注解"><a href="#2-三种元注解" class="headerlink" title="2.三种元注解"></a>2.三种元注解</h4><h5 id="Ⅰ-Target"><a href="#Ⅰ-Target" class="headerlink" title="Ⅰ.@Target"></a>Ⅰ.@Target</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>指定注解在哪使用</li>
<li>默认：ANNOTATION_TYPE 在哪都可以使用</li>
</ul>
<h5 id="Ⅱ-Retention"><a href="#Ⅱ-Retention" class="headerlink" title="Ⅱ.@Retention"></a>Ⅱ.@Retention</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>指定该注解存活时间（编译时，运行时）</li>
</ul>
<h5 id="Ⅲ-Inherited"><a href="#Ⅲ-Inherited" class="headerlink" title="Ⅲ.@Inherited"></a>Ⅲ.@Inherited</h5><ul>
<li>表示修饰的自定义注解可以被子类继承</li>
</ul>
<h3 id="五、junit测试"><a href="#五、junit测试" class="headerlink" title="五、junit测试"></a>五、junit测试</h3><h4 id="1-概述-2"><a href="#1-概述-2" class="headerlink" title="1.概述"></a>1.概述</h4><ul>
<li>是一个第三方的jar包<ul>
<li>可以单独的运行某一个方法</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/08/19/q4NlRwAB5YnFy9V.png" alt="image-20210819155411352"></p>
<ul>
<li>Before：在Test之前运行</li>
<li>Test：测试这个方法</li>
<li>After：在Test之后运行</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>枚举</tag>
        <tag>注解</tag>
        <tag>junit</tag>
      </tags>
  </entry>
  <entry>
    <title>流程控制和键盘录入</title>
    <url>/2021/08/25/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%92%8C%E9%94%AE%E7%9B%98%E5%BD%95%E5%85%A5/</url>
    <content><![CDATA[<h3 id="一、表达式、语句体、块"><a href="#一、表达式、语句体、块" class="headerlink" title="一、表达式、语句体、块"></a>一、表达式、语句体、块</h3><h4 id="1-什么是表达式？"><a href="#1-什么是表达式？" class="headerlink" title="1.什么是表达式？"></a>1.什么是表达式？</h4><ul>
<li>一个变量、运算符、或者方法构成的一个新的构建体（一条符合Java语言的代码）</li>
<li>最终的结果是单个值</li>
</ul>
<h4 id="2-什么是语句体"><a href="#2-什么是语句体" class="headerlink" title="2.什么是语句体"></a>2.什么是语句体</h4><ul>
<li>一条语句构成了一个完整的执行单元</li>
<li>java语句中，节点是：结束</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a =  <span class="number">5</span>; <span class="comment">//语句体</span></span><br></pre></td></tr></table></figure>

<h4 id="3-块"><a href="#3-块" class="headerlink" title="3.块"></a>3.块</h4><ul>
<li>{  }</li>
</ul>
<h3 id="二、控制流程语句"><a href="#二、控制流程语句" class="headerlink" title="二、控制流程语句"></a>二、控制流程语句</h3><h4 id="1-顺序结构"><a href="#1-顺序结构" class="headerlink" title="1.顺序结构"></a>1.顺序结构</h4><ul>
<li>按照代码边学顺序，自上而下运行</li>
</ul>
<h4 id="2-选择结构"><a href="#2-选择结构" class="headerlink" title="2.选择结构"></a>2.选择结构</h4><h5 id="①-IF-语句"><a href="#①-IF-语句" class="headerlink" title="① IF 语句"></a>① IF 语句</h5><ul>
<li><p>格式一 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (比较表达式)&#123;</span><br><span class="line">    <span class="comment">//比较表达式的值为boolean类型 ture或false</span></span><br><span class="line">	执行代码块;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>格式二</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(比较表达式)&#123;</span><br><span class="line">    代码体    <span class="comment">//(ture)执行</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    代码体	   <span class="comment">//(false)执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>格式三</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(比较表达式)&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(比较表达式<span class="number">2</span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(比较表达式<span class="number">3</span>)&#123;	<span class="comment">//一旦有true即运行相应代码并结束</span></span><br><span class="line">    ...</span><br><span class="line">&#125;   ....</span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">else</span>&#123;		<span class="comment">//如果全是false，则执行else内的内容</span></span><br><span class="line">        ..</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>所有三目运算符都可以转换为if语句表达</p>
</blockquote>
<h5 id="②switch-语句"><a href="#②switch-语句" class="headerlink" title="②switch 语句"></a>②switch 语句</h5><ul>
<li><p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">	<span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">		语句体<span class="number">1</span>；</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">		语句体<span class="number">2</span></span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	......		......</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		语句体n+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>注意事项：① case后面只能跟常量，不能是变量</p>
<p>​                   ②多个case的值不能相同</p>
<p>case击穿：如果不写break关键字，则case匹配时，依次执行后面所有case语句体</p>
</blockquote>
<h5 id="③-If-和-Switch-的区别"><a href="#③-If-和-Switch-的区别" class="headerlink" title="③ If 和 Switch 的区别"></a>③ If 和 Switch 的区别</h5><ul>
<li>if<ul>
<li>针对结果是boolean类型的判断</li>
<li>针对一个范围的判断</li>
<li>针对几个常量的判断</li>
</ul>
</li>
<li>switch<ul>
<li>针对几个常量的判断</li>
</ul>
</li>
</ul>
<h4 id="3-循环结构"><a href="#3-循环结构" class="headerlink" title="3.循环结构"></a>3.循环结构</h4><h5 id="①-while循环语句"><a href="#①-while循环语句" class="headerlink" title="① while循环语句"></a>① while循环语句</h5><ul>
<li><p>格式一</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">初始化语句;</span><br><span class="line"><span class="keyword">while</span>(比较表达式)&#123;</span><br><span class="line">	语句体；</span><br><span class="line">    (控制条件);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>格式二：do…while</p>
<ul>
<li>最少执行一次代码，然后再进行判断循环</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">	循环体语句；</span><br><span class="line">    (控制条件);</span><br><span class="line">&#125;<span class="keyword">while</span>(判断条件语句);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>while语句可以和for循环等价转换</p>
</blockquote>
</li>
</ul>
<h5 id="②for循环语句"><a href="#②for循环语句" class="headerlink" title="②for循环语句"></a>②for循环语句</h5><ul>
<li><p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化语句；判断条件语句；控制条件语句)&#123;</span><br><span class="line">	循环体；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>for循环的执行流程：</p>
<ul>
<li>执行初始化语句</li>
<li>执行判断条件语句，看结果是true还是false(true进入循环，false结束)</li>
<li>执行循环体语句</li>
<li>执行控制条件语句</li>
<li>返回第二步</li>
</ul>
</li>
</ul>
<blockquote>
<p>水仙花数：指一个数(最少三位)，其各位的三次方相加等于这个数</p>
<p>例如：157    370   371</p>
</blockquote>
<h5 id="③补充知识点"><a href="#③补充知识点" class="headerlink" title="③补充知识点"></a>③补充知识点</h5><ul>
<li><p>最简单的死循环</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">	循环体;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>( ; ; )&#123;</span><br><span class="line">    循环体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>输出语句不换行</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.print<span class="literal">()</span>;  <span class="comment">//不写ln</span></span><br></pre></td></tr></table></figure></li>
<li><p>循环嵌套时，外循环控制行数，内循环控制列数</p>
</li>
</ul>
<h4 id="4-分支结构—跳转控制语句"><a href="#4-分支结构—跳转控制语句" class="headerlink" title="4.分支结构—跳转控制语句"></a>4.分支结构—跳转控制语句</h4><ul>
<li>三种关键字都有终止的效果，但是作用域不一样</li>
</ul>
<h5 id="①-break-中断"><a href="#①-break-中断" class="headerlink" title="① break 中断"></a>① break 中断</h5><ul>
<li>存在与switch或循环语句中，离开这两个环境时，无意义</li>
<li>作用：<ul>
<li>跳出单层循环（无标签）</li>
<li>跳出多层循环（带标签）<ul>
<li>格式：<code>标签名：循环体语句</code></li>
<li>标签名要符合Java的命名规则</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="②-continue-继续"><a href="#②-continue-继续" class="headerlink" title="② continue 继续"></a>② continue 继续</h5><ul>
<li>存在与循环语句中，离开循环无意义</li>
<li>作用：<ul>
<li>break退出当前循环</li>
<li>continue退出本次循环，继续下一次循环</li>
<li>也可以带标签使用</li>
</ul>
</li>
</ul>
<h5 id="③-return-返回"><a href="#③-return-返回" class="headerlink" title="③ return 返回"></a>③ return 返回</h5><ul>
<li>return不是为了跳出循环，而是为了结束方法</li>
<li>return后面的语句全部不执行</li>
</ul>
<h3 id="三、键盘录入数据"><a href="#三、键盘录入数据" class="headerlink" title="三、键盘录入数据"></a>三、键盘录入数据</h3><h5 id="第一步：导包（java封装好的Scanner方法）"><a href="#第一步：导包（java封装好的Scanner方法）" class="headerlink" title="第一步：导包（java封装好的Scanner方法）"></a>第一步：导包（java封装好的Scanner方法）</h5><p><code>import java.util.Scanner;</code></p>
<h5 id="第二步：Scanner加载进内存"><a href="#第二步：Scanner加载进内存" class="headerlink" title="第二步：Scanner加载进内存"></a>第二步：Scanner加载进内存</h5><p><code>Scanner sc = new Scanner(System.in);</code></p>
<blockquote>
<p>new关键字将栈区的CPU执行权交给堆区，堆区运行完后交还给栈区</p>
</blockquote>
<h5 id="第三步：捕获键盘录入数据并保存"><a href="#第三步：捕获键盘录入数据并保存" class="headerlink" title="第三步：捕获键盘录入数据并保存"></a>第三步：捕获键盘录入数据并保存</h5><p><code>int a = sc.nextInt();</code></p>
<blockquote>
<p>nextInt()录入int类型 / next()字符串类型</p>
</blockquote>
<p><img src="https://i.loli.net/2021/07/06/lvw8Aca4Kk2MRPJ.png" alt="image-20210706121609079"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>流程控制</tag>
        <tag>Scanner</tag>
        <tag>If</tag>
      </tags>
  </entry>
  <entry>
    <title>线程的生命周期、安全隐患和通信</title>
    <url>/2021/08/25/%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E3%80%81%E5%AE%89%E5%85%A8%E9%9A%90%E6%82%A3%E5%92%8C%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<h3 id="一、线程的生命周期"><a href="#一、线程的生命周期" class="headerlink" title="一、线程的生命周期"></a>一、线程的生命周期</h3><ul>
<li>通过API提供的方法让线程声明周期的某个阶段，达到可控状态</li>
</ul>
<h4 id="1-sleep-方法"><a href="#1-sleep-方法" class="headerlink" title="1.sleep()方法"></a>1.sleep()方法</h4><ul>
<li><p>在指定的毫秒数内让正在执行的线程休眠</p>
</li>
<li><p>使当前正在执行的线程停留（暂停执行）指定的毫秒数，这取决于系统定时器和调度程序的精度和准确性</p>
</li>
</ul>
<h4 id="2-join-方法"><a href="#2-join-方法" class="headerlink" title="2.join()方法"></a>2.join()方法</h4><h5 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">join();</span><br></pre></td></tr></table></figure>

<ul>
<li>等待调用该方法的线程结束后才能执行<ul>
<li>谁调用该方法，谁先执行</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">join(<span class="keyword">long</span> time)</span><br></pre></td></tr></table></figure>

<ul>
<li>等待调用该方法的线程，最多 <code>time</code>秒，然后才执行</li>
</ul>
<p><img src="https://i.loli.net/2021/08/13/9RbLO7FyAetT2nY.png" alt="image-20210813092653883"></p>
<h4 id="3-线程的优先级"><a href="#3-线程的优先级" class="headerlink" title="3.线程的优先级"></a>3.<font color='#d15252'>线程的优先级</font></h4><ul>
<li><p>Fileds常量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> MAX_PRIORITY 线程可以拥有的最大优先级。  </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> MIN_PRIORITY 线程可以拥有的最小优先级。  </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> NORM_PRIORITY 分配给线程的默认优先级。 </span><br></pre></td></tr></table></figure>

<ul>
<li>Java为线程类提供了10个优先级</li>
<li>优先级可以用整数1—10表示，超过范围会抛出异常<ul>
<li>最先等级 1 </li>
<li>默认等级 5</li>
<li>最大等级 10</li>
</ul>
</li>
</ul>
</li>
<li><p><code>getPriority()</code> 获取线程的优先级</p>
</li>
<li><p><code>setPriority(int b)</code> 设置线程的优先级</p>
</li>
<li><p>查阅main方法的优先级</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取当前线程对象并保存</span></span><br><span class="line">Thread thread = Thread.currentThread();</span><br><span class="line"><span class="comment">//调用获取优先级方法</span></span><br><span class="line">thread.getPriority();</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="实验：线程优先级的效果"><a href="#实验：线程优先级的效果" class="headerlink" title="实验：线程优先级的效果"></a>实验：线程优先级的效果</h5><p><img src="https://i.loli.net/2021/08/13/vQXdb257gLK9slU.png" alt="image-20210813095931549"></p>
<h3 id="二、线程的安全隐患"><a href="#二、线程的安全隐患" class="headerlink" title="二、线程的安全隐患"></a>二、线程的安全隐患</h3><ul>
<li>隐患：存在发生的可能性,但不一定会发生<ul>
<li>多个线程是通过竞争CPU的时间获得运行机会</li>
<li>多个线程什么时候获得CPU时间，占用多少</li>
<li>一个正在运行着的线程在什么地方暂停，也是不确定的</li>
<li><img src="https://i.loli.net/2021/08/13/KvFtIJ9CmfoXqLd.png" alt="image-20210813105351734"></li>
</ul>
</li>
</ul>
<h4 id="1-线程同步"><a href="#1-线程同步" class="headerlink" title="1.线程同步"></a>1.线程<font color='#d15252'>同步</font></h4><ul>
<li>只允许一个线程执行</li>
<li><font color='#d15252'>synchronized</font>同步锁</li>
</ul>
<h5 id="Ⅰ-同步代码块"><a href="#Ⅰ-同步代码块" class="headerlink" title="Ⅰ.同步代码块"></a>Ⅰ.同步代码块</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Synchronized(对象)&#123;</span><br><span class="line">	<span class="comment">//同步代码（上锁）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>需要传递一个参数</li>
</ul>
<p><img src="https://i.loli.net/2021/08/13/cPWEQwfTSdvgYZH.png"></p>
<p><img src="https://i.loli.net/2021/08/13/sT721vdch593yGn.png" alt="image-20210813105612949"></p>
<ul>
<li>细节问题</li>
</ul>
<h5 id="Ⅱ-同步方法"><a href="#Ⅱ-同步方法" class="headerlink" title="Ⅱ.同步方法"></a>Ⅱ.同步方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span><span class="comment">//this</span></span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/08/13/Hbej1wsAgymIUo5.png" alt="image-20210813112929968"></p>
<p><img src="https://i.loli.net/2021/08/13/DvtNHRj6WBdunkZ.png" alt="image-20210813114530211"></p>
<ul>
<li>不想加静态就用this </li>
<li>定义一个方法专门放synchronized</li>
</ul>
<h4 id="2-死锁（同步代码块嵌套）"><a href="#2-死锁（同步代码块嵌套）" class="headerlink" title="2.死锁（同步代码块嵌套）"></a>2.死锁（<font color='#d15252'>同步代码块嵌套</font>）</h4><ul>
<li><p>程序没有停止，而且线程不在执行</p>
<ul>
<li>当一个线程拥有A对象锁的时候，并且在等待B对象锁的时候，另一个线程拥有了B对象的锁，并在等待A锁</li>
<li>这种情况就造成了死锁</li>
</ul>
</li>
<li><p>不要嵌套！！！！！！！！！！！！！！！！！！！</p>
</li>
</ul>
<h3 id="三、线程的通信"><a href="#三、线程的通信" class="headerlink" title="三、线程的通信"></a>三、线程的通信</h3><h4 id="1-两个进程之间通信案例"><a href="#1-两个进程之间通信案例" class="headerlink" title="1.两个进程之间通信案例"></a>1.两个进程之间通信案例</h4><ul>
<li><p>在A线程执行时，别的线程不能插入，即不交出cpu执行权</p>
<ul>
<li>synchronized锁住</li>
<li>必须用同一把锁</li>
</ul>
</li>
<li><p>A线程执行之后，需要通知B执行，找一个中间者作为记录</p>
</li>
<li><p>线程1</p>
<p><img src="https://i.loli.net/2021/08/13/uj5agEFkPDmsLVh.png" alt="image-20210813162255432"></p>
</li>
<li><p>线程2</p>
<p><img src="https://i.loli.net/2021/08/13/RnHIzLrvfaiJEAc.png" alt="image-20210813162312051"></p>
</li>
</ul>
<h4 id="2-三个进程间通信案例"><a href="#2-三个进程间通信案例" class="headerlink" title="2.三个进程间通信案例"></a>2.三个进程间通信案例</h4><ul>
<li>while循环实现重复输出</li>
<li>实现同步代码块，确保一个线程执行时不会被抢走执行权<ul>
<li>synchronized 加同步锁</li>
</ul>
</li>
<li>三个线程要用一个锁对象<ul>
<li>public <font color='#d15252'>static </font>Object obj = new Object();</li>
<li>因为main方法是静态的，所以锁对象也要静态</li>
<li>锁对象很灵活，用什么都可以</li>
</ul>
</li>
<li>需要有记录员，记录线程之间通信的情况<ul>
<li>定义一个变量，记录是谁在发消息<ul>
<li>int a = 1;</li>
</ul>
</li>
</ul>
</li>
<li><font color='#d15252'>线程1</font><ul>
<li>当a==1时，发送消息；并将a=2；唤醒所有线程</li>
<li>当a!=1时，处于等待状态</li>
</ul>
</li>
<li>线程2<ul>
<li>当a==2时，发送消息；并将a=3；唤醒其他所有线程</li>
<li>当a!=2时，处于等待状态</li>
</ul>
</li>
<li>线程3<ul>
<li>当a==3时，发送消息；并将a=1；唤醒其他所有线程</li>
<li>当a!=3时，处于等待状态</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/08/13/gNbj82trWxEfilB.png" alt="image-20210813164127993"></p>
<h4 id="3-通信中用到的方法"><a href="#3-通信中用到的方法" class="headerlink" title="3.通信中用到的方法"></a>3.通信中用到的方法</h4><ul>
<li>wait()<ul>
<li>等待</li>
</ul>
</li>
<li>notifyAll()<ul>
<li>唤醒所有线程3</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>继承、多态、抽象类和接口</title>
    <url>/2021/08/25/%E7%BB%A7%E6%89%BF%E3%80%81%E5%A4%9A%E6%80%81%E3%80%81%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h3 id="一、继承"><a href="#一、继承" class="headerlink" title="一、继承"></a>一、继承</h3><h4 id="1-什么是继承？"><a href="#1-什么是继承？" class="headerlink" title="1.什么是继承？"></a>1.什么是继承？</h4><ul>
<li><p>Java中继承</p>
<ul>
<li>第一步：找到重复代码</li>
<li>第二步：找到封装重复代码的工具</li>
<li>第三步：其他类和公共类没有联系<ul>
<li>使用 <code>extends</code>继承</li>
</ul>
</li>
</ul>
</li>
<li><p>继承的格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 子类名 <span class="keyword">extends</span> 父类名</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-继承解决了代码的重复性"><a href="#2-继承解决了代码的重复性" class="headerlink" title="2.继承解决了代码的重复性"></a>2.继承解决了代码的重复性</h4><h5 id="开发原则：低耦合，高内聚"><a href="#开发原则：低耦合，高内聚" class="headerlink" title="开发原则：低耦合，高内聚"></a>开发原则：低耦合，高内聚</h5><ul>
<li>耦合：类与类之间的关系</li>
<li>内聚：自己完成某件事的能力</li>
</ul>
<h4 id="3-继承的构造方法之间的关系"><a href="#3-继承的构造方法之间的关系" class="headerlink" title="3.继承的构造方法之间的关系"></a>3.继承的构造方法之间的关系</h4><ul>
<li><p>父类与子类的构造方法不会继承</p>
</li>
<li><p>创建子类对象时，会先运行父类的构造方法（初始化夫），然后运行子类的构造方法</p>
<ul>
<li><p>因为在继承时，子类构造方法有隐藏的super()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Zi</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="comment">//隐藏super</span></span><br><span class="line">		<span class="keyword">super</span>(<span class="number">10</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;子类的无参构造&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="4-继承的成员变量关系"><a href="#4-继承的成员变量关系" class="headerlink" title="4.继承的成员变量关系"></a>4.继承的成员变量关系</h4><ul>
<li><p>私有的是无法被继承的</p>
<ul>
<li>实际上是可以继承的，但是不能访问</li>
</ul>
</li>
<li><p>继承</p>
<ul>
<li>子类被赋予了访问super内存空间的权限</li>
</ul>
<p><img src="https://i.loli.net/2021/07/29/Q3zvmHiLqKWcJaS.png" alt="image-20210729103202135"></p>
</li>
</ul>
<h4 id="5-继承的方法关系"><a href="#5-继承的方法关系" class="headerlink" title="5.继承的方法关系"></a>5.继承的方法关系</h4><ul>
<li>方法可以被继承</li>
</ul>
<h5 id="Ⅰ-方法重写："><a href="#Ⅰ-方法重写：" class="headerlink" title="Ⅰ.方法重写："></a>Ⅰ.<font color='#d15252'>方法重写</font>：</h5><ul>
<li>概念：子类和父类中的方法声明一模一样，就是方法重写<ul>
<li>方法体可以不一样</li>
</ul>
</li>
<li>子类对象调用方法的<font color='orange'>特点</font><ul>
<li>若方法名不相同，则调用对应名称的方法</li>
<li>若方法名相同，则调用子类自己的</li>
</ul>
</li>
<li>子类重写父类方法时，访问权限不能更低</li>
</ul>
<h4 id="6-继承的总结"><a href="#6-继承的总结" class="headerlink" title="6.继承的总结"></a>6.继承的总结</h4><ul>
<li>Java中只支持单继承，不支持多继承。但是支持多层继承<ul>
<li>即 一个类只能有一个爸爸 ，但是可以有一个爷爷，一个祖爷爷</li>
<li><font color='#d15252'>但多层继承打破了封装性，功能唯一性</font></li>
</ul>
</li>
<li>子类只能继承父类的非私有成员（成员变量、成员方法）</li>
<li>子类不会继承父类的构造方法，但可以通过super()访问</li>
</ul>
<hr>
<h3 id="二、多态"><a href="#二、多态" class="headerlink" title="二、多态"></a>二、多态</h3><h4 id="1-概念："><a href="#1-概念：" class="headerlink" title="1.概念："></a>1.概念：</h4><ul>
<li>某一事物，不同时刻不同状态（扯淡）</li>
<li><font color='#d15252'>赋予父类访问子类的权限</font><ul>
<li>父类要有与子类相同的方法，不然过不了编译</li>
<li>因为对象进实体找方法从上到下</li>
</ul>
</li>
</ul>
<h4 id="2-结论："><a href="#2-结论：" class="headerlink" title="2.结论："></a>2.结论：</h4><ul>
<li>成员变量：<ul>
<li>编译看左边，运行看左边 （就近原则）</li>
</ul>
</li>
<li>成员方法：<ul>
<li>编译看左边，运行看右边（方法重写）</li>
</ul>
</li>
<li>构造方法：<ul>
<li>创建子类对象，先初始化父类</li>
</ul>
</li>
<li>静态方法：<ul>
<li>编译看左边，运行看左边（静态和类相关，不是重写）</li>
</ul>
</li>
</ul>
<h4 id="3-实现多态"><a href="#3-实现多态" class="headerlink" title="3.实现多态"></a>3.<font color='#d15252'>实现多态</font></h4><ul>
<li>要有继承关系<ul>
<li>要有方法的重写</li>
</ul>
</li>
<li>父类引用指向子类对象</li>
</ul>
<h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h4><ul>
<li><p>instanceof</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">if</span><span class="params">(x instanceof y)</span></span>&#123;</span><br><span class="line">	<span class="comment">//判断x是否是y的一种</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h3 id="三、抽象类"><a href="#三、抽象类" class="headerlink" title="三、抽象类"></a>三、抽象类</h3><p><strong><font color='#d15252'>abstract</font></strong></p>
<h4 id="1-什么是抽象类？"><a href="#1-什么是抽象类？" class="headerlink" title="1.什么是抽象类？"></a>1.什么是抽象类？</h4><ul>
<li>为了让父类能够调用子类的方法<ul>
<li>而父类必须有一个一样的方法<ul>
<li>并且父类方法中不需要写方法体<ul>
<li>但不写方法体会报错，需要抽象</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>一个<font color='#d15252'>没有方法体</font>的方法应定义为<font color='#d15252'>抽象方法</font></li>
<li>如果一个类中有抽象方法，则该类<font color='#d15252'>必须定义为抽象类</font></li>
</ul>
<h4 id="2-定义抽象类格式"><a href="#2-定义抽象类格式" class="headerlink" title="2.定义抽象类格式"></a>2.定义抽象类格式</h4><ul>
<li><p>抽象类和抽象方法的定义，必须用abstract来修饰</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> 类名</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="3-抽象类的使用"><a href="#3-抽象类的使用" class="headerlink" title="3.抽象类的使用"></a>3.抽象类的使用</h4><ul>
<li>抽象类无法直接<font color='#d15252'><strong>实例化</strong></font></li>
</ul>
<h4 id="4-抽象类的组成"><a href="#4-抽象类的组成" class="headerlink" title="4.抽象类的组成"></a>4.抽象类的组成</h4><ul>
<li>构造方法</li>
<li>成员变量</li>
<li>成员方法<ul>
<li>是否包含非抽象方法</li>
</ul>
</li>
</ul>
<hr>
<h3 id="四、接口"><a href="#四、接口" class="headerlink" title="四、接口"></a>四、接口</h3><h4 id="1-接口的定义："><a href="#1-接口的定义：" class="headerlink" title="1.接口的定义："></a>1.接口的定义：</h4><ul>
<li>当我们有额外的业务（功能）时，需要用接口区封装业务</li>
<li>接口体现了扩展性</li>
</ul>
<h4 id="2-接口的格式"><a href="#2-接口的格式" class="headerlink" title="2.接口的格式"></a>2.接口的格式</h4><ul>
<li><p>接口用关键字interface表示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">格式：<span class="class"><span class="keyword">interface</span> 接口名</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>类实现接口用implements表示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">格式：<span class="class"><span class="keyword">class</span> 类名 <span class="keyword">implements</span> 接口名 </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="3-接口的组成"><a href="#3-接口的组成" class="headerlink" title="3.接口的组成"></a>3.接口的组成</h4><ul>
<li>构造方法：没有构造方法<ul>
<li>不能实例化</li>
</ul>
</li>
<li>变量：没有变量，只能有常量</li>
<li>方法：只能是抽象方法</li>
</ul>
<h4 id="4-接口的实例化"><a href="#4-接口的实例化" class="headerlink" title="4.接口的实例化"></a>4.接口的实例化</h4><ul>
<li>同抽象方法一样</li>
</ul>
<h5 id="练习："><a href="#练习：" class="headerlink" title="练习："></a>练习：</h5><ul>
<li>举重：<ul>
<li>教练：姓名 年龄    吃馒头</li>
<li>运动员： 姓名 年龄 吃牛肉</li>
</ul>
</li>
<li>乒乓球： <ul>
<li>教练：姓名 年龄  吃驴肉</li>
<li>教练：姓名 年龄  吃驴肉</li>
</ul>
</li>
</ul>
<p>和乒乓球相关的，都会说英语</p>
<p>和举重相关的，都会说日语</p>
<p>say：输出信息</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>继承</tag>
        <tag>多态</tag>
        <tag>抽象类</tag>
        <tag>接口</tag>
      </tags>
  </entry>
  <entry>
    <title>认识JavaScript</title>
    <url>/2021/08/26/%E8%AE%A4%E8%AF%86JavaScript/</url>
    <content><![CDATA[<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><ul>
<li><p>JavaScript 是属于网络的脚本语言</p>
<ul>
<li>不需要编译器</li>
</ul>
</li>
<li><p>JavaScript 的作用</p>
<ul>
<li>用来改进设计</li>
<li>验证表单</li>
<li>检测浏览器</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/08/25/96zyXxg2hql1KVi.png" alt="image-20210825091844730"></p>
<ul>
<li>ECMAScript：定义了核心语法、关键字、运算符、数据类型等系列标准</li>
<li>DOM：文档对象模型(倒状树)</li>
<li>BOM：浏览器对象模型；</li>
</ul>
<h3 id="二、语法格式"><a href="#二、语法格式" class="headerlink" title="二、语法格式"></a>二、语法格式</h3><h4 id="1-区分大小写"><a href="#1-区分大小写" class="headerlink" title="1.区分大小写"></a>1.区分大小写</h4><ul>
<li>与 Java 一样，变量、函数名、运算符以及其他一切东西都是区分大小写的。<ul>
<li>比如：<ul>
<li>变量 test 与变量 TEST 是不同的。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="2-变量是弱类型的"><a href="#2-变量是弱类型的" class="headerlink" title="2.变量是弱类型的"></a>2.变量是弱类型的</h4><ul>
<li>与 Java 和 C 不同，ECMAScript 中的变量无特定的类型，定义变量时只用 var 运算符，可以将它初始化为任意值。</li>
<li>因此，可以随时改变变量所存数据的类型（尽量避免这样做）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> color = <span class="string">&quot;red&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">var</span> visible = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<h4 id="3-每行结尾分号可有可无"><a href="#3-每行结尾分号可有可无" class="headerlink" title="3.每行结尾分号可有可无"></a>3.每行结尾分号可有可无</h4><ul>
<li>Java、C 和 Perl 都要求每行代码以分号（;）结束才符合语法</li>
<li>ECMAScript 则允许开发者自行决定是否以分号结束一行代码。如果没有分号，ECMAScript 就把折行代码的结尾看做该语句的结尾（与 Visual Basic 和 VBScript 相似），前提是这样没有破坏代码的语义</li>
<li>最好的代码编写习惯是总加入分号，因为没有分号，有些浏览器就不能正确运行，不过根据 ECMAScript 标准，下面两行代码都是正确的</li>
</ul>
<h4 id="4-注释与-Java、C-和-PHP-语言的注释相同"><a href="#4-注释与-Java、C-和-PHP-语言的注释相同" class="headerlink" title="4.注释与 Java、C 和 PHP 语言的注释相同"></a>4.注释与 Java、C 和 PHP 语言的注释相同</h4><ul>
<li>有两种类型的注释：<ul>
<li>单行注释以双斜杠开头（//）</li>
<li>多行注释以单斜杠和星号开头（/<em>），以星号和单斜杠结尾（</em>/）</li>
</ul>
</li>
</ul>
<h4 id="5-括号表示代码块"><a href="#5-括号表示代码块" class="headerlink" title="5.括号表示代码块"></a>5.括号表示代码块</h4><ul>
<li>从 Java 中借鉴的另一个概念是代码块</li>
<li>代码块表示一系列应该按顺序执行的语句，这些语句被封装在左括号（{）和右括号（}）之间</li>
</ul>
<h3 id="三、html和Js结合方式"><a href="#三、html和Js结合方式" class="headerlink" title="三、html和Js结合方式"></a>三、html和Js结合方式</h3><h4 id="1-行内脚本"><a href="#1-行内脚本" class="headerlink" title="1.行内脚本"></a>1.行内脚本</h4><ul>
<li>定义在元素标签中</li>
<li>需要添加事件属性</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;h1 onclick=<span class="string">&quot;alert(123123)&quot;</span>&gt;点我点我&lt;/h1&gt;</span><br><span class="line">	<span class="comment">//点击事件</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>alert：弹窗</p>
</blockquote>
<h4 id="2-内部脚本"><a href="#2-内部脚本" class="headerlink" title="2.内部脚本"></a>2.内部脚本</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;  Js内容  &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>位置在哪都可以<ul>
<li>一般建议写在最后，body的外部</li>
</ul>
</li>
</ul>
<h4 id="3-外部脚本引入方式"><a href="#3-外部脚本引入方式" class="headerlink" title="3.外部脚本引入方式"></a>3.外部脚本引入方式</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>文档的加载是自上而下的过程</li>
</ul>
<hr>
<h3 id="四、变量的数据类型"><a href="#四、变量的数据类型" class="headerlink" title="四、变量的数据类型"></a>四、变量的数据类型</h3><ul>
<li><p>js是一个<font color='#d15252'>弱类型</font>语言：定义变量时不需要明确数据类型</p>
<ul>
<li><font color='#d15252'>var</font></li>
</ul>
</li>
<li><p>具体的变量，依旧区分数据类型</p>
</li>
</ul>
<h4 id="1-数值类型number"><a href="#1-数值类型number" class="headerlink" title="1.数值类型number"></a>1.数值类型number</h4><ul>
<li><p>不区分整数和小数</p>
</li>
<li><p>所有的数字采用的是64位格式存储</p>
</li>
</ul>
<h4 id="2-字符串类型"><a href="#2-字符串类型" class="headerlink" title="2.字符串类型"></a>2.字符串类型</h4><ul>
<li>可以使用单引号或双引号</li>
</ul>
<h4 id="3-布尔类型"><a href="#3-布尔类型" class="headerlink" title="3.布尔类型"></a>3.布尔类型</h4><ul>
<li>布尔（逻辑）只能有两个值：true 或 false</li>
</ul>
<h4 id="4-数组"><a href="#4-数组" class="headerlink" title="4.数组"></a>4.数组</h4><p><img src="https://i.loli.net/2021/08/25/mKw4cXSCqAfPNIg.png" alt="image-20210825095227797"></p>
<h4 id="补充知识点：“-“-转义字符"><a href="#补充知识点：“-“-转义字符" class="headerlink" title="补充知识点：“ \ “ 转义字符"></a>补充知识点：“ \ “ 转义字符</h4><p><img src="https://i.loli.net/2021/08/25/fu7GEB9ovtbkUF6.png" alt="image-20210825095718124"></p>
<ul>
<li> 打印引号</li>
</ul>
<hr>
<h3 id="五、数据类型的转换"><a href="#五、数据类型的转换" class="headerlink" title="五、数据类型的转换"></a>五、数据类型的转换</h3><h4 id="1-数据类型间的加减"><a href="#1-数据类型间的加减" class="headerlink" title="1.数据类型间的加减"></a>1.数据类型间的<font color='#d15252'>加减</font></h4><h5 id="Ⅰ-数字-字符串"><a href="#Ⅰ-数字-字符串" class="headerlink" title="Ⅰ.数字+字符串"></a>Ⅰ.数字+字符串</h5><ul>
<li>数字  —&gt;  字符串    10+”a”   ==&gt;”10a”</li>
</ul>
<h5 id="Ⅱ-数字-布尔类型"><a href="#Ⅱ-数字-布尔类型" class="headerlink" title="Ⅱ.数字+布尔类型"></a>Ⅱ.数字+布尔类型</h5><ul>
<li>数字  —&gt;  数字     <ul>
<li>true：1</li>
<li>false：0</li>
</ul>
</li>
</ul>
<h5 id="Ⅲ-字符串-布尔类型"><a href="#Ⅲ-字符串-布尔类型" class="headerlink" title="Ⅲ.字符串+布尔类型"></a>Ⅲ.字符串+布尔类型</h5><ul>
<li>字符串拼接</li>
</ul>
<h5 id="Ⅳ-布尔类型-布尔类型"><a href="#Ⅳ-布尔类型-布尔类型" class="headerlink" title="Ⅳ.布尔类型+布尔类型"></a>Ⅳ.布尔类型+布尔类型</h5><ul>
<li>true和flase相加减 —-&gt;数字</li>
</ul>
<h4 id="2-数据类型转换的方法"><a href="#2-数据类型转换的方法" class="headerlink" title="2.数据类型转换的方法"></a>2.数据类型转换的<font color='#d15252'>方法</font></h4><ul>
<li><p>parseInt：强制转换成整数</p>
<ul>
<li>NaN：表示的是非数值的特殊值，该属性主要用来表示不是数值的数字</li>
</ul>
<p><img src="https://i.loli.net/2021/08/25/ORgZi1ItSHeoq4A.png" alt="image-20210825103715636"></p>
</li>
<li><p>paresFloat：强制转换成小数（浮点数）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;12.22&quot;</span>;</span><br><span class="line">alert(paresFloat(a))</span><br><span class="line"><span class="comment">//结果 12.22</span></span><br></pre></td></tr></table></figure></li>
<li><p>typeof：查询当前的数据类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;12.22&quot;</span>;</span><br><span class="line">alert(<span class="keyword">typeof</span>(a))</span><br><span class="line"><span class="comment">//String</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="3-null和undefiend"><a href="#3-null和undefiend" class="headerlink" title="3.null和undefiend"></a>3.null和undefiend</h4><ul>
<li><p>null：在程序中“无值”或”无对象“</p>
<ul>
<li>实际上有一个null值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="literal">null</span>;</span><br><span class="line">alert(<span class="keyword">typeof</span>(name));	<span class="comment">//String</span></span><br><span class="line">alert(name);	<span class="comment">//null</span></span><br></pre></td></tr></table></figure></li>
<li><p>undefiend：未定的数值或对象（不存在）</p>
<ul>
<li>相当于Java中的变量未初始化</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n;</span><br><span class="line">alert(<span class="keyword">typeof</span>(n));	<span class="comment">//undefiend</span></span><br><span class="line">alert(n);	<span class="comment">//undefiend</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="4-算数运算符"><a href="#4-算数运算符" class="headerlink" title="4.算数运算符"></a>4.算数运算符</h4><ul>
<li>和 Java一模一样</li>
</ul>
<h4 id="5-关系运算符"><a href="#5-关系运算符" class="headerlink" title="5.关系运算符"></a>5.关系运算符</h4><ul>
<li>==：比较内容</li>
<li>===：比较地址</li>
<li>其他与 Java相同<ul>
<li>在Java中”==”比较地址值,equals方法比较内容</li>
</ul>
</li>
</ul>
<h3 id="六、JavaScript对象"><a href="#六、JavaScript对象" class="headerlink" title="六、JavaScript对象"></a>六、JavaScript对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log() </span><br></pre></td></tr></table></figure>

<ul>
<li>将内容打印到控制台</li>
</ul>
<h4 id="1-Js常用API"><a href="#1-Js常用API" class="headerlink" title="1. Js常用API"></a>1. Js常用API</h4><ul>
<li><p>String</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">length：长度</span><br><span class="line">toUpperCase()：小写--大</span><br><span class="line">toLowerCase()：大写--小</span><br><span class="line">charAt()：返回索引处字符</span><br><span class="line">indexOf()</span><br><span class="line">subString()</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-Array数组"><a href="#2-Array数组" class="headerlink" title="2.Array数组"></a>2.Array数组</h4><h5 id="Ⅰ-定义格式"><a href="#Ⅰ-定义格式" class="headerlink" title="Ⅰ.定义格式"></a>Ⅰ.定义格式</h5><ul>
<li>格式一：默认</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">12</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">12.22</span>;</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="keyword">for</span>(int a=<span class="number">0</span>;a&lt;arrr.length;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>格式二：指定数组长度</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2</span>);	</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">12</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">12.22</span>;</span><br><span class="line"><span class="comment">//遍历		发现如果给出内容超过指定长度，会自动扩容</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[i]);</span><br></pre></td></tr></table></figure>



<ul>
<li>格式三：创建数组时给出初始值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(元素<span class="number">1</span>、元素<span class="number">2</span>、元素<span class="number">3</span>)；<span class="comment">//new 不能省略</span></span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="keyword">for</span>(int a=<span class="number">0</span>;a&lt;arrr.length;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;===================&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="Ⅱ-二维数组"><a href="#Ⅱ-二维数组" class="headerlink" title="Ⅱ.二维数组"></a>Ⅱ.二维数组</h5><ul>
<li><p>定义格式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(</span><br><span class="line">	[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">	[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],</span><br><span class="line">	[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
<li><p>遍历二维数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(int k=<span class="number">0</span>;arr[i].length;k++)&#123;</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="七、正则表达式"><a href="#七、正则表达式" class="headerlink" title="七、正则表达式"></a>七、正则表达式</h3><ul>
<li>字符串表示的一个规则</li>
</ul>
<h4 id="1-正则表达式的格式"><a href="#1-正则表达式的格式" class="headerlink" title="1.正则表达式的格式"></a>1.正则表达式的格式</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/^xxxx$/</span><br></pre></td></tr></table></figure>

<ul>
<li>开头：/^</li>
<li>结尾：$/</li>
</ul>
<h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> patt = <span class="regexp">/^\d&#123;1,4&#125;$/</span>;</span><br><span class="line">    <span class="comment">//定义一个变量</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//创建正则表达式对象</span></span><br><span class="line">    <span class="keyword">var</span> regExp = <span class="keyword">new</span> <span class="built_in">RegExp</span>(patt);</span><br><span class="line">    <span class="keyword">var</span> b = regExp.test(a);</span><br><span class="line">    <span class="keyword">if</span>( a==<span class="literal">true</span>)&#123;</span><br><span class="line">        alert(<span class="string">&quot;符合&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;不符合&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h5 id="案例：验证邮箱"><a href="#案例：验证邮箱" class="headerlink" title="案例：验证邮箱"></a>案例：验证邮箱</h5><p><img src="https://i.loli.net/2021/08/25/SrFvR2XI9ZzidGl.png" alt="image-20210825141930574"></p>
<h4 id="2-正则表达式中各种符号的意义"><a href="#2-正则表达式中各种符号的意义" class="headerlink" title="2.正则表达式中各种符号的意义"></a>2.正则表达式中各种符号的意义</h4><ul>
<li><code>&#123;&#125;</code> 表示前面的符号出现了多少次</li>
<li><code>[] </code>取值区间</li>
</ul>
<h3 id="八、方法"><a href="#八、方法" class="headerlink" title="八、方法"></a>八、方法</h3><ul>
<li><p>无参无返回值类型    </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="number">1</span>+<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    add();</span><br></pre></td></tr></table></figure></li>
<li><p>无参带返回值类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">1</span>+<span class="number">2</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>带参无返回值类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">       alert(a+b);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>带参带返回值类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b,c</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+b+c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="1-构造方法"><a href="#1-构造方法" class="headerlink" title="1.构造方法"></a>1.构造方法</h4><ul>
<li>通过内置的Js方法构造器（Function）</li>
</ul>
<p><img src="https://i.loli.net/2021/08/25/XMRFnG34aUqgP5E.png" alt="image-20210825145123591"></p>
<h4 id="2-匿名方法"><a href="#2-匿名方法" class="headerlink" title="2.匿名方法"></a>2.匿名方法</h4><ul>
<li>没有名字（类似于Java中的匿名对象）</li>
<li>也叫做方法的绑定</li>
</ul>
<p><img src="https://i.loli.net/2021/08/25/r8p3CEfibvK9eZQ.png" alt="image-20210825145427861"></p>
<h4 id="3-全局方法"><a href="#3-全局方法" class="headerlink" title="3.全局方法"></a>3.全局方法</h4><ul>
<li>isNaN：检查数据是否是非数值<ul>
<li><img src="https://i.loli.net/2021/08/25/ACMqVKuaSH6c3Tf.png" alt="image-20210825145546001"></li>
<li>//true  //false</li>
</ul>
</li>
</ul>
<ul>
<li><p>eval：用来转换字符串的运算</p>
<ul>
<li>让字符串中的运算符起效果</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;1+3&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);	<span class="comment">//&quot;1+3&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">eval</span>(a));	<span class="comment">//&quot;4&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li><p>encodUrl和decodeurl</p>
<ul>
<li>encodUrl    <ul>
<li>将数据转码为一堆不知道什么东西</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/08/25/1SvBzqQDIHAXicw.png" alt="image-20210825150138606"></p>
<ul>
<li>decodeURI<ul>
<li>将一堆不知道什么东西转码为之前的格式</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/08/25/m7tSU4TnNiEvy6K.png" alt="image-20210825150202075"></p>
<ul>
<li>结果</li>
</ul>
<p><img src="https://i.loli.net/2021/08/25/Or2jsXKQaJUtm5E.png" alt="image-20210825150221958"></p>
</li>
<li><p>用于数据据加密和中文数据的传输</p>
</li>
</ul>
<h3 id="九、闭包"><a href="#九、闭包" class="headerlink" title="九、闭包"></a>九、闭包</h3><h4 id="1-概念："><a href="#1-概念：" class="headerlink" title="1.概念："></a>1.概念：</h4><ul>
<li><p>方法中嵌套一个方法</p>
</li>
<li><p>其中一个方法有权访问另一个方法作用域中的变量数据</p>
</li>
<li><p>首先要了解全局变量和局部变量</p>
</li>
</ul>
<h4 id="2-全局变量和局部变量："><a href="#2-全局变量和局部变量：" class="headerlink" title="2.全局变量和局部变量："></a>2.全局变量和局部变量：</h4><ul>
<li>全局变量：script中方法外</li>
<li>局部变量：方法内</li>
</ul>
<h4 id="3-闭包案例"><a href="#3-闭包案例" class="headerlink" title="3.闭包案例"></a>3.闭包案例</h4><p><img src="https://i.loli.net/2021/08/25/BZN3lCRd9JAIqfM.png" alt="image-20210825153408267"></p>
<h3 id="十、Document对象"><a href="#十、Document对象" class="headerlink" title="十、Document对象"></a>十、Document对象</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h4><ul>
<li><p>每个载入浏览器的 HTML 文档都会成为 Document 对象</p>
</li>
<li><p>Document 对象使我们可以从脚本中对 HTML 页面中的所有元素进行访问</p>
</li>
</ul>
<h4 id="2-小案例"><a href="#2-小案例" class="headerlink" title="2.小案例"></a>2.小案例</h4><p><img src="https://i.loli.net/2021/08/25/cbSUpJlshHofyuO.png" alt="image-20210825164039395"></p>
<p>失去焦点时(事件)</p>
<p>轮播图</p>
<p>表格换色</p>
<p><img src="https://i.loli.net/2021/08/25/QXG7Czvwqer8Jo9.png" alt="image-20210825164356009"></p>
<p><img src="https://i.loli.net/2021/08/25/opBFveIWjnH6dRL.png" alt="image-20210825164418419"></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>网络编程</title>
    <url>/2021/08/24/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="一、网络编程"><a href="#一、网络编程" class="headerlink" title="一、网络编程"></a>一、网络编程</h3><h4 id="1-网络编程的概念"><a href="#1-网络编程的概念" class="headerlink" title="1.网络编程的概念"></a>1.网络编程的概念</h4><ul>
<li>学习Java的操作<ul>
<li>操作内存</li>
<li>本地存储（IO流）</li>
<li>和互联网中的设备产生关系</li>
</ul>
</li>
</ul>
<h4 id="2-网编的三要素"><a href="#2-网编的三要素" class="headerlink" title="2.网编的三要素"></a>2.网编的三要素</h4><ul>
<li>网络协议（网络通道）</li>
<li>IP(设备的地址)</li>
<li>端口号（具体软件）<ul>
<li>0-65535</li>
</ul>
</li>
</ul>
<h3 id="二、InetAddress"><a href="#二、InetAddress" class="headerlink" title="二、InetAddress"></a>二、InetAddress</h3><h4 id="1-API概述"><a href="#1-API概述" class="headerlink" title="1.API概述"></a>1.API概述</h4><ul>
<li>包java.net.InetAddress<ul>
<li>导包</li>
</ul>
</li>
<li>修饰符public</li>
<li>使用InetAddress<ul>
<li>构造方法<ul>
<li>没有构造方法</li>
</ul>
</li>
<li>使用静态方法<ul>
<li>通过类名直接调用</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="2-成员方法"><a href="#2-成员方法" class="headerlink" title="2.成员方法"></a>2.成员方法</h4><h5 id="Ⅰ-getByName"><a href="#Ⅰ-getByName" class="headerlink" title="Ⅰ. getByName()"></a>Ⅰ. getByName()</h5><ul>
<li>确定<font color='#d15252'>主机名称</font>和<font color='#d15252'>IP</font>地址</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> InetAddress getByName​(String host)</span><br><span class="line">    <span class="comment">//确定主机名称和IP地址。  </span></span><br></pre></td></tr></table></figure>

<ul>
<li>能获取自己的，也能获取别人的</li>
</ul>
<h5 id="Ⅱ-getLocalHost"><a href="#Ⅱ-getLocalHost" class="headerlink" title="Ⅱ. getLocalHost()"></a>Ⅱ. getLocalHost()</h5><ul>
<li>返回本机的地址<ul>
<li>只能查看自己的，本机的IP </li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> InetAddress <span class="title">getLocalHost</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    <span class="comment">//返回本地主机的地址。</span></span></span><br></pre></td></tr></table></figure>





<h5 id="Ⅲ-getHostName"><a href="#Ⅲ-getHostName" class="headerlink" title="Ⅲ. getHostName()"></a>Ⅲ. getHostName()</h5><ul>
<li>获取此IP地址的主机名</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">String <span class="title">getHostName</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    <span class="comment">//获取此IP地址的主机名。  </span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>返回值String类型</li>
<li>没有static修饰</li>
</ul>
<h5 id="Ⅳ-getHostAddress"><a href="#Ⅳ-getHostAddress" class="headerlink" title="Ⅳ.  getHostAddress()"></a>Ⅳ.  getHostAddress()</h5><ul>
<li>获取IP</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">String <span class="title">getHostAddress</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    <span class="comment">//返回文本显示中的IP地址字符串。  </span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>返回值String类型</li>
<li>没有static修饰</li>
</ul>
<h3 id="三、网络协议"><a href="#三、网络协议" class="headerlink" title="三、网络协议"></a>三、网络协议</h3><h4 id="1-TCP-IP"><a href="#1-TCP-IP" class="headerlink" title="1. TCP/IP"></a>1. TCP/IP</h4><ul>
<li>应用层 <ul>
<li>http ftp DNS<ul>
<li>应用软件之间的通信   — &gt;  前端开发</li>
</ul>
</li>
</ul>
</li>
<li>传输层<ul>
<li>TCP UDP <ul>
<li>负责网络程序通信 — &gt; 后台开发</li>
</ul>
</li>
</ul>
</li>
<li>网络层<ul>
<li>ip icmp IGMP<ul>
<li>负责数据传输的<font color='#d15252'>目标</font></li>
</ul>
</li>
</ul>
</li>
<li>链路层<ul>
<li>驱动程序、接口   <ul>
<li>硬件部分</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/08/16/cfs5AzeaLEKJvW3.png" alt="image-20210816094838044"></p>
<h4 id="2-传输层UDP-快递"><a href="#2-传输层UDP-快递" class="headerlink" title="2.传输层UDP (快递)"></a>2.传输层UDP (快递)</h4><ul>
<li>面向无连接通信<ul>
<li>发送端和接收端<font color='#d15252'>不建立</font>逻辑关系</li>
<li>不在乎对方是否存在/是否接收</li>
<li>耗费资源比较小，通信效率高，通常被用来音频、视频、普通数据的传输</li>
</ul>
</li>
</ul>
<h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><h3 id="四、DatagramPacket-报包"><a href="#四、DatagramPacket-报包" class="headerlink" title="四、DatagramPacket (报包)"></a>四、DatagramPacket (报包)</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h4><ul>
<li>包<ul>
<li>java.net.DatagramPacket<ul>
<li>需要导包</li>
</ul>
</li>
</ul>
</li>
<li>修饰符<ul>
<li>final 最终类 <ul>
<li>不能被继承</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="2-构造方法"><a href="#2-构造方法" class="headerlink" title="2.构造方法"></a>2.构造方法</h4><h5 id="Ⅰ-发送长度为-length的数据包"><a href="#Ⅰ-发送长度为-length的数据包" class="headerlink" title="Ⅰ.发送长度为 length的数据包"></a>Ⅰ.发送长度为 length的数据包</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DatagramPacket(<span class="keyword">byte</span>[] buf, <span class="keyword">int</span> length, InetAddress address, <span class="keyword">int</span> port) </span><br><span class="line"><span class="comment">//构造一个数据包，发送长度为 length的数据包到指定主机上的指定端口号。  </span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>发送长度为 length的数据包偏移量为 offset</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DatagramPacket(<span class="keyword">byte</span>[] buf, <span class="keyword">int</span> offset, <span class="keyword">int</span> length, SocketAddress address) </span><br><span class="line"><span class="comment">//构造一个数据报包，发送长度为 length的数据包，偏移量为 ioffset到指定主机上的指定端口号。  </span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-成员方法-1"><a href="#2-成员方法-1" class="headerlink" title="2.成员方法"></a>2.成员方法</h4><h5 id="Ⅰ-getData"><a href="#Ⅰ-getData" class="headerlink" title="Ⅰ. getData()"></a>Ⅰ. getData()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] getData()</span><br><span class="line"> <span class="comment">//返回数据缓冲区。  </span></span><br></pre></td></tr></table></figure>



<h5 id="Ⅱ-getLength"><a href="#Ⅱ-getLength" class="headerlink" title="Ⅱ. getLength()"></a>Ⅱ. getLength()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLength</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//返回要发送的数据的长度或接收到的数据的长度。 </span></span></span><br></pre></td></tr></table></figure>



<h3 id="五、DatagramSocket-发送报包"><a href="#五、DatagramSocket-发送报包" class="headerlink" title="五、DatagramSocket(发送报包)"></a>五、DatagramSocket(发送报包)</h3><h4 id="1-构造方法"><a href="#1-构造方法" class="headerlink" title="1.构造方法"></a>1.构造方法</h4><h5 id="Ⅰ-DatagramSocket"><a href="#Ⅰ-DatagramSocket" class="headerlink" title="Ⅰ. DatagramSocket()"></a>Ⅰ. DatagramSocket()</h5><ul>
<li>```java<br>DatagramSocket()<br>//创建该类的实例，并且将指定的数据报包进行绑定(任意端口号)<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">#### <span class="number">2.</span>成员方法</span><br><span class="line"></span><br><span class="line">##### Ⅰ. send(DatagramPacket p) &lt;font color=<span class="string">&#x27;#d15252&#x27;</span>&gt;发送&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">void send(DatagramPacket p) 从此套接字发送数据报包。  </span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://i.loli.net/2021/08/16/micTFegHh3V9JAl.png" alt="image-20210816111327413"></p>
<h3 id="六、UDP传输接收端"><a href="#六、UDP传输接收端" class="headerlink" title="六、UDP传输接收端"></a>六、UDP传输<font color='#d15252'>接收端</font></h3><h4 id="DatagramSocket：可以用来发送也可以用来接收"><a href="#DatagramSocket：可以用来发送也可以用来接收" class="headerlink" title="DatagramSocket：可以用来发送也可以用来接收"></a>DatagramSocket：可以用来发送也可以用来接收</h4><h4 id="1-构造方法-1"><a href="#1-构造方法-1" class="headerlink" title="1.构造方法"></a>1.构造方法</h4><h5 id="Ⅰ-DatagramSocket-int-port"><a href="#Ⅰ-DatagramSocket-int-port" class="headerlink" title="Ⅰ. DatagramSocket(int port)"></a>Ⅰ. DatagramSocket(int port)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DatagramSocket(<span class="keyword">int</span> port)</span><br><span class="line"><span class="comment">//构造数据报套接字并将其绑定到本地主机上的指定端口。 </span></span><br></pre></td></tr></table></figure>

<ul>
<li>创建该类实例，并指定要接收的端口号</li>
</ul>
<h4 id="2-成员方法-2"><a href="#2-成员方法-2" class="headerlink" title="2.成员方法"></a>2.成员方法</h4><h5 id="Ⅰ-receive-DatagramPacket-p"><a href="#Ⅰ-receive-DatagramPacket-p" class="headerlink" title="Ⅰ. receive(DatagramPacket p)"></a>Ⅰ. receive(DatagramPacket p)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">receive</span><span class="params">(DatagramPacket p)</span> </span></span><br><span class="line"><span class="function"><span class="comment">//从此套接字接收数据报包。 </span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>参数需要传递一个DatagramPacket对象<ul>
<li>即创建一个报包，用于接收数据</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/08/16/NuHWUCp536ncVk2.png" alt="image-20210816112350372"></p>
<hr>
<h3 id="总结：UDP-发送接收数据报包的步骤"><a href="#总结：UDP-发送接收数据报包的步骤" class="headerlink" title="总结：UDP 发送接收数据报包的步骤"></a>总结：UDP 发送接收数据报包的<font color='#d15252'>步骤</font></h3><h4 id="一、发送"><a href="#一、发送" class="headerlink" title="一、发送"></a>一、发送</h4><ul>
<li><p>将要发送的数据存入byte[]数组</p>
<p><img src="https://i.loli.net/2021/08/16/yUQGD8TclPEWuta.png" alt="image-20210816112518290"></p>
</li>
<li><p>将数据打包</p>
<ul>
<li>使用DatagramPacket的构造方法将数据打包</li>
</ul>
<p><img src="https://i.loli.net/2021/08/16/udH9ewWDxJR2Kzj.png" alt="image-20210816112657659"></p>
<ul>
<li>指定byte[]数据，长度，给出InetAddress对象(地址)，端口号</li>
</ul>
</li>
<li><p>准备发送的工具（快递小哥）</p>
<ul>
<li><p>使用DatagtamSocket构建一个对象，调用它的send方法，发送数据</p>
<p><img src="https://i.loli.net/2021/08/16/2fwUVBmbPy3scNj.png" alt="image-20210816112825275"></p>
</li>
<li><p>send方法需要传递一个DatagramPacket类的对象</p>
</li>
</ul>
</li>
</ul>
<h4 id="二、接收"><a href="#二、接收" class="headerlink" title="二、接收"></a>二、接收</h4><ul>
<li><p>首先要准备一个DatagramPacket对象，用于接收发送端发送过来的数据</p>
<ul>
<li><p>使用简单的构造方法，构造一个DatagramPacket，需要一个byte[]数组</p>
<p><img src="https://i.loli.net/2021/08/16/UQJhknG649aYDHj.png" alt="image-20210816113024029"></p>
</li>
</ul>
</li>
<li><p>创建接收数据报包的工具</p>
<ul>
<li><p>使用DatagramSocket构建一个接收数据报包的工具，带参传递一个端口号</p>
<ul>
<li>端口号需要和发送端一致，才能接收到数据</li>
</ul>
<p><img src="https://i.loli.net/2021/08/16/CjWLb57Ofm4FT8l.png" alt="image-20210816113139335"></p>
</li>
</ul>
</li>
<li><p>接收数据</p>
<ul>
<li><p>调用DatagramSocket的<font color='#d15252'>receive</font>方法，接收数据</p>
<ul>
<li>需要传递一个DatagramPacket对象，用于存储接收的数据<ul>
<li>使用之前准备好的dp，接收数据</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/08/16/sSLiyVxUnMEzHIZ.png" alt="image-20210816113237009"></p>
</li>
</ul>
</li>
<li><p>将接收到的，存在报包中的数据，<font color='#d15252'>取出</font></p>
<ul>
<li>通过.getLength()方法获取数据报包的长度，因为默认编码不支持中文<ul>
<li>如果需要中文可以进行转换为String类型</li>
</ul>
</li>
<li>通过.getData()方法获取数据包中的数据<ul>
<li>返回值是一个byte[]数组类型，用一个数据进行存储</li>
</ul>
</li>
<li>遍历数组进行查看数据</li>
</ul>
<p><img src="https://i.loli.net/2021/08/16/WhSV6Hntoy8px9r.png" alt="image-20210816113548776"></p>
</li>
</ul>
<hr>
<h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a><font color='#d15252'>TCP</font></h2><ul>
<li>严格区分客户端和服务器端<ul>
<li>面向有链接的</li>
</ul>
</li>
<li>客户端 —-&gt; 服务器端<ul>
<li>以VNC为例</li>
</ul>
</li>
</ul>
<h3 id="七、TCP服务器端ServerSocket类"><a href="#七、TCP服务器端ServerSocket类" class="headerlink" title="七、TCP服务器端ServerSocket类"></a>七、TCP服务器端ServerSocket类</h3><h4 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1.概述"></a>1.概述</h4><ul>
<li>包：java.net.ServerSocket <ul>
<li>需要导包</li>
</ul>
</li>
<li>修饰符：public 直接使用</li>
<li>属于网络流，一般服务器端不关流</li>
</ul>
<h4 id="2-构造方法-1"><a href="#2-构造方法-1" class="headerlink" title="2.构造方法"></a>2.构造方法</h4><h5 id="Ⅰ-ServerSocket-int-port"><a href="#Ⅰ-ServerSocket-int-port" class="headerlink" title="Ⅰ. ServerSocket(int port)"></a>Ⅰ. ServerSocket(int port)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServerSocket(<span class="keyword">int</span> port) </span><br><span class="line"><span class="comment">//创建实例，绑定端口号</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/08/16/Cc1oB8eETalW5gf.png" alt="image-20210816135448306"></p>
<h5 id="Ⅱ-其他构造"><a href="#Ⅱ-其他构造" class="headerlink" title="Ⅱ.其他构造"></a>Ⅱ.其他构造</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServerSocket​() 创建未绑定的服务器套接字。  </span><br><span class="line">ServerSocket​(<span class="keyword">int</span> port, <span class="keyword">int</span> backlog) 创建服务器套接字并将其绑定到指定的本地端口号，并指定了积压。  </span><br><span class="line">ServerSocket​(<span class="keyword">int</span> port, <span class="keyword">int</span> backlog, InetAddress bindAddr) 创建一个具有指定端口的服务器，侦听backlog和本地IP地址绑定。  </span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="3-成员方法"><a href="#3-成员方法" class="headerlink" title="3.成员方法"></a>3.成员方法</h4><h5 id="Ⅰ-accept"><a href="#Ⅰ-accept" class="headerlink" title="Ⅰ. accept()"></a>Ⅰ. accept()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Socket <span class="title">accept</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//侦听要连接到此 套接字(报包) 并接受它。  </span></span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>Socket：返回值类型</p>
</li>
<li><p>等待 侦听/接收  客户端数据，没有就一直等待</p>
</li>
</ul>
<p><img src="https://i.loli.net/2021/08/16/vxTwnerutZHG5Cs.png" alt="image-20210816135423394"></p>
<h5 id="Ⅱ-getInputStream"><a href="#Ⅱ-getInputStream" class="headerlink" title="Ⅱ. getInputStream()"></a>Ⅱ. getInputStream()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">InputStream <span class="title">getInputStream</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="comment">//返回此套接字的输入流。  </span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>以客户端为参照物，服务器端用字节输入流，保存数据</li>
</ul>
<p><img src="https://i.loli.net/2021/08/16/chfSwMalk6YEq4B.png" alt="image-20210816141948535"></p>
<h3 id="八、TCP客户端Socket"><a href="#八、TCP客户端Socket" class="headerlink" title="八、TCP客户端Socket"></a>八、TCP客户端Socket</h3><h4 id="1-概述-2"><a href="#1-概述-2" class="headerlink" title="1.概述"></a>1.概述</h4><ul>
<li><p>包：java.net.Socket </p>
<ul>
<li>需要导包</li>
</ul>
</li>
<li><p>修饰符：public 直接使用</p>
</li>
<li><p>属于网络流，用完需要关流</p>
</li>
</ul>
<h4 id="2-构造方法-2"><a href="#2-构造方法-2" class="headerlink" title="2.构造方法"></a>2.构造方法</h4><h5 id="Ⅰ-Socket-InetAddress-a-int-p"><a href="#Ⅰ-Socket-InetAddress-a-int-p" class="headerlink" title="Ⅰ. Socket(InetAddress a, int p)"></a>Ⅰ. Socket(InetAddress a, int p)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Socket(InetAddress address, <span class="keyword">int</span> port)</span><br><span class="line"><span class="comment">//创建该类实例，并指定服务器端</span></span><br></pre></td></tr></table></figure>



<h4 id="3-成员方法-1"><a href="#3-成员方法-1" class="headerlink" title="3.成员方法"></a>3.成员方法</h4><ul>
<li>客户端向服务器端发送数据<ul>
<li>实际上依然是通过IO流进行读写</li>
</ul>
</li>
<li>又因为服务器端不能主动请求和发送数据（例如NVC）<ul>
<li>所以IO流要<font color='#d15252'>以客户端为参照物</font></li>
</ul>
</li>
</ul>
<h5 id="Ⅰ-getOutputStream"><a href="#Ⅰ-getOutputStream" class="headerlink" title="Ⅰ. getOutputStream()"></a>Ⅰ. getOutputStream()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">OutputStream <span class="title">getOutputStream</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"><span class="comment">//返回此套接字的输出流。  </span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>以客户端为参照物，用字节输出流写入数据到服务器端</li>
</ul>
<p><img src="https://i.loli.net/2021/08/16/fBIdhmq84UPrH1v.png" alt="image-20210816141930558"></p>
<h3 id="服务器端回复消息到客户端"><a href="#服务器端回复消息到客户端" class="headerlink" title="服务器端回复消息到客户端"></a>服务器端回复消息到客户端</h3><ul>
<li><p>步骤</p>
<ul>
<li><p>以服务器端为中心</p>
</li>
<li><p>向客户端用字节输出流写入数据</p>
<p><img src="https://i.loli.net/2021/08/16/cdEkNrMyFpvWSbm.png" alt="image-20210816145040488"></p>
</li>
<li><p>客户端用字节输入流接收数据</p>
<p><img src="https://i.loli.net/2021/08/16/SBcoHyIJTW6r3x7.png" alt="image-20210816145113103"></p>
</li>
<li><p>客户端遍历接收到的数据并打印到控制台</p>
</li>
</ul>
</li>
<li><p><font color='#d15252'>注意事项</font>：如果客户端要接收服务器端的返回数据</p>
<ul>
<li>必须先将客户端之前向服务器端写入的输出流关闭<ul>
<li>否则服务器端会一直处于等待数据状态，不会继续执行操作</li>
<li>也就是read处于阻塞状态</li>
</ul>
</li>
<li>通过<font color='#d15252'>关闭客户端输出流</font>，解决阻塞状态</li>
</ul>
</li>
</ul>
<h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><ul>
<li>键盘录入<ul>
<li>当录入no时，停止输入</li>
</ul>
</li>
<li>UDP：多线程的聊天室</li>
<li>TCP：图片上传服务器<ul>
<li>客户端获取图片，发送到服务器</li>
<li>服务器将图片写入另一个文件夹</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>网络编程</tag>
      </tags>
  </entry>
  <entry>
    <title>转换流和缓冲流</title>
    <url>/2021/08/25/%E8%BD%AC%E6%8D%A2%E6%B5%81%E5%92%8C%E7%BC%93%E5%86%B2%E6%B5%81/</url>
    <content><![CDATA[<h3 id="y、InputStreamReader输入转换流"><a href="#y、InputStreamReader输入转换流" class="headerlink" title="y、InputStreamReader输入转换流"></a>y、InputStreamReader输入转换流</h3><h3 id="一、InputStreamReader输入转换流"><a href="#一、InputStreamReader输入转换流" class="headerlink" title="一、InputStreamReader输入转换流"></a>一、InputStreamReader输入转换流</h3><ul>
<li><font color='#d15252'>指定编码格式</font></li>
</ul>
<p><img src="https://i.loli.net/2021/08/10/ayLneKBhlFmp4Xi.png" alt="image-20210810100121551"></p>
<h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h4><ul>
<li>是从字节流到字符流的桥梁：它读取字节，并使用指定的[<code>charset</code>]将其解码为字符</li>
</ul>
<h4 id="2-构造方法"><a href="#2-构造方法" class="headerlink" title="2.构造方法"></a>2.构造方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InputStreamReader​(InputStream in) 创建一个使用默认字符集的InputStreamReader。  </span><br><span class="line">InputStreamReader​(InputStream in, String charsetName) 创建一个使用命名字符集的InputStreamReader。  </span><br><span class="line">InputStreamReader​(InputStream in, Charset cs) 创建一个使用给定字符集的InputStreamReader。  </span><br><span class="line">InputStreamReader​(InputStream in, CharsetDecoder dec) 创建一个使用给定字符集解码器的InputStreamReader。  </span><br></pre></td></tr></table></figure>

<ul>
<li><p>带参构造需要传递一个InputStream类型的对象</p>
<ul>
<li>InputStream是一个接口<ul>
<li>通过他的已知实现子类进行创建对象<ul>
<li>FileInputStream<ul>
<li>又需要一个File对象</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><strong>步骤</strong></li>
</ul>
<p><img src="https://i.loli.net/2021/08/10/xg15ot7RzDypGba.png" alt="image-20210810143433304"></p>
</li>
</ul>
<h3 id="二、OutputStreamReader输出转换流"><a href="#二、OutputStreamReader输出转换流" class="headerlink" title="二、OutputStreamReader输出转换流"></a>二、OutputStreamReader输出转换流</h3><h4 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1.概述"></a>1.概述</h4><ul>
<li>同InputStreamReader</li>
</ul>
<p><img src="https://i.loli.net/2021/08/10/e7PhMWVkZQigDLz.png" alt="image-20210810144431017"></p>
<h3 id="缓冲流的概述"><a href="#缓冲流的概述" class="headerlink" title="缓冲流的概述"></a>缓冲流的概述</h3><ul>
<li>效率：读写速度提高</li>
<li>功能<ul>
<li>字节</li>
<li>字符</li>
</ul>
</li>
</ul>
<h3 id="三、字节缓冲流"><a href="#三、字节缓冲流" class="headerlink" title="三、字节缓冲流"></a>三、<font color='#d15252'>字节</font>缓冲流</h3><ul>
<li> BufferedInputStream 输入缓冲流  — &gt; 读取数据到内存</li>
<li> BufferedOutputStream 输出缓冲流 —&gt; 写入数据到目标文件</li>
</ul>
<h4 id="1-概述-2"><a href="#1-概述-2" class="headerlink" title="1.概述"></a>1.概述</h4><ul>
<li><p>继承体系</p>
<p><img src="https://i.loli.net/2021/08/10/j6FOZDEUCBrnSRv.png" alt="image-20210810151303875"></p>
</li>
<li><p>InputStream –&gt; FilterInputStream —&gt;BufferedInputStream</p>
</li>
<li><p><code>BufferedInputStream</code>为另一个输入流添加了功能，即缓冲输入并支持<code>mark</code>和<code>reset</code>方法的功能</p>
<ul>
<li>  <code>mark</code>操作会记住输入流中的一个点，并且<code>reset</code>操作会导致从最近的<code>mark</code>操作读取的所有字节在从包含的输入流中取出新字节之前重新读取。 </li>
</ul>
</li>
<li><p><code>BufferedInputStream</code>将创建一个内部缓冲区数组</p>
</li>
<li></li>
</ul>
<h4 id="2-构造方法-1"><a href="#2-构造方法-1" class="headerlink" title="2.构造方法"></a>2.构造方法</h4><ul>
<li><p>```java<br>BufferedInputStream (InputStream in) 创建一个 BufferedInputStream并保存其参数，输入流 in供以后使用。<br>BufferedInputStream (InputStream in, int size) 创建具有指定缓冲区大小的 BufferedInputStream ，并保存其参数，输入流 in供以后使用。   //指定缓冲区大小</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">#### <span class="number">3.</span>成员方法</span><br><span class="line"></span><br><span class="line">- read() 、read(byte[] b,int off,int len)</span><br><span class="line"></span><br><span class="line">  ![image<span class="number">-20210810151911879</span>](https:<span class="comment">//i.loli.net/2021/08/10/QriGhqVKH3xywoJ.png)</span></span><br><span class="line"></span><br><span class="line">### &lt;font color=<span class="string">&#x27;#d15252&#x27;</span>&gt;作业&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">![image<span class="number">-20210810154638010</span>](https:<span class="comment">//i.loli.net/2021/08/10/hznCeU2r3oB6v4d.png)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 四、&lt;font color=<span class="string">&#x27;#d15252&#x27;</span>&gt;字符&lt;/font&gt;缓冲流 </span><br><span class="line"></span><br><span class="line">- BufferedWriter</span><br><span class="line">- BufferedReader</span><br><span class="line"></span><br><span class="line">#### <span class="number">1.</span>概述</span><br><span class="line"></span><br><span class="line">- 修饰符：public 公共的可以直接使用</span><br><span class="line">- 继承 Writer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### <span class="number">2.</span>构造方法</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">BufferedWriter (Writer out) 创建使用默认大小的输出缓冲区的缓冲字符输出流。  </span><br><span class="line">BufferedWriter (Writer out, int sz) 创建一个新的缓冲字符输出流，使用给定大小的输出缓冲区。  <span class="comment">//自定义缓冲区大小</span></span><br></pre></td></tr></table></figure></li>
<li><p>带参构造要传递参数一个 Writer类型的变量</p>
<ul>
<li>Write是一个抽象类，需要通过子类实例化<ul>
<li>使用FileWriter实例化</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="3-成员方法"><a href="#3-成员方法" class="headerlink" title="3.成员方法"></a>3.成员方法</h4><p><img src="https://i.loli.net/2021/08/10/1FpWNTQgoXqP6jf.png" alt="image-20210810170324088"></p>
<p><img src="https://i.loli.net/2021/08/10/u5AIkPoKXnyYVR7.png" alt="image-20210810171553360"></p>
<ul>
<li><h5 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h5><ul>
<li>字符缓冲流和字符流一样，不能操作文件的复制粘贴（乱码），只能操作纯文本文件</li>
</ul>
</li>
</ul>
<h3 id="五、所有流总结"><a href="#五、所有流总结" class="headerlink" title="五、所有流总结"></a>五、所有流总结</h3><h4 id="1-继承关系"><a href="#1-继承关系" class="headerlink" title="1.继承关系"></a>1.继承关系</h4><ul>
<li><p>字节流</p>
<p><img src="https://i.loli.net/2021/08/10/CTaUoeyz9tsu4R6.png"></p>
</li>
<li><p>字符流</p>
</li>
</ul>
<p><img src="https://i.loli.net/2021/08/10/gsDie8LW45RrXbI.png" alt="image-20210810194449230"></p>
<p><img src="https://i.loli.net/2021/08/25/Qq8EsATcXZpzO1h.png" alt="image-20210810184044702"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>IO流</tag>
        <tag>转换流</tag>
        <tag>缓冲流</tag>
      </tags>
  </entry>
  <entry>
    <title>集合</title>
    <url>/2021/08/25/%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a><font color='#d15252'>集合</font></h2><h3 id="一、集合和数组的区别"><a href="#一、集合和数组的区别" class="headerlink" title="一、集合和数组的区别"></a>一、集合和数组的区别</h3><ul>
<li>相同点<ul>
<li>都是用来存储数据的</li>
</ul>
</li>
<li>不同点<ul>
<li>数组的长度是固定的，集合的长度是可变的</li>
<li>数组可以存基本数据类型，也可以存引用数据类型</li>
<li>集合只能存引用数据类型 int —&gt; interger</li>
</ul>
</li>
</ul>
<h3 id="二、集合的体系"><a href="#二、集合的体系" class="headerlink" title="二、集合的体系"></a>二、集合的体系</h3><p><font color='orange'>这个颜色是接口</font></p>
<p><font color='cornflowerblue'>这个颜色是具体实现类</font></p>
<h4 id="1-单列集合-Collection"><a href="#1-单列集合-Collection" class="headerlink" title="1.单列集合    Collection"></a>1.单列集合    <font color='orange'>Collection</font></h4><ul>
<li><h5 id="重复的数据-List"><a href="#重复的数据-List" class="headerlink" title="重复的数据    List"></a>重复的数据    <font color='orange'>List</font></h5><ul>
<li><font color='cornflowerblue'>ArrayList </font><ul>
<li>数组结构，有序的</li>
</ul>
</li>
<li><font color='cornflowerblue'>LinkedList </font><ul>
<li>链表结构，无序的</li>
</ul>
</li>
</ul>
</li>
<li><h5 id="不重复的数据-Set"><a href="#不重复的数据-Set" class="headerlink" title="不重复的数据  Set"></a>不重复的数据  <font color='orange'>Set</font></h5><ul>
<li><font color='cornflowerblue'>HashSet </font></li>
<li><font color='cornflowerblue'>TreeSet </font></li>
</ul>
</li>
</ul>
<h4 id="2-双列集合-Map"><a href="#2-双列集合-Map" class="headerlink" title="2.双列集合    Map"></a>2.双列集合    <font color='orange'>Map</font></h4><ul>
<li><font color='cornflowerblue'>HashMap</font> </li>
<li><font color='cornflowerblue'>Three</font> </li>
</ul>
<h3 id="三、单列集合-Collection"><a href="#三、单列集合-Collection" class="headerlink" title="三、单列集合 Collection"></a>三、单列集合 Collection</h3><h4 id="1-Collection的概念"><a href="#1-Collection的概念" class="headerlink" title="1.Collection的概念"></a>1.Collection的概念</h4><ul>
<li><p>Collection是一个接口，不能直接实例化，需要通过子类实例化</p>
<p><img src="https://i.loli.net/2021/08/03/8dg74JoPVunbxER.png" alt="image-20210803153550255"></p>
<ul>
<li>常见的：ArrayList&lt;&gt;</li>
</ul>
</li>
</ul>
<h4 id="2-Collection的成员方法"><a href="#2-Collection的成员方法" class="headerlink" title="2.Collection的成员方法"></a>2.Collection的成员方法</h4><h5 id="①-add-方法"><a href="#①-add-方法" class="headerlink" title="① add()方法"></a>① add()方法</h5><ul>
<li><p>add(数据) 添加一个数据到集合</p>
</li>
<li><p>addAll(集合)，将指定集合中的所有元素添加到此集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">      Collection&lt;Integer&gt; con = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">      Collection&lt;Integer&gt; con2 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">      <span class="comment">//使用add方法添加到集合</span></span><br><span class="line">      con.add(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//使用addAll方法，将一个集合添加到另一个集合</span></span><br><span class="line">      con.addAll(con2);</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="②-clear-方法"><a href="#②-clear-方法" class="headerlink" title="② clear()方法"></a>② clear()方法</h5><ul>
<li><p>从此集合中删除所有元素（可选操作）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//清除集合中所有元素</span></span><br><span class="line">con.clear();</span><br></pre></td></tr></table></figure>



<h5 id="③-size"><a href="#③-size" class="headerlink" title="③ size()"></a>③ size()</h5><h5 id="④-remove"><a href="#④-remove" class="headerlink" title="④ remove()"></a>④ remove()</h5></li>
</ul>
<h4 id="3-集合的遍历"><a href="#3-集合的遍历" class="headerlink" title="3.集合的遍历"></a>3.集合的遍历</h4><p>因为collection类中没有定义get方法，所以不能通过get取数据</p>
<ul>
<li><h5 id="遍历集合的第一种方法，用增强for"><a href="#遍历集合的第一种方法，用增强for" class="headerlink" title="遍历集合的第一种方法，用增强for"></a>遍历集合的第一种方法，用增强for</h5><ul>
<li><p>```java</p>
<pre><code>for (int i : arr)&#123;
    System.out.println(i);
&#125;
</code></pre>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ##### &lt;font color=<span class="string">&#x27;#d15252&#x27;</span>&gt;集合专属的遍历方式&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">  - **iterator()**  返回此集合中元素的迭代器。</span><br><span class="line"></span><br><span class="line">    - 返回值是iterator类型</span><br><span class="line">    - 迭代：顺序</span><br><span class="line"></span><br><span class="line">  - Interface Iterator是一个接口，不能直接使用，但我们可以通过创建对象，调用</span><br><span class="line"></span><br><span class="line">    ```java</span><br><span class="line">            <span class="comment">//遍历集合的第二种方法，用iterator接口</span></span><br><span class="line">            Iterator&lt;Integer&gt; iterator = arr.iterator();</span><br></pre></td></tr></table></figure>

<ul>
<li>iterator中<ul>
<li>有一个next()方法，按顺序返回下一个元素</li>
<li>hasNetx()方法<ul>
<li>如果还有元素，返回true</li>
<li>如果没有元素，返回false</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>使用iterator遍历数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//hasNext()方法判断是否还有数据</span></span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">    <span class="comment">//next()方法按顺序返回值</span></span><br><span class="line">   System.out.println(iterator.next());</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="四、单列集合中的-List"><a href="#四、单列集合中的-List" class="headerlink" title="四、单列集合中的 List"></a>四、单列集合中的 List</h3><h4 id="1-List的概述"><a href="#1-List的概述" class="headerlink" title="1.List的概述"></a>1.List的概述</h4><ul>
<li>接口</li>
<li>有序的（怎么放的，怎么拿）</li>
</ul>
<h4 id="2-List的成员方法"><a href="#2-List的成员方法" class="headerlink" title="2.List的成员方法"></a>2.List的成员方法</h4><ul>
<li>拥有get()方法，可以对索引进行操作</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//list可以使用get方法,通过索引取值</span></span><br><span class="line">System.out.println(list.get(<span class="number">0</span>));</span><br><span class="line"><span class="comment">//使用get方法遍历集合</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;list.size();i++)&#123;</span><br><span class="line">    System.out.println(list.get(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>List集合也可以使用迭代器</li>
<li>add（）、clear（）、equals（）、remove()、等方法</li>
</ul>
<h4 id="3-List的特点"><a href="#3-List的特点" class="headerlink" title="3.List的特点"></a>3.List的特点</h4><ul>
<li>存取有序</li>
<li>可以重复</li>
<li>有索引</li>
</ul>
<h4 id="4-List特有-常用-的方法"><a href="#4-List特有-常用-的方法" class="headerlink" title="4.List特有(常用)的方法"></a>4.List特有(常用)的方法</h4><ul>
<li><p>```java</p>
<ul>
<li>void add (int index,E element) 添加</li>
<li>remove(int index)            根据索引删除</li>
<li>set(int index,E Element)    修改</li>
<li>get(int index)        获取所在索引值<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 五、数据结构特点（记住）</span><br><span class="line"></span><br><span class="line">- 栈和队列</span><br><span class="line">  - 栈结构</span><br><span class="line">    - 先进后出</span><br><span class="line">  - 队列结构</span><br><span class="line">    - 先进先出</span><br><span class="line">- 数组和链表</span><br><span class="line">  - 数组结构</span><br><span class="line">    - 查询快，增删慢</span><br><span class="line">  - 链表结构</span><br><span class="line">    - 查询满，增删快</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 六、ArrayList和LinkedList </span><br><span class="line"></span><br><span class="line">#### <span class="number">1.</span>ArrayList</span><br><span class="line"></span><br><span class="line">- ​	底层结构是**&lt;font color=<span class="string">&#x27;#d15252&#x27;</span>&gt;数组结构&lt;/font&gt;**，查询快，增删慢</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>LinkedList</span><br><span class="line"></span><br><span class="line">- 底层结构是&lt;font color=<span class="string">&#x27;#d15252&#x27;</span>&gt;**链表结构**&lt;/font&gt;，查询慢，增删快</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 一、Set集合</span><br><span class="line"></span><br><span class="line">#### <span class="number">1.</span>Set集合的概述</span><br><span class="line"></span><br><span class="line">- 是一个接口，有很多已知实现类</span><br><span class="line">  - 常用子类 HashSet、LinkedHashSet、TreeSet</span><br><span class="line">- 是一个单列集合</span><br><span class="line">- &lt;font color=<span class="string">&#x27;#d15252&#x27;</span>&gt;不能存重复的元素&lt;/font&gt;</span><br><span class="line">- &lt;font color=<span class="string">&#x27;#d15252&#x27;</span>&gt;Set集合是无序的，不保证一定无序&lt;/font&gt;</span><br><span class="line">  - 实际上是按照Hash值排列的	</span><br><span class="line">    - 所以最好不要存整数</span><br><span class="line"></span><br><span class="line">#### <span class="number">2.</span>Set集合的使用</span><br><span class="line"></span><br><span class="line">- 用多态的方式实例化接口</span><br><span class="line"></span><br><span class="line">- Set集合有已知子类直接使用</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">    <span class="comment">//Set集合是一个接口，需要通过多态的方式实例化，重写父类中的方法</span></span><br><span class="line">          <span class="comment">//Set集合不能存重复的数据</span></span><br><span class="line">          Set&lt;Integer&gt; set = new HashSet&lt;Integer&gt;();</span><br><span class="line">          <span class="comment">//向set集合中添加数据</span></span><br><span class="line">          set.add(<span class="number">1</span>);</span><br><span class="line">          set.add(<span class="number">2</span>);</span><br><span class="line">          set.add(<span class="number">1</span>);</span><br><span class="line">          <span class="comment">//输出集合</span></span><br><span class="line">          System.out.println(set);</span><br><span class="line">          <span class="comment">//可以看到输出了[1,2]</span></span><br><span class="line">          <span class="comment">//1并没有重复保存</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Set集合是无序的</p>
</li>
</ul>
<h3 id="二、HashSet"><a href="#二、HashSet" class="headerlink" title="二、HashSet"></a>二、HashSet</h3><ul>
<li>允许存null值</li>
<li>对迭代顺序不做任何保证 </li>
<li>容量和size是两个概念<ul>
<li>容量：容器的长度</li>
<li>size：内容的长度</li>
</ul>
</li>
<li>开发中ArrayList集合使用的较多</li>
<li>HashSet没有索引</li>
<li>HashSet底层数据结构是：<font color='#d15252'><strong>哈希表+链表结构</strong></font></li>
</ul>
<h4 id="1-构造方法"><a href="#1-构造方法" class="headerlink" title="1.构造方法"></a>1.构造方法</h4><h5 id="Ⅰ-无参构造"><a href="#Ⅰ-无参构造" class="headerlink" title="Ⅰ.无参构造"></a>Ⅰ.无参构造</h5><ul>
<li>实例具有默认初始容量（16）和负载因子（0.75）。</li>
</ul>
<h5 id="Ⅱ-带参构造"><a href="#Ⅱ-带参构造" class="headerlink" title="Ⅱ.带参构造"></a>Ⅱ.带参构造</h5><ul>
<li><p>参数传递一个Int类型的数据，是集合<font color='#d15252'>指定初始容量</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="Ⅲ-带参构造"><a href="#Ⅲ-带参构造" class="headerlink" title="Ⅲ.带参构造"></a>Ⅲ.带参构造</h5><ul>
<li><p>参数传递一个Collection集合，重复的值不会录入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-成员方法"><a href="#2-成员方法" class="headerlink" title="2.成员方法"></a>2.成员方法</h4><ul>
<li>方法都有返回值，可以通过接收add、remove等方法的返回值（布尔类型），来判断是否操作成功</li>
</ul>
<h5 id="Ⅰ-add-方法"><a href="#Ⅰ-add-方法" class="headerlink" title="Ⅰ.add()方法"></a>Ⅰ.add()方法</h5><ul>
<li><p>将指定的元素添加到此集合（如果尚未存在）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashSet&lt;Object&gt; s = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="comment">//添加元素</span></span><br><span class="line">s.add(<span class="number">1</span>);</span><br><span class="line">s.add(<span class="number">2</span>);</span><br><span class="line">s.add(<span class="number">3</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="Ⅱ-remove"><a href="#Ⅱ-remove" class="headerlink" title="Ⅱ.remove()"></a>Ⅱ.remove()</h5><ul>
<li><p>如果存在，则从该集合中删除指定的元素 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除元素</span></span><br><span class="line">s.remove(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>HashSet<font color='#d15252'>没有索引</font></li>
</ul>
</li>
</ul>
<h5 id="Ⅲ-clear"><a href="#Ⅲ-clear" class="headerlink" title="Ⅲ.clear()"></a>Ⅲ.clear()</h5><ul>
<li>删除集合中的所有元素</li>
</ul>
<h5 id="Ⅳ-size"><a href="#Ⅳ-size" class="headerlink" title="Ⅳ.size()"></a>Ⅳ.size()</h5><ul>
<li>返回集合中的元素数</li>
</ul>
<h5 id="Ⅴ-iterator"><a href="#Ⅴ-iterator" class="headerlink" title="Ⅴ.iterator()"></a>Ⅴ.iterator()</h5><ul>
<li>返回集合中元素的迭代器</li>
</ul>
<h3 id="三、TreeSet"><a href="#三、TreeSet" class="headerlink" title="三、TreeSet"></a>三、TreeSet</h3><ul>
<li>Set是无序的</li>
<li>TreeSet可以自定义排序顺序</li>
</ul>
<h4 id="1-构造方法-1"><a href="#1-构造方法-1" class="headerlink" title="1.构造方法"></a>1.构造方法</h4><h5 id="Ⅰ-无参构造-1"><a href="#Ⅰ-无参构造-1" class="headerlink" title="Ⅰ.无参构造"></a>Ⅰ.无参构造</h5><ul>
<li><p>构造一个新的，空的树组，根据其元素的自然排序进行排序</p>
<ul>
<li>自然排序：自动默认排序，根据哈希码或ASCII码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TreeSet&lt;String&gt; t = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="Ⅱ-有参构造-集合"><a href="#Ⅱ-有参构造-集合" class="headerlink" title="Ⅱ.有参构造(集合)"></a>Ⅱ.有参构造(集合)</h5><ul>
<li><p>构造一个包含指定集合中的元素的新树集，根据其元素的 <em>自然排序进行排序</em> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeSet​(Collection&lt;? extends E&gt; c)</span><br></pre></td></tr></table></figure>

<ul>
<li>带参一个集合</li>
</ul>
</li>
</ul>
<h5 id="Ⅲ-带参构造-Comparator自定义顺序"><a href="#Ⅲ-带参构造-Comparator自定义顺序" class="headerlink" title="Ⅲ.带参构造(Comparator自定义顺序)"></a>Ⅲ.<font color='#d15252'>带参构造(Comparator自定义顺序)</font></h5><ul>
<li>构造一个新的，空的树集，根据指定的比较器进行排序。</li>
<li>先欠着，以后晚自习将</li>
</ul>
<h3 id="四、泛型"><a href="#四、泛型" class="headerlink" title="四、泛型"></a>四、泛型</h3><h4 id="1-什么是泛型"><a href="#1-什么是泛型" class="headerlink" title="1.什么是泛型"></a>1.什么是泛型</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TreeSet&lt;String&gt; t = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br></pre></td></tr></table></figure>

<ul>
<li><p>&lt;&gt;中的东西</p>
</li>
<li><p>泛型实际的含义就是任意类型（Object）</p>
<ul>
<li>jdk5以后引入的新特性，为了提高编译时的类型安全检测机制</li>
</ul>
</li>
<li><p>Java中出现 E V K ：指的就是任意类型</p>
</li>
</ul>
<h4 id="2-泛型的优点"><a href="#2-泛型的优点" class="headerlink" title="2.泛型的优点"></a>2.泛型的优点</h4><ul>
<li><p>可以将运行时的异常提前到编译时</p>
</li>
<li><p>避免了数据类型的强制转换</p>
</li>
<li><p>Java中如果没有明确标明集合类型，则集合中的数据不管是什么类型，都会<font color='#d15252'>向上转型为Object</font>类型</p>
</li>
</ul>
<h4 id="3-定义泛型类"><a href="#3-定义泛型类" class="headerlink" title="3.定义泛型类"></a>3.定义泛型类</h4><ul>
<li><p>定义格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名&lt;类型&gt;</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>定义泛型方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符&lt;类型&gt; 返回值类型 方法名（数据类型 变量名）&#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>定义泛型接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">interface</span> 接口名&lt;类型&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>定义泛型类、泛型方法的意义：告诉使用者，我这个方法可以传任意的数据</p>
</li>
</ul>
<h3 id="五、类型的通配符"><a href="#五、类型的通配符" class="headerlink" title="五、类型的通配符"></a>五、类型的通配符</h3><h4 id="1-lt-gt"><a href="#1-lt-gt" class="headerlink" title="1.&lt;?&gt;"></a>1.&lt;?&gt;</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?&gt;：可以匹配任意的类型</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/08/04/ymbeGhsTRi8gEXI.png" alt="image-20210804114626328"></p>
<ul>
<li>通常用于方法定义参数，不知道传递什么类型时，使用&lt;?&gt;</li>
</ul>
<h4 id="2-类型的通配符上限-lt-extends-类型-gt"><a href="#2-类型的通配符上限-lt-extends-类型-gt" class="headerlink" title="2.类型的通配符上限&lt;? extends 类型&gt;"></a>2.类型的通配符上限&lt;? extends 类型&gt;</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;? extends 类型&gt; 表示类型的通配符上限</span><br><span class="line"></span><br><span class="line"><span class="comment">//例如 &lt;? extends number&gt;</span></span><br><span class="line"><span class="comment">//表示Number本身或它的子类</span></span><br></pre></td></tr></table></figure>



<h4 id="3-类型通配符的下限-lt-super-类型-gt"><a href="#3-类型通配符的下限-lt-super-类型-gt" class="headerlink" title="3.类型通配符的下限&lt;? super 类型&gt;"></a>3.类型通配符的下限&lt;? super 类型&gt;</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;? <span class="keyword">super</span> 类型&gt; 表示类型通配符的下限</span><br><span class="line"></span><br><span class="line"><span class="comment">//例如 &lt;? super number&gt;</span></span><br><span class="line"><span class="comment">//表示Number本身或它的父类</span></span><br></pre></td></tr></table></figure>



<h3 id="六、Map-双列集合"><a href="#六、Map-双列集合" class="headerlink" title="六、Map(双列集合)"></a>六、<font color='#d15252'>Map(双列集合)</font></h3><ul>
<li>是一个泛型接口</li>
<li>该容器，能够存储两列<ul>
<li>1</li>
<li>键值对关系，通过键去取值</li>
</ul>
</li>
<li>将键映射到值的对象。 双列集合<font color='#d15252'>不能包含重复的键</font>，每个键可以映射到最多一个值。 <ul>
<li>键：Key</li>
<li>值：value</li>
</ul>
</li>
</ul>
<h4 id="1-存数"><a href="#1-存数" class="headerlink" title="1.存数"></a>1.存数</h4><ul>
<li><p>使用.put()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">put(键、值);</span><br></pre></td></tr></table></figure>

<ul>
<li>将指定的值与该映射中的指定键相关联（可选操作）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">        <span class="comment">//Map双列集合</span></span><br><span class="line">        Map&lt;Integer,String&gt; s = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//输出集合</span></span><br><span class="line">        System.out.println(s);</span><br><span class="line">        <span class="comment">//向双列数组中存数</span></span><br><span class="line">        s.put(<span class="number">1</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        s.put(<span class="number">2</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        s.put(<span class="number">1</span>,<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        System.out.println(s);</span><br><span class="line"><span class="comment">//输出&#123;&#125;  &#123;1=b,2=a&#125;;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>key键值<font color='#d15252'>不能重复</font></li>
<li>value可以重复</li>
</ul>
</li>
<li><p>如果存入相同的键，则随机抛出一个</p>
</li>
<li><p>put()方法返回值是返回 之前覆盖掉的数据</p>
</li>
</ul>
<h4 id="2-取值"><a href="#2-取值" class="headerlink" title="2.取值"></a>2.取值</h4><h5 id="Ⅰ-可以使用get-方法取值"><a href="#Ⅰ-可以使用get-方法取值" class="headerlink" title="Ⅰ.可以使用get()方法取值"></a>Ⅰ.可以使用get()方法取值</h5><ul>
<li><p>但是键值不是固定的顺序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用get方法取值</span></span><br><span class="line">System.out.println(map.get(<span class="number">1</span>));</span><br></pre></td></tr></table></figure></li>
<li><p>不能通过for循环遍历集合中的键值对</p>
</li>
</ul>
<h5 id="Ⅱ-entrySet"><a href="#Ⅱ-entrySet" class="headerlink" title="Ⅱ.entrySet"></a>Ⅱ.entrySet</h5><ul>
<li>是Map的内部类<ul>
<li>为了保存K和V<ul>
<li>但键和值并不是个别的，有很多个</li>
</ul>
</li>
<li>所以将得到的值<font color='#d15252'>封装到一个Set集合</font>中</li>
</ul>
</li>
<li>返回值为Map.Entry类型（内部类）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;Map.Entry&lt;Integer,String&gt;&gt; set = map.entrySet();</span><br></pre></td></tr></table></figure>

<ul>
<li>返回A双列集合中包含的映射的键值对。该集合由A双列集合支持，因此对双列集合的更改将反映在集合A中，反之亦然。 </li>
<li>即定义一个Set集合，保存entrySet()方法返回的数据</li>
</ul>
<h6 id="for循环-Map-Entry取值"><a href="#for循环-Map-Entry取值" class="headerlink" title="for循环+Map.Entry取值"></a>for循环+Map.Entry取值</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//增强for循环取出值   数据类型 变量名 ： 要取的数据</span></span><br><span class="line"><span class="keyword">for</span> ( Map.Entry&lt;Integer,String&gt; i : set )&#123;</span><br><span class="line">    System.out.println(i.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="Iterator迭代器-Map-Entry取值"><a href="#Iterator迭代器-Map-Entry取值" class="headerlink" title="Iterator迭代器+Map.Entry取值"></a>Iterator迭代器+Map.Entry取值</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//调用entrySet()方法，取出双列集合中的键值对</span></span><br><span class="line"><span class="comment">//并用一个Set集合保存，此时 Set集合中存的键值对就是Map.Entry类型的</span></span><br><span class="line">Set&lt;Map.Entry&lt;Integer,String&gt;&gt; set = map.entrySet();</span><br><span class="line"><span class="comment">//set调用迭代器，按顺序取出Set集合中的键值对</span></span><br><span class="line">Iterator&lt;Map.Entry&lt;Integer,String&gt;&gt; it = set.iterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext())&#123;</span><br><span class="line">    <span class="comment">//用取出的键值对，调用Map.Entry的get方法，获取数据</span></span><br><span class="line">    System.out.println(it.next().getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="Ⅳ-keySet-方法取值"><a href="#Ⅳ-keySet-方法取值" class="headerlink" title="Ⅳ.keySet()方法取值"></a>Ⅳ.keySet()方法取值</h5><ul>
<li><p>返回此双列集合中包含的键的[<code>Set</code>]视图。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Set&lt;K&gt; <span class="title">keySet</span> <span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>取出map集合中的键，并存入Set集合</li>
</ul>
</li>
</ul>
<h6 id="for循环-keySet-取值"><a href="#for循环-keySet-取值" class="headerlink" title="for循环+keySet()取值"></a>for循环+keySet()取值</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用KeySet方法取出Map集合中的键值</span></span><br><span class="line"><span class="comment">//因为键值是Integer类型的，所以泛型设置Integer</span></span><br><span class="line">Set&lt;Integer&gt; it = map.keySet();</span><br><span class="line"><span class="comment">//用增强for循环取出Set中的键值，通过键值调用get方法</span></span><br><span class="line"><span class="keyword">for</span> ( Integer i : it ) &#123;</span><br><span class="line">    <span class="comment">//用map调用get方法取值，放入keySet取出的键值</span></span><br><span class="line">    System.out.println(map.get(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="Iterator迭代器-keySet-取值"><a href="#Iterator迭代器-keySet-取值" class="headerlink" title="Iterator迭代器+keySet()取值"></a>Iterator迭代器+keySet()取值</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//迭代器取值</span></span><br><span class="line">Iterator&lt;Integer&gt; it = set.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">    System.out.println(map.get(it.next()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-作业"><a href="#3-作业" class="headerlink" title="3.作业"></a>3.作业</h4><ul>
<li>第一题<ul>
<li>ll创建一个Map集合java，存入Java一班的学生数据</li>
<li>创建一个Map集合c，存入c语言班的学生数据</li>
<li>创建一个Map集合，存入Java、c</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Date</tag>
        <tag>DateFormat</tag>
        <tag>Calender</tag>
        <tag>迭代器</tag>
        <tag>集合</tag>
        <tag>单列集合</tag>
        <tag>双列集合</tag>
      </tags>
  </entry>
  <entry>
    <title>图书管理系统</title>
    <url>/2021/09/09/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="图书管理系统"><a href="#图书管理系统" class="headerlink" title="图书管理系统"></a>图书管理系统</h2><h3 id="一、项目准备"><a href="#一、项目准备" class="headerlink" title="一、项目准备"></a>一、项目准备</h3><ul>
<li><p>创建项目并测试环境</p>
<ul>
<li>创建JavaWeb项目</li>
</ul>
</li>
<li><p>配置Tomcat</p>
<ul>
<li>修改端口号</li>
<li>更改Deployment项目路径</li>
</ul>
</li>
<li><p>在WEB-INF下新建libs包，导入相关Jar包</p>
<p><img src="https://i.loli.net/2021/09/09/iVhA1s7bIm5YXr8.png" alt="image-20210909093228809"></p>
<ul>
<li>连接数据库Jar包、EL表达式等Jar包</li>
</ul>
</li>
<li><p>创建数据库数据</p>
<p><img src="https://i.loli.net/2021/09/09/oJSaH6OF57lDIB2.png" alt="image-20210909093404006"></p>
</li>
<li><p>导入前端页面文件</p>
<p><img src="https://i.loli.net/2021/09/09/BhZ1IXkSdA4spcM.png" alt="image-20210909093441541"></p>
</li>
</ul>
<h3 id="二、实现登录功能"><a href="#二、实现登录功能" class="headerlink" title="二、实现登录功能"></a>二、实现登录功能</h3><p><img src="https://i.loli.net/2021/09/09/fb7eEuhIsTktcwB.png" alt="image-20210909102014866"></p>
<h4 id="1-前端"><a href="#1-前端" class="headerlink" title="1.前端"></a>1.前端</h4><ul>
<li><p>通过查看login登录页面前端代码得到以下信息</p>
<p><img src="https://i.loli.net/2021/09/09/5tAIQoWMUmiEe7z.png" alt="image-20210909093623925"></p>
<ul>
<li>登录表单提交数据到Login程序中</li>
<li>前端提交数据中，用户名-username，密码-password，以及登录的类型-type</li>
</ul>
</li>
</ul>
<h4 id="2-Servlet层"><a href="#2-Servlet层" class="headerlink" title="2.Servlet层"></a>2.Servlet层</h4><ul>
<li><p>新建Web程序，继承HttpServlet类，重写doGet，doPost方法，起名为login</p>
</li>
<li><p>接收前端提交的用户名和密码以及登录类型</p>
<p><img src="https://i.loli.net/2021/09/09/anlVpmYLN5SMKgb.png" alt="image-20210909094328375"></p>
</li>
<li><p>将接收的数据传给Service层进行判断处理</p>
<p><img src="https://i.loli.net/2021/09/09/ic8nvEjTH5aJ9VZ.png" alt="image-20210909094338664"></p>
<ul>
<li>如果登录成功，Service层会返回一个对象，并封装了用户的相关参数</li>
</ul>
</li>
<li><p>登录成功后根据登录的类型，将对象存入Session域中</p>
<p><img src="https://i.loli.net/2021/09/09/7jIsLez5rVncqCO.png" alt="image-20210909094354695"></p>
<ul>
<li>普通用户登录成功后，跳转到/show展示index页面数据的程序</li>
<li>管理员用户登录成功后，跳转到admin显示管理员的页面数据程序</li>
</ul>
</li>
</ul>
<h4 id="3-Service层"><a href="#3-Service层" class="headerlink" title="3.Service层"></a>3.Service层</h4><ul>
<li><p>LibraryService接口中，创建登录方法</p>
<p><img src="https://i.loli.net/2021/09/09/6nj4pCdolc8YiIt.png" alt="image-20210909094504024"></p>
<ul>
<li>接收Servlet传递的参数</li>
</ul>
</li>
<li><p>Service实现类中重写login登入方法</p>
<ul>
<li>判断登入用户是普通用户还是管理员</li>
<li>根据用户类型调用Dao层方法，获取不同的表数据（user/admin）</li>
<li>循环遍历数据库取出的数据，与登入提交的数据进行比较，如果有匹配数据，即登录成功</li>
<li>否则登录失败，返回null，Servlet判断返回控制，重写刷新login页面</li>
</ul>
<p><img src="https://i.loli.net/2021/09/09/TWpDclahLzUMSyq.png" alt="image-20210909094858303"></p>
</li>
</ul>
<h4 id="4-Dao层"><a href="#4-Dao层" class="headerlink" title="4.Dao层"></a>4.Dao层</h4><ul>
<li><p>Dao层接口新建普通用户表查询和管理员表查询方法</p>
<p><img src="https://i.loli.net/2021/09/09/2tW93p8TyuFiZh1.png" alt="image-20210909094948232"></p>
</li>
<li><p>Dao层重写普通用户登录方法</p>
<ul>
<li>获取数据库连接</li>
<li>执行sql查询语句</li>
<li>将查询数据封装到对象中，并存入集合</li>
<li>返回集合</li>
</ul>
<p><img src="https://i.loli.net/2021/09/09/Q3GUm5fw6H7vNyz.png" alt="image-20210909095044999"></p>
</li>
<li><p>管理员用户登录</p>
<p><img src="https://i.loli.net/2021/09/09/vizqa61RyVh2gIW.png" alt="image-20210909095113759"></p>
</li>
</ul>
<h4 id="5-JavaBeean"><a href="#5-JavaBeean" class="headerlink" title="5.JavaBeean"></a>5.JavaBeean</h4><ul>
<li><p>新建User(Reader)实体类</p>
<ul>
<li><p>成员变量如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="comment">//账号</span></span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="comment">//密码</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> password;</span><br><span class="line"><span class="comment">//实名</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="comment">//电话</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> tel;</span><br><span class="line"><span class="comment">//卡号</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> cardid;</span><br><span class="line"><span class="comment">//性别</span></span><br><span class="line"><span class="keyword">private</span> String gender;</span><br></pre></td></tr></table></figure></li>
<li><p>重写构造方法，get/set方法，toString方法，equal和hascode方法</p>
</li>
</ul>
</li>
<li><p>新建Admin实体类</p>
<ul>
<li><p>成员变量如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> password;</span><br></pre></td></tr></table></figure></li>
<li><p>重写构造方法，get/set方法，toString方法，equal和hascode方法</p>
</li>
</ul>
</li>
</ul>
<h3 id="三、实现index页面数据显示"><a href="#三、实现index页面数据显示" class="headerlink" title="三、实现index页面数据显示"></a>三、实现index页面数据显示</h3><p><img src="https://i.loli.net/2021/09/09/uWHvRVDEXgo5LJS.png" alt="image-20210909102037166"></p>
<h4 id="1-Servlet层"><a href="#1-Servlet层" class="headerlink" title="1.Servlet层"></a>1.Servlet层</h4><ul>
<li>新建showBook类，重写doGet，doPost</li>
<li>获取数据库数据，将数据存入requset域中<ul>
<li>前端通过request获取域中的数据，并将数据展示</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">      String current = req.getParameter(<span class="string">&quot;page&quot;</span>); <span class="comment">//获取当前页</span></span><br><span class="line">      <span class="comment">//获取书籍数据</span></span><br><span class="line">      ArrayList&lt;Book&gt; books = <span class="keyword">new</span> LibraryDaoImp().showBook();</span><br><span class="line">      Page page = <span class="keyword">new</span> LibraryServiceImp().getPage(current,books); <span class="comment">//调用方法获取page对象</span></span><br><span class="line">      req.setAttribute(<span class="string">&quot;page&quot;</span>, page);<span class="comment">//将page对象存入域中</span></span><br><span class="line">      <span class="comment">//获取集合</span></span><br><span class="line">      List&lt;Book&gt; list = (List&lt;Book&gt;) page.getList();</span><br><span class="line">      <span class="comment">//将书籍存入域中</span></span><br><span class="line">      req.setAttribute(<span class="string">&quot;books&quot;</span>,list);</span><br><span class="line">      <span class="comment">//跳转页面</span></span><br><span class="line">      req.getRequestDispatcher(<span class="string">&quot;index.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>代码中包含了后期添加的分页功能，后面在详细解释</p>
</blockquote>
<h4 id="2-Service层"><a href="#2-Service层" class="headerlink" title="2.Service层"></a>2.Service层</h4><ul>
<li><p>创建showBook类，返回值rrayList&lt; Book &gt; 类型</p>
<p><img src="https://i.loli.net/2021/09/09/SxUFf1wT3QJjROG.png" alt="image-20210909101230979"></p>
</li>
<li><p>实现类重写方法</p>
<ul>
<li>创建Dao层对象，调用查询数据表的方法，获取数据数据集合，并return带回给Servlet层</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span>   <span class="comment">//展示书籍</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;Book&gt; <span class="title">showBook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//获取数据集合</span></span><br><span class="line">      <span class="comment">//将集合返回给Servlet程序，发送给前端</span></span><br><span class="line">	ArrayList&lt;Book&gt; books = <span class="keyword">new</span> LibraryDaoImp().showBook();</span><br><span class="line">        <span class="keyword">return</span> books;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="3-Dao层"><a href="#3-Dao层" class="headerlink" title="3.Dao层"></a>3.Dao层</h4><ul>
<li><p>Dao层接口中定义查询书籍信息的方法</p>
<p><img src="https://i.loli.net/2021/09/09/zmWeb5OUPEFZBTJ.png" alt="image-20210909101635514"></p>
</li>
<li><p>Dao层实现类重写方法，并将取出的数据封装成Book对象，存入集合中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;Book&gt; <span class="title">showBook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//连接数据库</span></span><br><span class="line">    Connection connect = ConnectTool.getConnect();</span><br><span class="line">    ArrayList&lt;Book&gt; books = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//获取工具</span></span><br><span class="line">        Statement statement = connect.createStatement();</span><br><span class="line">        <span class="comment">//执行查询语句</span></span><br><span class="line">        ResultSet resultSet = statement.executeQuery(<span class="string">&quot;SELECT * FROM book&quot;</span>);</span><br><span class="line">        <span class="comment">//存入集合</span></span><br><span class="line">        <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">            books.add(<span class="keyword">new</span> Book(</span><br><span class="line">                    resultSet.getInt(<span class="string">&quot;id&quot;</span>),</span><br><span class="line">                    resultSet.getString(<span class="string">&quot;name&quot;</span>),</span><br><span class="line">                    resultSet.getString(<span class="string">&quot;author&quot;</span>),</span><br><span class="line">                    resultSet.getString(<span class="string">&quot;publish&quot;</span>),</span><br><span class="line">                    resultSet.getInt(<span class="string">&quot;pages&quot;</span>),</span><br><span class="line">                    resultSet.getInt(<span class="string">&quot;price&quot;</span>),</span><br><span class="line">                    resultSet.getInt(<span class="string">&quot;bookcaseid&quot;</span>),</span><br><span class="line">                    resultSet.getInt(<span class="string">&quot;abled&quot;</span>)</span><br><span class="line">            ));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        ConnectTool.closeConnect(connect, resultSet, statement);</span><br><span class="line">        <span class="keyword">return</span> books;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">        throwables.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> books;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="4-JavaBeen"><a href="#4-JavaBeen" class="headerlink" title="4.JavaBeen"></a>4.JavaBeen</h4><ul>
<li><p>新建Book实体类</p>
<ul>
<li><p>成员变量如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String author;</span><br><span class="line"><span class="comment">//出版社</span></span><br><span class="line"><span class="keyword">private</span> String publish;</span><br><span class="line"><span class="comment">//页数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> pages;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> price;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> bookcaseid;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> abled;</span><br></pre></td></tr></table></figure></li>
<li><p>重写构造方法，get/set方法，toString方法，equal和hascode方法</p>
</li>
</ul>
</li>
</ul>
<h3 id="四、实现用户借阅以及借阅页面的查询"><a href="#四、实现用户借阅以及借阅页面的查询" class="headerlink" title="四、实现用户借阅以及借阅页面的查询"></a>四、实现用户借阅以及借阅页面的查询</h3><p><img src="https://i.loli.net/2021/09/09/QJmH3RT98tXaDgr.png" alt="image-20210909102054614"></p>
<h4 id="1-前端-1"><a href="#1-前端-1" class="headerlink" title="1.前端"></a>1.前端</h4><p><img src="https://i.loli.net/2021/09/09/BrGlCLAxbz83qXS.png" alt="image-20210909102134615"></p>
<ul>
<li>当在index页面点击用户名时，跳转到/book程序</li>
<li>并get方式传递参数method=findAllBorrow<ul>
<li>以及page=1(后面数据分页使用，暂不提)</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/09/09/LQcfobiGr3lHTAw.png" alt="image-20210909102425486"></p>
<ul>
<li>当用户点击index页面数据信息后的<font color='#d15252'>借阅</font>按钮时，跳转到/book程序</li>
<li>并get方式传递参数method=addAllBorrow<ul>
<li>以及携带参数bookid（当前点击借阅的书籍id）</li>
</ul>
</li>
</ul>
<h4 id="2-Servlet层-1"><a href="#2-Servlet层-1" class="headerlink" title="2.Servlet层"></a>2.Servlet层</h4><ul>
<li><p>新建book程序，重写doGet，doPost方法，接收前端数据method以及bookid</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String method = req.getParameter(<span class="string">&quot;method&quot;</span>);</span><br><span class="line">String bookid = req.getParameter(<span class="string">&quot;bookid&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>判断method是addBorrow还是findAllBorrow</p>
<ul>
<li>如果是add则是添加借阅的图书</li>
<li>如果是find则是显示所有借阅的图书</li>
</ul>
</li>
<li><p>addBorrow</p>
<ul>
<li>通过req获取Session对象，获取当前登录用户的对象（信息）</li>
<li>调用Service层的addBorrow方法，将用户对象及书籍id传递过去<ul>
<li>Service层进行一系列添加操作</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加借阅</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;addBorrow&quot;</span>.equals(method))&#123;</span><br><span class="line">    User u =(User) req.getSession().getAttribute(<span class="string">&quot;reader&quot;</span>);</span><br><span class="line">    <span class="keyword">new</span> LibraryServiceImp().addBorrow(bookid,u);</span><br><span class="line">    req.getRequestDispatcher(<span class="string">&quot;/show&quot;</span>).forward(req,resp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>findAllBorrow</p>
<ul>
<li>通过req获取Session对象，获取当前登录用户的对象（信息）</li>
<li>调用Service层中的查询借阅，获取返回值集合</li>
<li>将集合存入域中，跳转页面</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询借阅</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;findAllBorrow&quot;</span>.equals(method))&#123;</span><br><span class="line">    User u =(User) req.getSession().getAttribute(<span class="string">&quot;reader&quot;</span>);</span><br><span class="line">    ArrayList&lt;Borrow&gt; allBorrow = <span class="keyword">new</span> LibraryServiceImp().findAllBorrow(u);</span><br><span class="line">    <span class="comment">//执行分页</span></span><br><span class="line">    String current = req.getParameter(<span class="string">&quot;page&quot;</span>); <span class="comment">//获取当前页</span></span><br><span class="line">    Page page = <span class="keyword">new</span> LibraryServiceImp().getPage(current,allBorrow); <span class="comment">//调用方法获取page对象</span></span><br><span class="line">    req.setAttribute(<span class="string">&quot;page&quot;</span>, page);<span class="comment">//将page对象存入域中</span></span><br><span class="line">    <span class="comment">//获取集合</span></span><br><span class="line">    List&lt;Book&gt; list = (List&lt;Book&gt;) page.getList();</span><br><span class="line">    req.setAttribute(<span class="string">&quot;list&quot;</span>,list);</span><br><span class="line">    <span class="comment">//跳转页面</span></span><br><span class="line">    req.getRequestDispatcher(<span class="string">&quot;borrow.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>因为是显示数据页面，所以同样需要添加分页</p>
</blockquote>
</li>
</ul>
<h4 id="3-Service层-1"><a href="#3-Service层-1" class="headerlink" title="3.Service层"></a>3.Service层</h4><ul>
<li><p>Service层接口中定义添加借阅和显示借阅的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBorrow</span><span class="params">(String bookid,User u)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;Borrow&gt; <span class="title">findAllBorrow</span><span class="params">(User u)</span></span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="Ⅰ-添加借阅"><a href="#Ⅰ-添加借阅" class="headerlink" title="Ⅰ.添加借阅"></a>Ⅰ.<font color='#d15252'>添加</font>借阅</h5><ul>
<li><p>Service实现类中重写add方法</p>
</li>
<li><p>通过前端页面和数据库，整合我们需要添加的数据</p>
<p><img src="https://i.loli.net/2021/09/09/q8A1KZ4SFCnbyhu.png" alt="image-20210909103153228"></p>
<p><img src="https://i.loli.net/2021/09/09/LZGOPx1f8QsAh9z.png" alt="image-20210909103204279"></p>
</li>
<li><p>通过Date获取当前系统时间，通过Calendar在当前时间的基础上添加xx天，作为还书时间</p>
</li>
<li><p>通过传递的当前用户对象，获取读者id,读者编号等信息，并定义初始化审核状态state为0</p>
</li>
<li><p>将所有信息封装为Borrow对象，并调用Dao层的addBorrow方法，向数据库Borrow表添加数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span>   <span class="comment">//添加借阅</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBorrow</span><span class="params">(String bookid,User user)</span></span>&#123;</span><br><span class="line">    <span class="comment">//获取当前系统时间</span></span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">    SimpleDateFormat sf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">    String format = sf.format(date);</span><br><span class="line">    Date parse = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">         parse = sf.parse(format);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    Calendar rightrow = Calendar.getInstance();</span><br><span class="line">    rightrow.setTime(parse);</span><br><span class="line">    rightrow.add(Calendar.MONTH,<span class="number">1</span>);</span><br><span class="line">    Date time = rightrow.getTime();</span><br><span class="line">    String endformat = sf.format(time);</span><br><span class="line">    <span class="comment">//获取借阅ID</span></span><br><span class="line">    <span class="keyword">int</span> id = (<span class="keyword">new</span> LibraryDaoImp().maxId())+<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//获取书籍id</span></span><br><span class="line">    <span class="keyword">int</span> bookidd = Integer.parseInt(bookid);</span><br><span class="line">    <span class="comment">//获取读者Id</span></span><br><span class="line">    <span class="keyword">int</span> readerid = user.getId();</span><br><span class="line">    <span class="keyword">int</span> adminid = user.getCardid();</span><br><span class="line">    <span class="keyword">int</span> state = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">new</span> LibraryDaoImp().addBorrow(<span class="keyword">new</span> Borrow(id,bookidd,readerid,format,endformat,adminid,state));</span><br><span class="line">    System.out.println(<span class="string">&quot;创建借阅请求成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="Ⅱ-查询借阅"><a href="#Ⅱ-查询借阅" class="headerlink" title="Ⅱ.查询借阅"></a>Ⅱ.<font color='#d15252'>查询</font>借阅</h5><ul>
<li>创建Dao层对象，调用查询Borrow表数据，返回集合</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span>   <span class="comment">//查询借阅</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;Borrow&gt; <span class="title">findAllBorrow</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;Borrow&gt; allBorrow = <span class="keyword">new</span> LibraryDaoImp().findAllBorrow(user);</span><br><span class="line">    <span class="keyword">return</span> allBorrow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="4-Dao层-1"><a href="#4-Dao层-1" class="headerlink" title="4.Dao层"></a>4.Dao层</h4><ul>
<li>Dao层接口中添加查询借阅和添加借阅的方法</li>
</ul>
<h5 id="Ⅰ-添加借阅-1"><a href="#Ⅰ-添加借阅-1" class="headerlink" title="Ⅰ.添加借阅"></a>Ⅰ.添加借阅</h5><ul>
<li>获取连接及工具</li>
<li>执行添加sql语句<ul>
<li>数据是Service传递的Borrow对象中</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span>   <span class="comment">//添加借阅</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBorrow</span><span class="params">(Borrow borrow)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//拿到前端数据，将数据存入数据库</span></span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    Connection connect = ConnectTool.getConnect();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//获取工具</span></span><br><span class="line">        Statement statement = connect.createStatement();</span><br><span class="line">        <span class="comment">//执行sql语句</span></span><br><span class="line">        <span class="comment">//INSERT INTO borrow  (id,bookid,readerid,borrowtime,returntime,adminid,state) VALUES (2,1,1,2017,2018,0,0)</span></span><br><span class="line">        String sql = <span class="string">&quot;INSERT INTO borrow(id,bookid,readerid,borrowtime,returntime,adminid,state) VALUES (&quot;</span> + borrow.getId() + <span class="string">&quot;,&quot;</span> + borrow.getBookid() + <span class="string">&quot;,&quot;</span> + borrow.getReaderid() + <span class="string">&quot;,&#x27;&quot;</span> + borrow.getBorrowtime() + <span class="string">&quot;&#x27;,&#x27;&quot;</span> + borrow.getReturntime() + <span class="string">&quot;&#x27;,&quot;</span> + borrow.getAdminid() + <span class="string">&quot;,&quot;</span> + borrow.getState() + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">        statement.executeUpdate(sql);</span><br><span class="line">        System.out.println(<span class="string">&quot;添加借阅请求成功&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">        throwables.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="Ⅱ-查询借阅-1"><a href="#Ⅱ-查询借阅-1" class="headerlink" title="Ⅱ.查询借阅"></a>Ⅱ.<font color='#d15252'>查询</font>借阅</h5><ul>
<li><p>由前端页面和数据库可以得出</p>
<p><img src="https://i.loli.net/2021/09/09/PTztAIVRxk9cpso.png" alt="image-20210909103825418"></p>
</li>
<li><p>查询已借阅的图书，需要查询book表以及borrow表</p>
<ul>
<li>用到双表查询</li>
</ul>
</li>
<li><p>查询book表和borrow表，书籍id相同的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> book,borrow <span class="keyword">WHERE</span> book.`id`<span class="operator">=</span> borrow.`bookid`</span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span>   <span class="comment">//查询所有借阅</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;Borrow&gt; <span class="title">findAllBorrow</span><span class="params">(User u)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    Connection connect = ConnectTool.getConnect();</span><br><span class="line">    ArrayList&lt;Borrow&gt; borrows = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//加载工具</span></span><br><span class="line">        Statement statement = connect.createStatement();</span><br><span class="line">        <span class="comment">//执行查询语句</span></span><br><span class="line">        ResultSet resultSet = statement.executeQuery(<span class="string">&quot;SELECT * FROM book,borrow WHERE book.`id`= borrow.`bookid`&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> cardid = u.getCardid();</span><br><span class="line">        <span class="comment">//循环存入集合</span></span><br><span class="line">        <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">            <span class="keyword">int</span> adminid = resultSet.getInt(<span class="string">&quot;adminid&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (adminid == cardid) &#123;</span><br><span class="line">                <span class="keyword">int</span> id = resultSet.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                <span class="comment">//有问题ID ，重名</span></span><br><span class="line">                <span class="keyword">int</span> bookid = resultSet.getInt(<span class="string">&quot;bookid&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> readerid = resultSet.getInt(<span class="string">&quot;readerid&quot;</span>);</span><br><span class="line">                String borrowtime = resultSet.getString(<span class="string">&quot;borrowtime&quot;</span>);</span><br><span class="line">                String returntime = resultSet.getString(<span class="string">&quot;returntime&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> state = resultSet.getInt(<span class="string">&quot;state&quot;</span>);</span><br><span class="line">                String name = resultSet.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                String author = resultSet.getString(<span class="string">&quot;author&quot;</span>);</span><br><span class="line">                String publish = resultSet.getString(<span class="string">&quot;publish&quot;</span>);</span><br><span class="line">                Book book = <span class="keyword">new</span> Book(name, author, publish);</span><br><span class="line">                User user = <span class="keyword">new</span> User(u.getName(), u.getTel(), u.getCardid());</span><br><span class="line">                Borrow borrow = <span class="keyword">new</span> Borrow(book, user, id, bookid, readerid, borrowtime, returntime, adminid, state);</span><br><span class="line"></span><br><span class="line">                borrows.add(borrow);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> borrows;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">        throwables.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>将数据库查询出的零散数据，封装到Borrow对象中（其中包含了一个User对象，一个Book对象），并存入集合</li>
</ul>
<h4 id="5-JavaBean"><a href="#5-JavaBean" class="headerlink" title="5.JavaBean"></a>5.JavaBean</h4><ul>
<li>新建Borrow实体类</li>
<li>成员变量：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Book b ;</span><br><span class="line"><span class="keyword">public</span> User u ;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> bookid;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> readerid;</span><br><span class="line"><span class="keyword">private</span> String borrowtime;</span><br><span class="line"><span class="keyword">private</span> String returntime;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> adminid;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> state;</span><br></pre></td></tr></table></figure>

<ul>
<li>重写构造方法（根据需求写不同的）</li>
<li>重写get/set’</li>
<li>重写toString</li>
<li>重写equal，hashCode</li>
</ul>
<h3 id="五、实现管理员页面数据显示和操作"><a href="#五、实现管理员页面数据显示和操作" class="headerlink" title="五、实现管理员页面数据显示和操作"></a>五、实现管理员页面数据显示和操作</h3><ul>
<li><p>login登录时选择管理员</p>
<ul>
<li>登录成功后跳转到admin程序</li>
</ul>
<p><img src="https://i.loli.net/2021/09/09/JrHl5goQVxRLOPK.png" alt="image-20210909111432881"></p>
</li>
</ul>
<h4 id="1-Servlet层-1"><a href="#1-Servlet层-1" class="headerlink" title="1.Servlet层"></a>1.Servlet层</h4><ul>
<li>新建admin程序，接收前端数据method<ul>
<li>判断如果method == hadle ，则点击了操作按钮（同意借阅或拒绝借阅）<ul>
<li>接收前端数据当前借阅请求的id以及操作的state（状态）</li>
<li>调用管理员操作Service层的adminOperation方法，操作数据库</li>
<li>传递数据id和state</li>
</ul>
</li>
<li>调用Service层中的admin显示管理员页面数据方法，返回集合</li>
<li>将集合存入域中，由前端取数据使用</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    String current = req.getParameter(<span class="string">&quot;page&quot;</span>); <span class="comment">//获取当前页</span></span><br><span class="line">    <span class="comment">//接收前端数据</span></span><br><span class="line">    String method = req.getParameter(<span class="string">&quot;method&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;handle&quot;</span>.equals(method))&#123;</span><br><span class="line">        <span class="keyword">int</span> id = Integer.parseInt(req.getParameter(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">        <span class="keyword">int</span> state = Integer.parseInt(req.getParameter(<span class="string">&quot;state&quot;</span>));</span><br><span class="line">        <span class="keyword">new</span> LibraryServiceImp().adminOperation(id,state);</span><br><span class="line">    &#125;</span><br><span class="line">    ArrayList&lt;Borrow&gt; admin = <span class="keyword">new</span> LibraryServiceImp().admin();</span><br><span class="line">    System.out.println(admin);</span><br><span class="line">    Page page = <span class="keyword">new</span> LibraryServiceImp().getPage(current,admin); <span class="comment">//调用方法获取page对象</span></span><br><span class="line">    req.setAttribute(<span class="string">&quot;page&quot;</span>, page);<span class="comment">//将page对象存入域中</span></span><br><span class="line">    <span class="comment">//获取集合</span></span><br><span class="line">    List&lt;Book&gt; list = (List&lt;Book&gt;) page.getList();</span><br><span class="line">    <span class="comment">//将书籍存入域中</span></span><br><span class="line">    req.setAttribute(<span class="string">&quot;list&quot;</span>,list);</span><br><span class="line">    <span class="comment">//跳转页面</span></span><br><span class="line">    req.getRequestDispatcher(<span class="string">&quot;/admin.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-Service层-1"><a href="#2-Service层-1" class="headerlink" title="2.Service层"></a>2.Service层</h4><h5 id="Ⅰ-管理员操作"><a href="#Ⅰ-管理员操作" class="headerlink" title="Ⅰ.管理员操作"></a>Ⅰ.管理员操作</h5><ul>
<li>创建Dao层对象，调用adminOperation方法操作数据库，传入参数id以及state</li>
</ul>
<h5 id="Ⅱ-管理员页面数据查询"><a href="#Ⅱ-管理员页面数据查询" class="headerlink" title="Ⅱ.管理员页面数据查询"></a>Ⅱ.管理员页面数据查询</h5><ul>
<li>创建Dao层对象，使用admin方法，获取集合数据，由return带回给Servlet层</li>
</ul>
<h4 id="3-Dao层-1"><a href="#3-Dao层-1" class="headerlink" title="3.Dao层"></a>3.Dao层</h4><ul>
<li>新建操作和查询方法</li>
</ul>
<p><img src="https://i.loli.net/2021/09/09/S3wTeqcBPAZgDXp.png" alt="image-20210909112434830"></p>
<h5 id="Ⅰ-管理员操作-1"><a href="#Ⅰ-管理员操作-1" class="headerlink" title="Ⅰ.管理员操作"></a>Ⅰ.管理员操作</h5><ul>
<li>获取连接，执行sql语句</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UPDATE borrow <span class="keyword">SET</span> state <span class="operator">=</span>&quot; + state + &quot; <span class="keyword">WHERE</span> bookid<span class="operator">=</span>&quot; + id</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span>   <span class="comment">//管理员操作</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">adminOperation</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    Connection connect = ConnectTool.getConnect();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//获取工具</span></span><br><span class="line">        Statement statement = connect.createStatement();</span><br><span class="line">        <span class="comment">//执行sql语句，更改state的值 UPDATE borrow SET state = 0 WHERE id = 1;</span></span><br><span class="line">        statement.executeUpdate(<span class="string">&quot;UPDATE borrow SET state =&quot;</span> + state + <span class="string">&quot; WHERE bookid=&quot;</span> + id);</span><br><span class="line">        System.out.println(<span class="string">&quot;管理员操作数据库成功&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">        throwables.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Ⅱ-管理员页面数据查询-1"><a href="#Ⅱ-管理员页面数据查询-1" class="headerlink" title="Ⅱ.管理员页面数据查询"></a>Ⅱ.管理员页面数据查询</h5><ul>
<li>获取连接，执行sql语句<ul>
<li>由前端页面和数据库可知，管理员数据显示页面，需要使用book,borrow,以及reader三个表的数据</li>
<li>使用多表查询以及同字段起别名的方法，取出所需要的数据</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.id,a.name,a.author,a.publish,r.name <span class="keyword">AS</span> readername,r.cardid,r.tel,u.borrowtime,u.returntime <span class="keyword">FROM</span> book <span class="keyword">AS</span> a,borrow <span class="keyword">AS</span> u,reader <span class="keyword">AS</span> r <span class="keyword">WHERE</span> a.`id`<span class="operator">=</span> u.`bookid` <span class="keyword">AND</span> u.`readerid`<span class="operator">=</span>r.`id` <span class="keyword">AND</span> state<span class="operator">=</span><span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>将取出的零散数据，封装成borrow对象（其中包含一个book对象和一个user(reader)对象）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span>   <span class="comment">//管理员页面数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;Borrow&gt; <span class="title">admin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    Connection connect = ConnectTool.getConnect();</span><br><span class="line">    ArrayList&lt;Borrow&gt; borrows = <span class="keyword">new</span> ArrayList&lt;Borrow&gt;();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//加载工具</span></span><br><span class="line">        Statement statement = connect.createStatement();</span><br><span class="line">        <span class="comment">//执行sql语句 查出所有已经被借阅的书籍信息</span></span><br><span class="line">        ResultSet resultSet = statement.executeQuery(<span class="string">&quot;SELECT a.id,a.name,a.author,a.publish,r.name AS readername,r.cardid,r.tel,u.borrowtime,u.returntime FROM book AS a,borrow AS u,reader AS r WHERE a.`id`= u.`bookid` AND u.`readerid`=r.`id` AND state=0;&quot;</span>);</span><br><span class="line">        <span class="comment">//循环存入集合</span></span><br><span class="line">        <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">            <span class="comment">//书籍名称</span></span><br><span class="line">            String name = resultSet.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            <span class="comment">//书籍编号</span></span><br><span class="line">            <span class="keyword">int</span> id = resultSet.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            <span class="comment">//作者</span></span><br><span class="line">            String author = resultSet.getString(<span class="string">&quot;author&quot;</span>);</span><br><span class="line">            <span class="comment">//读者姓名</span></span><br><span class="line">            String readername = resultSet.getString(<span class="string">&quot;readername&quot;</span>);</span><br><span class="line">            <span class="comment">//联系电话</span></span><br><span class="line">            <span class="keyword">int</span> tel = resultSet.getInt(<span class="string">&quot;tel&quot;</span>);</span><br><span class="line">            <span class="comment">//证件编号</span></span><br><span class="line">            <span class="keyword">int</span> cardid = resultSet.getInt(<span class="string">&quot;cardid&quot;</span>);</span><br><span class="line">            <span class="comment">//借书时间</span></span><br><span class="line">            String borrowtime = resultSet.getString(<span class="string">&quot;borrowtime&quot;</span>);</span><br><span class="line">            <span class="comment">//还书时间</span></span><br><span class="line">            String returntime = resultSet.getString(<span class="string">&quot;returntime&quot;</span>);</span><br><span class="line">            Book book = <span class="keyword">new</span> Book(name, author);</span><br><span class="line">            User user = <span class="keyword">new</span> User(readername, tel, cardid);</span><br><span class="line">            <span class="comment">//存入集合</span></span><br><span class="line">            borrows.add(<span class="keyword">new</span> Borrow(book, user, id, borrowtime, returntime));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> borrows;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">        throwables.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> borrows;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="六、实现页面数据分页"><a href="#六、实现页面数据分页" class="headerlink" title="六、实现页面数据分页"></a>六、实现页面数据<font color='#d15252'>分页</font></h3><ul>
<li>以Index.jsp页面为例</li>
</ul>
<h4 id="1-思路"><a href="#1-思路" class="headerlink" title="1.思路"></a>1.思路</h4><p><img src="https://i.loli.net/2021/09/09/bEgQ2Hd8vLTprF3.png" alt="image-20210909113047554"></p>
<p><img src="https://i.loli.net/2021/09/09/uLvCqZTYUJdSiIN.png" alt="image-20210909113113931"></p>
<ul>
<li>由前端页面可知，分页按钮分别触发自己的JS事件，向book程序（查询书籍数据信息的web程序）发送请求，并携带参数page<ul>
<li>由于我将查询书籍书籍信息功能单独取出，封装在了showbook程序中</li>
<li>所以，我将按钮点击触发事件中的请求改为向show程序发送请求</li>
</ul>
</li>
<li>参数page<ul>
<li>代表当前页面</li>
<li>在点击事件中，当点击上一页时，触发-1；点击下一页时，触发+1，这些都不需要更改，只要了解到</li>
</ul>
</li>
</ul>
<h4 id="2-步骤"><a href="#2-步骤" class="headerlink" title="2.步骤"></a>2.步骤</h4><ul>
<li><p>首先在JavaBean层中，创建一个Page实体类，用于存储封装所有分页相关的信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Integer currentPage; <span class="comment">//当前页</span></span><br><span class="line"><span class="keyword">private</span> Integer pageSize;    <span class="comment">//页大小</span></span><br><span class="line"><span class="keyword">private</span> Integer pageCount;   <span class="comment">//页数量</span></span><br><span class="line"><span class="keyword">private</span> Integer totalCount;  <span class="comment">//总条数</span></span><br><span class="line"><span class="keyword">private</span> List&lt;?&gt; list;   <span class="comment">//数据</span></span><br><span class="line"><span class="keyword">private</span> String  url;         <span class="comment">//参数路径</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/09/09/FIk6DMqUcejQsKy.png" alt="image-20210909113637088"></p>
</li>
<li><p><strong>Servlet层</strong>：我们需要在show程序中，接收page参数，获取到当前的页面（比如第一页）</p>
<ul>
<li>接下来我们需要正常获取所有书籍的信息，和之前一样，调用Dao层中的showbook方法，得到一个信息集合</li>
<li>如果要实现分类，就需要对集合进行截取，并且截取的开始索引和结束索引不是固定的，但可以通过计算得出</li>
<li>所以我们需要在Service层中新建一个方法，将集合参数和前端获取的页码传入</li>
<li>并且我们需要Service处理完成后，返回一个处理完成后的集合，并且通过前端页面我们知道，还需要得到页面数据条数，当前页，所有页等信息，显示在网页下方</li>
<li>所以，这些信息可以封装成一个page对象，我们只需要接收Service层处理完成的一个page对象，并存入域中，由前端页面使用即可</li>
</ul>
<p><img src="https://i.loli.net/2021/09/09/V6Zhpfz3TUtgIPy.png" alt="image-20210909123421224"></p>
</li>
<li><p>**<font color='#d15252'>Service层</font>**：在Service层中，首先我们需要<font color='#d15252'>初始化</font>一次当前页码的页码为1，并定好每页显示多少条数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> currentPage = <span class="number">1</span>; <span class="comment">// 默认为第一页</span></span><br><span class="line"><span class="keyword">int</span> pageSize    = <span class="number">10</span>; <span class="comment">// 每页显示10条记录</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>接下来，我们需要判断前端页面传递的页码参数是否为空（如果是第一次运行程序，就会为空，为空则不用前端传递的空值，我们初始化了第一页）</p>
<ul>
<li>如果不为空，则将currentPage（页码）改为前端页面传输过来的值</li>
</ul>
</li>
<li><p>创建一个page对象，带参构造存入当前页面页码和每页显示多少条数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当前页和当前页大小创建page对象</span></span><br><span class="line">Page page = <span class="keyword">new</span> Page(currentPage, pageSize);</span><br></pre></td></tr></table></figure></li>
<li><p>对Servlet传递过来的所以书籍数据集合判断长度，调用size()方法，就可以查出所有数据有多少个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取总数据条数并设置</span></span><br><span class="line"><span class="keyword">int</span> booksCount = list.size();</span><br><span class="line">page.setTotalCount(booksCount);</span><br></pre></td></tr></table></figure></li>
<li><p>计算所有的数据，需要多少页才能展示出来，即页码的数量</p>
<ul>
<li>用 总条数/页大小 = 页数量</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 页数量==总条数/页大小</span></span><br><span class="line"><span class="keyword">int</span> pageCount = booksCount/pageSize;</span><br></pre></td></tr></table></figure>

<ul>
<li>但是，Java中除法得出的结果不会显示余数，所以我们需要再判断 总条数%页数量</li>
<li>如果取模不为0时，则表示还有余数，页码数量还需要再加一，如果取模为1，则数据刚好被整除</li>
<li>并将总数据存入page对象保存</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//如果整除就是该值，否则+1</span></span><br><span class="line">pageCount=booksCount%pageSize==<span class="number">0</span>?pageCount:pageCount+<span class="number">1</span>;</span><br><span class="line"> page.setPageCount(pageCount);   <span class="comment">//设置页数量</span></span><br></pre></td></tr></table></figure></li>
<li><p>我们还需要计算截取集合的起始索引和结束索引</p>
</li>
<li><p>起始索引为 (当前页-1)*每页显示几条数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 起始下标为（当前页-1）*页大小</span></span><br><span class="line"><span class="keyword">int</span> startIndex = (currentPage-<span class="number">1</span>)*pageSize;</span><br></pre></td></tr></table></figure></li>
<li><p>结束索引：结束索引因进行判断</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>((currentPage*pageSize)&lt;=booksCount)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;结束索引&quot;</span>+number);</span><br><span class="line">    List&lt;?&gt; books = list.subList(startIndex, number);</span><br><span class="line">    page.setList(books);   <span class="comment">//设置数据</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;结束索引&quot;</span>+booksCount);</span><br><span class="line">    List&lt;?&gt; books = list.subList(startIndex, booksCount);</span><br><span class="line">    page.setList(books);   <span class="comment">//设置数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果  a = 当前页*每页显示数据（从0–当前页最多显示多少条数据）<ul>
<li>a&lt;= 总数据条数时，表示即使当前页面显示满10条数据，也还有剩余数据。<ul>
<li>所以，结束索引就是当前页面*每页显示多少条数据</li>
<li>开始索引是当前页面-1*每页显示多少条数据</li>
</ul>
</li>
<li>当a&gt;总数据条数时，即表示剩余数据不能写满当前页面，结束索引是总数据的数量即可</li>
</ul>
</li>
<li>将截取好的数据存入page对象中</li>
<li>最后，返回page对象即可</li>
</ul>
</li>
</ul>
<h4 id="3-前端"><a href="#3-前端" class="headerlink" title="3.前端"></a>3.前端</h4><ul>
<li>在servlet向前端页面发送list集合时，从page对象中取出已经截取后的List集合，发送到前端集合</li>
<li>前端需要显示page相关信息的地方，通过调用page的属性即可</li>
</ul>
]]></content>
      <categories>
        <category>案例</category>
      </categories>
      <tags>
        <tag>网络编程</tag>
      </tags>
  </entry>
</search>
